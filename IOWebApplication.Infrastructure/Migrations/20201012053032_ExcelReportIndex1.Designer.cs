// <auto-generated />
using System;
using IOWebApplication.Infrastructure.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IOWebApplication.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201012053032_ExcelReportIndex1")]
    partial class ExcelReportIndex1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IO.LogOperation.Models.LogOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnName("action")
                        .HasMaxLength(500);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnName("controller")
                        .HasMaxLength(500);

                    b.Property<string>("MasterKey")
                        .HasColumnName("master_key")
                        .HasMaxLength(50);

                    b.Property<string>("ObjectKey")
                        .IsRequired()
                        .HasColumnName("object_key")
                        .HasMaxLength(50);

                    b.Property<DateTime>("OperationDate")
                        .HasColumnName("operation_date");

                    b.Property<int>("OperationTypeID")
                        .HasColumnName("operation_type_id");

                    b.Property<string>("OperationUser")
                        .HasColumnName("operation_user")
                        .HasMaxLength(500);

                    b.Property<string>("OperationUserID")
                        .HasColumnName("operation_user_id")
                        .HasMaxLength(50);

                    b.Property<string>("UserData")
                        .HasColumnName("user_data");

                    b.HasKey("Id");

                    b.ToTable("log_operations");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Audit.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .HasColumnName("data")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("InsertedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("inserted_date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("audit_log","audit_log");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseCharacterId")
                        .HasColumnName("case_character_id");

                    b.Property<int?>("CaseCodeId")
                        .HasColumnName("case_code_id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<DateTime?>("CaseInforcedDate")
                        .HasColumnName("case_inforced_date");

                    b.Property<int?>("CaseReasonId")
                        .HasColumnName("case_reason_id");

                    b.Property<string>("CaseStateDescription")
                        .HasColumnName("case_state_description");

                    b.Property<int>("CaseStateId")
                        .HasColumnName("case_state_id");

                    b.Property<int>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.Property<int?>("CaseTypeUnitId")
                        .HasColumnName("case_type_unit_id");

                    b.Property<decimal>("ComplexIndex")
                        .HasColumnName("complex_index");

                    b.Property<int?>("ComplexIndexActual")
                        .HasColumnName("complex_index_actual");

                    b.Property<int?>("ComplexIndexLegal")
                        .HasColumnName("complex_index_legal");

                    b.Property<decimal?>("CorrectionLoadIndex")
                        .HasColumnName("correction_load_index");

                    b.Property<int?>("CourtGroupId")
                        .HasColumnName("court_group_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<long>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<string>("EISSPNumber")
                        .HasColumnName("eispp_number");

                    b.Property<bool?>("IsISPNcase")
                        .HasColumnName("is_ispn_case");

                    b.Property<bool?>("IsNewCaseNewNumber")
                        .HasColumnName("is_new_case_new_number");

                    b.Property<bool?>("IsOldNumber")
                        .HasColumnName("is_old_number");

                    b.Property<bool>("IsRestictedAccess")
                        .HasColumnName("is_resticted_access");

                    b.Property<int?>("LoadGroupLinkId")
                        .HasColumnName("load_group_link_id");

                    b.Property<decimal>("LoadIndex")
                        .HasColumnName("load_index");

                    b.Property<int?>("ProcessPriorityId")
                        .HasColumnName("process_priority_id");

                    b.Property<DateTime>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<string>("ShortNumber")
                        .HasColumnName("short_number");

                    b.Property<int?>("ShortNumberValue")
                        .HasColumnName("short_number_value");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseCharacterId");

                    b.HasIndex("CaseCodeId");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("CaseReasonId");

                    b.HasIndex("CaseStateId");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("CaseTypeUnitId");

                    b.HasIndex("CourtGroupId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("LoadGroupLinkId");

                    b.HasIndex("ProcessPriorityId");

                    b.HasIndex("UserId");

                    b.ToTable("case");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ActDestroyLabel")
                        .HasColumnName("act_destroy_label");

                    b.Property<int?>("ArchiveIndexId")
                        .HasColumnName("archive_index_id");

                    b.Property<string>("ArchiveLink")
                        .HasColumnName("archive_link");

                    b.Property<int>("BookNumber")
                        .HasColumnName("book_number");

                    b.Property<int?>("BookYear")
                        .HasColumnName("book_year");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateDestroy")
                        .HasColumnName("date_destroy");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionInfo")
                        .HasColumnName("description_info");

                    b.Property<string>("DescriptionInfoDestroy")
                        .HasColumnName("description_info_destroy");

                    b.Property<bool?>("IsOldNumber")
                        .HasColumnName("is_old_number");

                    b.Property<DateTime>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<int>("StorageYears")
                        .HasColumnName("storage_years");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveIndexId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("case_archive");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseBankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BIC")
                        .HasColumnName("bic");

                    b.Property<string>("BankName")
                        .HasColumnName("bank_name");

                    b.Property<int>("CaseBankAccountTypeId")
                        .HasColumnName("case_bank_account_type_id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("IBAN")
                        .HasColumnName("iban");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseBankAccountTypeId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("case_bank_account");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int>("ClassificationId")
                        .HasColumnName("classification_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("CourtId");

                    b.ToTable("case_classification");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseCrime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CompletitionDegree")
                        .HasColumnName("completition_degree");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<string>("CrimeCode")
                        .HasColumnName("crime_code");

                    b.Property<string>("CrimeName")
                        .HasColumnName("crime_name");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<string>("EISSId")
                        .HasColumnName("eispp_id");

                    b.Property<string>("EISSPNumber")
                        .HasColumnName("eispp_number");

                    b.Property<int?>("StartDateType")
                        .HasColumnName("start_date_type");

                    b.Property<int?>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnName("status_date");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_crimes");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseDeactivation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DeactivateUserId")
                        .HasColumnName("deactivate_user_id");

                    b.Property<DateTime?>("DeclaredDate")
                        .HasColumnName("declared_date");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DeactivateUserId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_deactivation");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseDeadline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseSessionResultId")
                        .HasColumnName("case_session_result_id ");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateComplete")
                        .HasColumnName("date_complete");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int>("DeadlineGroupId")
                        .HasColumnName("deadline_group_id");

                    b.Property<int>("DeadlineTypeId")
                        .HasColumnName("deadline_type_id");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("end_date");

                    b.Property<int?>("ResultExpiredId")
                        .HasColumnName("result_expired_id");

                    b.Property<long>("SourceId")
                        .HasColumnName("source_id");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionResultId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DeadlineGroupId");

                    b.HasIndex("DeadlineTypeId");

                    b.HasIndex("ResultExpiredId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_deadline");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseDepersonalizationValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<bool>("IsCaseInsensitive")
                        .HasColumnName("is_case_insensitive");

                    b.Property<string>("ReplaceValue")
                        .HasColumnName("replace_value");

                    b.Property<string>("SearchValue")
                        .HasColumnName("search_value");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("case_depersonalization_value");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseEvidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AddInfo")
                        .HasColumnName("add_info");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateAccept")
                        .HasColumnName("date_accept");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<int>("EvidenceStateId")
                        .HasColumnName("evidence_state_id");

                    b.Property<int>("EvidenceTypeId")
                        .HasColumnName("evidence_type");

                    b.Property<string>("FileNumber")
                        .HasColumnName("file_number");

                    b.Property<string>("Location")
                        .HasColumnName("location");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<int?>("RegNumberValue")
                        .HasColumnName("reg_number_value");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtId");

                    b.HasIndex("EvidenceStateId");

                    b.HasIndex("EvidenceTypeId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_evidence");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseEvidenceMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ActDescription")
                        .HasColumnName("act_description");

                    b.Property<int>("CaseEvidenceId")
                        .HasColumnName("case_evidence_id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("EvidenceMovementTypeId")
                        .HasColumnName("evidence_movement_type_id");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnName("movement_date");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseEvidenceId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtId");

                    b.HasIndex("EvidenceMovementTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("case_evidence_movement");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseFastProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool?>("IsRespectedAmount")
                        .HasColumnName("is_respected_amount");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnName("tax_amount");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("case_fast_process");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseH", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id");

                    b.Property<int>("CaseCharacterId")
                        .HasColumnName("case_character_id");

                    b.Property<int?>("CaseCodeId")
                        .HasColumnName("case_code_id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<DateTime?>("CaseInforcedDate")
                        .HasColumnName("case_inforced_date");

                    b.Property<int?>("CaseReasonId")
                        .HasColumnName("case_reason_id");

                    b.Property<string>("CaseStateDescription")
                        .HasColumnName("case_state_description");

                    b.Property<int>("CaseStateId")
                        .HasColumnName("case_state_id");

                    b.Property<int>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.Property<int?>("CaseTypeUnitId")
                        .HasColumnName("case_type_unit_id");

                    b.Property<decimal>("ComplexIndex")
                        .HasColumnName("complex_index");

                    b.Property<int?>("ComplexIndexActual")
                        .HasColumnName("complex_index_actual");

                    b.Property<int?>("ComplexIndexLegal")
                        .HasColumnName("complex_index_legal");

                    b.Property<decimal?>("CorrectionLoadIndex")
                        .HasColumnName("correction_load_index");

                    b.Property<int?>("CourtGroupId")
                        .HasColumnName("court_group_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<long>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<string>("EISSPNumber")
                        .HasColumnName("eispp_number");

                    b.Property<DateTime?>("HistoryDateExpire")
                        .HasColumnName("history_date_expire");

                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<bool?>("IsISPNcase")
                        .HasColumnName("is_ispn_case");

                    b.Property<bool?>("IsNewCaseNewNumber")
                        .HasColumnName("is_new_case_new_number");

                    b.Property<bool?>("IsOldNumber")
                        .HasColumnName("is_old_number");

                    b.Property<bool>("IsRestictedAccess")
                        .HasColumnName("is_resticted_access");

                    b.Property<int?>("LoadGroupLinkId")
                        .HasColumnName("load_group_link_id");

                    b.Property<decimal>("LoadIndex")
                        .HasColumnName("load_index");

                    b.Property<int?>("ProcessPriorityId")
                        .HasColumnName("process_priority_id");

                    b.Property<DateTime>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<string>("ShortNumber")
                        .HasColumnName("short_number");

                    b.Property<int?>("ShortNumberValue")
                        .HasColumnName("short_number_value");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("HistoryId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("case_h");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseSelectionProtokolId")
                        .HasColumnName("case_selection_protokol_id");

                    b.Property<int?>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CourtDepartmentId")
                        .HasColumnName("court_department_id");

                    b.Property<int?>("CourtDutyId")
                        .HasColumnName("court_duty_id");

                    b.Property<int?>("CourtGroupId")
                        .HasColumnName("court_group_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("JudgeDepartmentRoleId")
                        .HasColumnName("judge_department_role_id");

                    b.Property<int>("JudgeRoleId")
                        .HasColumnName("judge_role_id");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<int?>("LawUnitSubstitutionId")
                        .HasColumnName("law_unit_substitution_id");

                    b.Property<string>("LawUnitUserId")
                        .HasColumnName("lawunit_user_id");

                    b.Property<int?>("RealCourtDepartmentId")
                        .HasColumnName("real_court_department_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSelectionProtokolId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("CourtDepartmentId");

                    b.HasIndex("CourtDutyId");

                    b.HasIndex("CourtGroupId");

                    b.HasIndex("CourtId");

                    b.HasIndex("JudgeDepartmentRoleId");

                    b.HasIndex("JudgeRoleId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("LawUnitSubstitutionId");

                    b.HasIndex("LawUnitUserId");

                    b.HasIndex("RealCourtDepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("case_lawunit");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnitCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int>("JudgeRoleId")
                        .HasColumnName("judge_role_id");

                    b.Property<int>("PersonCount")
                        .HasColumnName("person_count");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtId");

                    b.HasIndex("JudgeRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("case_lawunit_count");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnitDismisal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseLawUnitId")
                        .HasColumnName("case_lawunit_id");

                    b.Property<int?>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<DateTime>("DismisalDate")
                        .HasColumnName("dismisal_date");

                    b.Property<int?>("DismisalKindId")
                        .HasColumnName("dismisal_kind_id");

                    b.Property<int>("DismisalTypeId")
                        .HasColumnName("dismisal_type_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseLawUnitId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DismisalTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("case_lawunit_dismisal");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnitManualJudge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("JudgeRoleId")
                        .HasColumnName("judge_role_id");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtId");

                    b.HasIndex("JudgeRoleId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("UserId");

                    b.ToTable("case_lawunit_manual_judge");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnitReplace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseLawUnitId")
                        .HasColumnName("case_lawunit_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("ReplaceLawUnitId")
                        .HasColumnName("replace_lawunit_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseLawUnitId");

                    b.HasIndex("CourtId");

                    b.HasIndex("ReplaceLawUnitId");

                    b.HasIndex("UserId");

                    b.ToTable("case_lawunit_replace");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnitTaskChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSessionActId")
                        .HasColumnName("case_session_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("NewTaskUserId")
                        .HasColumnName("new_task_user_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.Property<long>("WorkTaskId")
                        .HasColumnName("work_task_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CourtId");

                    b.HasIndex("NewTaskUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkTaskId");

                    b.ToTable("case_lawunit_task_change");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLifecycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("CaseSessionResultId")
                        .HasColumnName("case_session_result_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("DurationMonths")
                        .HasColumnName("duration_months");

                    b.Property<int>("Iteration")
                        .HasColumnName("iteration");

                    b.Property<int>("LifecycleTypeId")
                        .HasColumnName("lifecycle_type_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CaseSessionResultId");

                    b.HasIndex("CourtId");

                    b.HasIndex("LifecycleTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("case_lifecycle");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLoadCorrection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseLoadCorrectionActivityId")
                        .HasColumnName("case_load_correction_activity_id");

                    b.Property<DateTime>("CorrectionDate")
                        .HasColumnName("correction_date");

                    b.Property<decimal>("CorrectionLoadIndex")
                        .HasColumnName("correction_load_index");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseLoadCorrectionActivityId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_load_correction");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLoadIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<decimal>("BaseIndex")
                        .HasColumnName("base_index");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseLoadAddActivityId")
                        .HasColumnName("case_load_add_activity_id");

                    b.Property<int?>("CaseLoadElementGroupId")
                        .HasColumnName("case_load_element_group_id");

                    b.Property<int?>("CaseLoadElementTypeId")
                        .HasColumnName("case_load_element_type_id");

                    b.Property<int?>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateActivity")
                        .HasColumnName("date_activity");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<bool>("IsMainActivity")
                        .HasColumnName("is_main_activity");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<decimal>("LoadIndex")
                        .HasColumnName("load_index");

                    b.Property<decimal>("LoadProcent")
                        .HasColumnName("load_procent");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseLoadAddActivityId");

                    b.HasIndex("CaseLoadElementGroupId");

                    b.HasIndex("CaseLoadElementTypeId");

                    b.HasIndex("CourtId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_load_index");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMigration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseMigrationTypeId")
                        .HasColumnName("case_migration_type_id");

                    b.Property<int?>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<int>("InitialCaseId")
                        .HasColumnName("initial_case_id");

                    b.Property<int?>("OutCaseMigrationId")
                        .HasColumnName("out_case_migration_id");

                    b.Property<long?>("OutDocumentId")
                        .HasColumnName("out_document_id");

                    b.Property<int>("PriorCaseId")
                        .HasColumnName("prior_case_id");

                    b.Property<int?>("ReturnCaseId")
                        .HasColumnName("return_case_id");

                    b.Property<int?>("SendToCourtId")
                        .HasColumnName("send_to_court_id");

                    b.Property<int?>("SendToInstitutionId")
                        .HasColumnName("send_to_institution_id");

                    b.Property<int?>("SendToInstitutionTypeId")
                        .HasColumnName("send_to_institution_type_id");

                    b.Property<int>("SendToTypeId")
                        .HasColumnName("send_to_type_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseMigrationTypeId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CourtId");

                    b.HasIndex("InitialCaseId");

                    b.HasIndex("OutCaseMigrationId");

                    b.HasIndex("OutDocumentId");

                    b.HasIndex("PriorCaseId");

                    b.HasIndex("ReturnCaseId");

                    b.HasIndex("SendToCourtId");

                    b.HasIndex("SendToInstitutionId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_migration");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseLawUnitId")
                        .HasColumnName("case_lawunit_id");

                    b.Property<int?>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("MoneyTypeId")
                        .HasColumnName("money_type_id");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnName("paid_date");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseLawUnitId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("CourtId");

                    b.HasIndex("MoneyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("case_money");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseMoneyClaimGroupId")
                        .HasColumnName("case_money_claim_group_id");

                    b.Property<int?>("CaseMoneyClaimTypeId")
                        .HasColumnName("case_money_claim_type_id");

                    b.Property<DateTime?>("ClaimDate")
                        .IsRequired()
                        .HasColumnName("claim_date");

                    b.Property<string>("ClaimNumber")
                        .HasColumnName("claim_number");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Motive")
                        .HasColumnName("motive");

                    b.Property<string>("PartyNames")
                        .HasColumnName("party_names");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseMoneyClaimGroupId");

                    b.HasIndex("CaseMoneyClaimTypeId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("case_money_claim");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseMoneyClaimId")
                        .HasColumnName("case_money_claim_id");

                    b.Property<int>("CaseMoneyCollectionGroupId")
                        .HasColumnName("case_money_collection_group_id");

                    b.Property<int?>("CaseMoneyCollectionKindId")
                        .HasColumnName("case_money_collection_kind_id");

                    b.Property<int?>("CaseMoneyCollectionTypeId")
                        .HasColumnName("case_money_collection_type_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<decimal>("InitialAmount")
                        .HasColumnName("initial_amount");

                    b.Property<bool>("JointDistribution")
                        .HasColumnName("joint_distribution");

                    b.Property<string>("Label")
                        .HasColumnName("label");

                    b.Property<int?>("MainCaseMoneyCollectionId")
                        .HasColumnName("main_case_money_collection_id");

                    b.Property<int?>("MoneyCollectionEndDateTypeId")
                        .HasColumnName("money_collection_end_date_type_id");

                    b.Property<string>("Motive")
                        .HasColumnName("motive");

                    b.Property<decimal>("PretendedAmount")
                        .HasColumnName("pretended_amount");

                    b.Property<decimal>("RespectedAmount")
                        .HasColumnName("respected_amount");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseMoneyClaimId");

                    b.HasIndex("CaseMoneyCollectionGroupId");

                    b.HasIndex("CaseMoneyCollectionKindId");

                    b.HasIndex("CaseMoneyCollectionTypeId");

                    b.HasIndex("CourtId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MainCaseMoneyCollectionId");

                    b.HasIndex("MoneyCollectionEndDateTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("case_money_collection");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyCollectionPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseMoneyCollectionId")
                        .HasColumnName("case_money_collection_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<decimal>("PersonAmount")
                        .HasColumnName("person_amount");

                    b.Property<decimal>("RespectedAmount")
                        .HasColumnName("respected_amount");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseMoneyCollectionId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("case_money_collection_person");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseMoneyExpenseTypeId")
                        .HasColumnName("case_money_expense_type_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<int>("CurrencyId")
                        .HasColumnName("currency_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool?>("JointDistribution")
                        .HasColumnName("joint_distribution");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseMoneyExpenseTypeId");

                    b.HasIndex("CourtId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("case_money_expense");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyExpensePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseMoneyExpenseId")
                        .HasColumnName("case_money_expense_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<decimal>("PersonAmount")
                        .HasColumnName("person_amount");

                    b.Property<decimal>("RespectedAmount")
                        .HasColumnName("respected_amount");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseMoneyExpenseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("case_money_expense_person");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AcceptDescription")
                        .HasColumnName("accept_description");

                    b.Property<string>("AcceptUserId")
                        .HasColumnName("accept_user_id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<int?>("CourtOrganizationId")
                        .HasColumnName("court_organization_id");

                    b.Property<DateTime?>("DateAccept")
                        .HasColumnName("date_accept");

                    b.Property<DateTime>("DateSend")
                        .HasColumnName("date_send");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DisableDescription")
                        .HasColumnName("disable_description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("MovementTypeId")
                        .HasColumnName("movement_type_id");

                    b.Property<string>("OtherInstitution")
                        .HasColumnName("other_institution");

                    b.Property<string>("ToUserId")
                        .HasColumnName("to_user_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AcceptUserId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtId");

                    b.HasIndex("CourtOrganizationId");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("ToUserId");

                    b.HasIndex("UserId");

                    b.ToTable("case_movement");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseLawUnitId")
                        .HasColumnName("case_lawunit_id");

                    b.Property<int?>("CasePersonAddressId")
                        .HasColumnName("case_person_address_id");

                    b.Property<int?>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int?>("CasePersonL1Id")
                        .HasColumnName("case_person_l1_id");

                    b.Property<int?>("CasePersonL2Id")
                        .HasColumnName("case_person_l2_id");

                    b.Property<int?>("CasePersonL3Id")
                        .HasColumnName("case_person_l3_id");

                    b.Property<int?>("CasePersonLinkId")
                        .HasColumnName("case_person_link_id");

                    b.Property<int?>("CaseSessionActComplainId")
                        .HasColumnName("case_session_act_complain_id");

                    b.Property<int?>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<string>("CourierTrackNum")
                        .HasColumnName("courier_track_num");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateAccepted")
                        .HasColumnName("date_accepted");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DatePrint")
                        .HasColumnName("date_print");

                    b.Property<DateTime?>("DateSend")
                        .HasColumnName("date_send");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int?>("DeliveryAreaId")
                        .HasColumnName("delivery_area_id");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnName("delivery_date");

                    b.Property<string>("DeliveryInfo")
                        .HasColumnName("delivery_info");

                    b.Property<int?>("DeliveryOperId")
                        .HasColumnName("delivery_oper_id");

                    b.Property<int?>("DeliveryReasonId")
                        .HasColumnName("delivery_reason_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<long?>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<DateTime?>("ExpertDeadDate")
                        .HasColumnName("expert_dead_date");

                    b.Property<string>("ExpertReport")
                        .HasColumnName("expert_report");

                    b.Property<bool?>("HaveАppendix")
                        .HasColumnName("have_appendix");

                    b.Property<int?>("HtmlTemplateId")
                        .HasColumnName("html_template_id");

                    b.Property<bool?>("IsMultiLink")
                        .HasColumnName("is_multi_link");

                    b.Property<bool>("IsOfficialNotification")
                        .HasColumnName("is_official_notification");

                    b.Property<long?>("LawUnitAddressId")
                        .HasColumnName("lawunit_address_id");

                    b.Property<int?>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<int?>("LinkDirectionId")
                        .HasColumnName("link_direction_id");

                    b.Property<int?>("LinkDirectionSecondId")
                        .HasColumnName("link_direction_second_id");

                    b.Property<long?>("NotificationAddressId")
                        .HasColumnName("notification_address_id");

                    b.Property<int?>("NotificationDeliveryGroupId")
                        .HasColumnName("notification_delivery_group_id");

                    b.Property<int?>("NotificationDeliveryTypeId")
                        .HasColumnName("notification_delivery_type_id");

                    b.Property<int?>("NotificationNumber")
                        .HasColumnName("notification_number");

                    b.Property<string>("NotificationPersonDuty")
                        .HasColumnName("notification_person_duty");

                    b.Property<string>("NotificationPersonName")
                        .HasColumnName("notification_person_name");

                    b.Property<int>("NotificationPersonType")
                        .HasColumnName("notification_person_type");

                    b.Property<int>("NotificationStateId")
                        .HasColumnName("notification_state_id");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnName("notification_type_id");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<DateTime>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnName("return_date");

                    b.Property<long?>("ReturnDocumentId")
                        .HasColumnName("return_document_id");

                    b.Property<string>("ReturnInfo")
                        .HasColumnName("return_info");

                    b.Property<int?>("ToCourtId")
                        .HasColumnName("to_court_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseLawUnitId");

                    b.HasIndex("CasePersonAddressId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CasePersonL1Id");

                    b.HasIndex("CasePersonL2Id");

                    b.HasIndex("CasePersonL3Id");

                    b.HasIndex("CasePersonLinkId");

                    b.HasIndex("CaseSessionActComplainId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("HtmlTemplateId");

                    b.HasIndex("LawUnitAddressId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("NotificationAddressId");

                    b.HasIndex("NotificationDeliveryGroupId");

                    b.HasIndex("NotificationDeliveryTypeId");

                    b.HasIndex("NotificationStateId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_notification");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseNotificationH", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseLawUnitId")
                        .HasColumnName("case_lawunit_id");

                    b.Property<int?>("CasePersonAddressId")
                        .HasColumnName("case_person_address_id");

                    b.Property<int?>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int?>("CasePersonL1Id")
                        .HasColumnName("case_person_l1_id");

                    b.Property<int?>("CasePersonL2Id")
                        .HasColumnName("case_person_l2_id");

                    b.Property<int?>("CasePersonL3Id")
                        .HasColumnName("case_person_l3_id");

                    b.Property<int?>("CasePersonLinkId")
                        .HasColumnName("case_person_link_id");

                    b.Property<int?>("CaseSessionActComplainId")
                        .HasColumnName("case_session_act_complain_id");

                    b.Property<int?>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<string>("CourierTrackNum")
                        .HasColumnName("courier_track_num");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateAccepted")
                        .HasColumnName("date_accepted");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DatePrint")
                        .HasColumnName("date_print");

                    b.Property<DateTime?>("DateSend")
                        .HasColumnName("date_send");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int?>("DeliveryAreaId")
                        .HasColumnName("delivery_area_id");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnName("delivery_date");

                    b.Property<string>("DeliveryInfo")
                        .HasColumnName("delivery_info");

                    b.Property<int?>("DeliveryOperId")
                        .HasColumnName("delivery_oper_id");

                    b.Property<int?>("DeliveryReasonId")
                        .HasColumnName("delivery_reason_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<long?>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<DateTime?>("ExpertDeadDate")
                        .HasColumnName("expert_dead_date");

                    b.Property<string>("ExpertReport")
                        .HasColumnName("expert_report");

                    b.Property<bool?>("HaveАppendix")
                        .HasColumnName("have_appendix");

                    b.Property<DateTime?>("HistoryDateExpire")
                        .HasColumnName("history_date_expire");

                    b.Property<int?>("HtmlTemplateId")
                        .HasColumnName("html_template_id");

                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<bool?>("IsMultiLink")
                        .HasColumnName("is_multi_link");

                    b.Property<bool>("IsOfficialNotification")
                        .HasColumnName("is_official_notification");

                    b.Property<long?>("LawUnitAddressId")
                        .HasColumnName("lawunit_address_id");

                    b.Property<int?>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<int?>("LinkDirectionId")
                        .HasColumnName("link_direction_id");

                    b.Property<int?>("LinkDirectionSecondId")
                        .HasColumnName("link_direction_second_id");

                    b.Property<long?>("NotificationAddressId")
                        .HasColumnName("notification_address_id");

                    b.Property<int?>("NotificationDeliveryGroupId")
                        .HasColumnName("notification_delivery_group_id");

                    b.Property<int?>("NotificationDeliveryTypeId")
                        .HasColumnName("notification_delivery_type_id");

                    b.Property<int?>("NotificationNumber")
                        .HasColumnName("notification_number");

                    b.Property<string>("NotificationPersonDuty")
                        .HasColumnName("notification_person_duty");

                    b.Property<string>("NotificationPersonName")
                        .HasColumnName("notification_person_name");

                    b.Property<int>("NotificationPersonType")
                        .HasColumnName("notification_person_type");

                    b.Property<int>("NotificationStateId")
                        .HasColumnName("notification_state_id");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnName("notification_type_id");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<DateTime>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnName("return_date");

                    b.Property<long?>("ReturnDocumentId")
                        .HasColumnName("return_document_id");

                    b.Property<string>("ReturnInfo")
                        .HasColumnName("return_info");

                    b.Property<int?>("ToCourtId")
                        .HasColumnName("to_court_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("HistoryId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("case_notification_h");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseNotificationMLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseNotificationId")
                        .HasColumnName("case_notification_id");

                    b.Property<int?>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int?>("CasePersonLinkId")
                        .HasColumnName("case_person_link_id");

                    b.Property<int?>("CasePersonSummonedId")
                        .HasColumnName("case_person_summoned_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsChecked")
                        .HasColumnName("is_checked");

                    b.Property<string>("PersonSummonedName")
                        .HasColumnName("person_name");

                    b.Property<string>("PersonSummonedRole")
                        .HasColumnName("person_role");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseNotificationId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CasePersonSummonedId");

                    b.HasIndex("CourtId");

                    b.ToTable("case_notification_mlink");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BirthCityCode")
                        .HasColumnName("birth_city_code");

                    b.Property<string>("BirthCountryCode")
                        .HasColumnName("birth_country_code");

                    b.Property<string>("BirthForeignPlace")
                        .HasColumnName("birth_foreign_place");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<string>("CasePersonIdentificator")
                        .HasColumnName("case_person_identificator");

                    b.Property<int?>("CaseSelectionProtokolId")
                        .HasColumnName("case_selection_protokol_id");

                    b.Property<int?>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CompanyTypeId")
                        .HasColumnName("company_type_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<string>("Family2Name")
                        .HasColumnName("family_2_name");

                    b.Property<string>("FamilyName")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<bool?>("ForNotification")
                        .HasColumnName("for_notification");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsArrested")
                        .HasColumnName("is_arrested");

                    b.Property<bool?>("IsDeceased")
                        .HasColumnName("is_deceased");

                    b.Property<bool>("IsInitialPerson")
                        .HasColumnName("is_initial_person");

                    b.Property<string>("LatinName")
                        .HasColumnName("latin_name");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name");

                    b.Property<int?>("MilitaryRangId")
                        .HasColumnName("military_rang_id");

                    b.Property<int?>("NotificationNumber")
                        .HasColumnName("notification_number");

                    b.Property<int?>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<int?>("PersonMaturityId")
                        .HasColumnName("person_maturity_id");

                    b.Property<int>("PersonRoleId")
                        .HasColumnName("person_role_id");

                    b.Property<string>("Person_SourceCode")
                        .HasColumnName("person_source_code");

                    b.Property<long?>("Person_SourceId")
                        .HasColumnName("person_source_id");

                    b.Property<int?>("Person_SourceType")
                        .HasColumnName("person_source_type");

                    b.Property<DateTime?>("ReRegisterDate")
                        .HasColumnName("re_register_date");

                    b.Property<int>("RowNumber")
                        .HasColumnName("row_number");

                    b.Property<string>("TaxNumber")
                        .HasColumnName("tax_number");

                    b.Property<string>("Uic")
                        .HasColumnName("uic");

                    b.Property<int>("UicTypeId")
                        .HasColumnName("uic_type_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSelectionProtokolId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("CourtId");

                    b.HasIndex("MilitaryRangId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonMaturityId");

                    b.HasIndex("PersonRoleId");

                    b.HasIndex("UicTypeId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_person");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<string>("CasePersonAddressIdentificator")
                        .HasColumnName("case_person_address_identificator");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<bool?>("ForNotification")
                        .HasColumnName("for_notification");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_person_address");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonAddressH", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id");

                    b.Property<long>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<string>("CasePersonAddressIdentificator")
                        .HasColumnName("case_person_address_identificator");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<bool?>("ForNotification")
                        .HasColumnName("for_notification");

                    b.Property<DateTime>("HistoryDate")
                        .HasColumnName("history_date");

                    b.Property<DateTime?>("HistoryDateExpire")
                        .HasColumnName("history_date_expire");

                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("HistoryId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("case_person_address_h");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonCrime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseCrimeId")
                        .HasColumnName("case_crime_id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<int>("PersonRoleInCrimeId")
                        .HasColumnName("person_role_in_crime_id");

                    b.Property<int>("RecidiveTypeId")
                        .HasColumnName("recidive_type_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseCrimeId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CourtId");

                    b.HasIndex("PersonRoleInCrimeId");

                    b.HasIndex("RecidiveTypeId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_person_crimes");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnName("document_date");

                    b.Property<DateTime?>("DocumentDateTo")
                        .HasColumnName("document_date_to");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnName("document_number");

                    b.Property<string>("IssuerCountryCode")
                        .IsRequired()
                        .HasColumnName("issuer_country_code");

                    b.Property<string>("IssuerCountryName")
                        .HasColumnName("issuer_country_name");

                    b.Property<string>("IssuerName")
                        .HasColumnName("issuer_name");

                    b.Property<string>("PersonalDocumentTypeId")
                        .IsRequired()
                        .HasColumnName("personal_document_id");

                    b.Property<string>("PersonalDocumentTypeLabel")
                        .HasColumnName("personal_document_label");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_person_documents");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonH", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id");

                    b.Property<string>("BirthCityCode")
                        .HasColumnName("birth_city_code");

                    b.Property<string>("BirthCountryCode")
                        .HasColumnName("birth_country_code");

                    b.Property<string>("BirthForeignPlace")
                        .HasColumnName("birth_foreign_place");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<string>("CasePersonIdentificator")
                        .HasColumnName("case_person_identificator");

                    b.Property<int?>("CaseSelectionProtokolId")
                        .HasColumnName("case_selection_protokol_id");

                    b.Property<int?>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CompanyTypeId")
                        .HasColumnName("company_type_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name");

                    b.Property<string>("Family2Name")
                        .HasColumnName("family_2_name");

                    b.Property<string>("FamilyName")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<bool?>("ForNotification")
                        .HasColumnName("for_notification");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<DateTime?>("HistoryDateExpire")
                        .HasColumnName("history_date_expire");

                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<bool?>("IsArrested")
                        .HasColumnName("is_arrested");

                    b.Property<bool?>("IsDeceased")
                        .HasColumnName("is_deceased");

                    b.Property<bool>("IsInitialPerson")
                        .HasColumnName("is_initial_person");

                    b.Property<string>("LatinName")
                        .HasColumnName("latin_name");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name");

                    b.Property<int?>("MilitaryRangId")
                        .HasColumnName("military_rang_id");

                    b.Property<int?>("NotificationNumber")
                        .HasColumnName("notification_number");

                    b.Property<int?>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<int?>("PersonMaturityId")
                        .HasColumnName("person_maturity_id");

                    b.Property<int>("PersonRoleId")
                        .HasColumnName("person_role_id");

                    b.Property<string>("Person_SourceCode")
                        .HasColumnName("person_source_code");

                    b.Property<long?>("Person_SourceId")
                        .HasColumnName("person_source_id");

                    b.Property<int?>("Person_SourceType")
                        .HasColumnName("person_source_type");

                    b.Property<DateTime?>("ReRegisterDate")
                        .HasColumnName("re_register_date");

                    b.Property<int>("RowNumber")
                        .HasColumnName("row_number");

                    b.Property<string>("TaxNumber")
                        .HasColumnName("tax_number");

                    b.Property<string>("Uic")
                        .HasColumnName("uic");

                    b.Property<int>("UicTypeId")
                        .HasColumnName("uic_type_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("HistoryId");

                    b.HasIndex("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("UicTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("case_person_h");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonInheritance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int>("CasePersonInheritanceResultId")
                        .HasColumnName("case_person_inheritance_result_id");

                    b.Property<int>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int?>("DecreedCourtId")
                        .HasColumnName("decreed_court_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CasePersonInheritanceResultId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DecreedCourtId");

                    b.HasIndex("UserId");

                    b.ToTable("case_person_inheritance");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int>("CasePersonRelId")
                        .HasColumnName("case_person_rel_id");

                    b.Property<int?>("CasePersonSecondRelId")
                        .HasColumnName("case_person_second_rel_id");

                    b.Property<int?>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<int>("LinkDirectionId")
                        .HasColumnName("link_direction_id");

                    b.Property<int?>("LinkDirectionSecondId")
                        .HasColumnName("link_direction_second_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CasePersonRelId");

                    b.HasIndex("CasePersonSecondRelId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("CourtId");

                    b.HasIndex("LinkDirectionId");

                    b.HasIndex("LinkDirectionSecondId");

                    b.ToTable("case_person_link");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<double>("BailAmount")
                        .HasColumnName("bail_amount");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<int?>("MQEpepId")
                        .HasColumnName("mq_epep_id");

                    b.Property<bool?>("MQEpepIsSend")
                        .HasColumnName("mq_epep_is_send");

                    b.Property<int?>("MeasureCourtId")
                        .HasColumnName("measure_court_id");

                    b.Property<int?>("MeasureInstitutionId")
                        .HasColumnName("measure_institution_id");

                    b.Property<string>("MeasureStatus")
                        .IsRequired()
                        .HasColumnName("measure_status");

                    b.Property<DateTime>("MeasureStatusDate")
                        .HasColumnName("measure_status_date");

                    b.Property<string>("MeasureStatusLabel")
                        .HasColumnName("measure_status_label");

                    b.Property<string>("MeasureType")
                        .HasColumnName("measure_type");

                    b.Property<string>("MeasureTypeLabel")
                        .HasColumnName("measure_type_label");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CourtId");

                    b.HasIndex("MeasureCourtId");

                    b.HasIndex("MeasureInstitutionId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_person_measures");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AmnestyDocumentNumber")
                        .HasColumnName("amnesty_document_number");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("ChangeCaseSessionActId")
                        .HasColumnName("change_case_session_act_id");

                    b.Property<int?>("ChangedCasePersonSentenceId")
                        .HasColumnName("changed_case_person_sentence_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int?>("DecreedCourtId")
                        .HasColumnName("decreed_court_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<DateTime?>("EffectiveDateFrom")
                        .HasColumnName("effective_date_from");

                    b.Property<string>("EnforceIncomingDocument")
                        .HasColumnName("enforce_incoming_document");

                    b.Property<DateTime?>("ExecDate")
                        .HasColumnName("exec_date");

                    b.Property<string>("ExecDescription")
                        .HasColumnName("exec_description");

                    b.Property<string>("ExecIncomingDocument")
                        .HasColumnName("exec_incoming_document");

                    b.Property<int?>("ExecInstitutionId")
                        .HasColumnName("exec_institution_id");

                    b.Property<string>("ExecRemark")
                        .HasColumnName("exec_remark");

                    b.Property<DateTime?>("ForInforcementDate")
                        .HasColumnName("for_inforcement_date");

                    b.Property<DateTime?>("InforcedDate")
                        .HasColumnName("inforced_date");

                    b.Property<string>("InforcerDocumentNumber")
                        .HasColumnName("inforcer_document_number");

                    b.Property<int?>("InforcerInstitutionId")
                        .HasColumnName("inforcer_institution_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnName("notification_date");

                    b.Property<long?>("OutDocumentId")
                        .HasColumnName("out_document_id");

                    b.Property<DateTime?>("PunishmentActivityDate")
                        .HasColumnName("punishment_activity_date");

                    b.Property<int?>("PunishmentActivityId")
                        .HasColumnName("punishment_activity_id");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnName("sent_date");

                    b.Property<int?>("SentenceExecPeriodId")
                        .HasColumnName("sentence_exec_period_id");

                    b.Property<int>("SentenceResultTypeId")
                        .HasColumnName("sentence_result_type_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("ChangeCaseSessionActId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DecreedCourtId");

                    b.HasIndex("ExecInstitutionId");

                    b.HasIndex("InforcerInstitutionId");

                    b.HasIndex("OutDocumentId");

                    b.HasIndex("PunishmentActivityId");

                    b.HasIndex("SentenceExecPeriodId");

                    b.HasIndex("SentenceResultTypeId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_person_sentence");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentenceBulletin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnName("birth_day");

                    b.Property<string>("BirthDayPlace")
                        .HasColumnName("birth_day_place");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("FamilyMarriage")
                        .HasColumnName("family_marriage");

                    b.Property<string>("FatherName")
                        .HasColumnName("father_name");

                    b.Property<bool?>("IsAdministrativePunishment")
                        .HasColumnName("is_administrative_punishment");

                    b.Property<bool?>("IsConvicted")
                        .HasColumnName("is_convicted");

                    b.Property<int?>("LawUnitSignId")
                        .HasColumnName("lawunit_sign_id");

                    b.Property<string>("MotherName")
                        .HasColumnName("mother_name");

                    b.Property<string>("Nationality")
                        .HasColumnName("nationality");

                    b.Property<long?>("OutDocumentId")
                        .HasColumnName("out_document_id");

                    b.Property<string>("SentenceDescription")
                        .HasColumnName("sentence_description");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CourtId");

                    b.HasIndex("LawUnitSignId");

                    b.HasIndex("OutDocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("case_person_sentence_bulletin");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentenceLawbase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonSentenceId")
                        .HasColumnName("case_person_sentence_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int>("SentenceLawbaseId")
                        .HasColumnName("sentence_lawbase_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonSentenceId");

                    b.HasIndex("CourtId");

                    b.HasIndex("SentenceLawbaseId");

                    b.HasIndex("UserId");

                    b.ToTable("case_person_sentence_lawbase");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentencePunishment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonSentenceId")
                        .HasColumnName("case_person_sentence_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<bool>("IsSummaryPunishment")
                        .HasColumnName("is_summary_punishement_id");

                    b.Property<int?>("ProbationDays")
                        .HasColumnName("probation_days");

                    b.Property<int?>("ProbationMonths")
                        .HasColumnName("probation_months");

                    b.Property<DateTime?>("ProbationStartDate")
                        .HasColumnName("probation_start_date");

                    b.Property<int?>("ProbationWeeks")
                        .HasColumnName("probation_weeks");

                    b.Property<int?>("ProbationYears")
                        .HasColumnName("probation_years");

                    b.Property<int?>("SentenceRegimeTypeId")
                        .HasColumnName("sentence_regime_type_id");

                    b.Property<string>("SentenceText")
                        .HasColumnName("sentence_text");

                    b.Property<int?>("SentenceTypeId")
                        .HasColumnName("sentence_type_id");

                    b.Property<int>("SentenseDays")
                        .HasColumnName("sentence_days");

                    b.Property<decimal>("SentenseMoney")
                        .HasColumnName("sentence_money");

                    b.Property<int>("SentenseMonths")
                        .HasColumnName("sentence_months");

                    b.Property<int>("SentenseWeeks")
                        .HasColumnName("sentence_weeks");

                    b.Property<int>("SentenseYears")
                        .HasColumnName("sentence_years");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonSentenceId");

                    b.HasIndex("CourtId");

                    b.HasIndex("SentenceRegimeTypeId");

                    b.HasIndex("SentenceTypeId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_person_sentence_punishment");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentencePunishmentCrime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseCrimeId")
                        .HasColumnName("case_crime_id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonSentencePunishmentId")
                        .HasColumnName("case_person_sentence_punishment_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<int>("PersonRoleInCrimeId")
                        .HasColumnName("person_role_in_crime_id");

                    b.Property<int>("RecidiveTypeId")
                        .HasColumnName("recidive_type_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseCrimeId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonSentencePunishmentId");

                    b.HasIndex("CourtId");

                    b.HasIndex("PersonRoleInCrimeId");

                    b.HasIndex("RecidiveTypeId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_person_sentence_punishment_crime");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSelectionProtokol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseLawUnitDismisalId")
                        .HasColumnName("case_lawunit_dismisal_id");

                    b.Property<int?>("CompartmentID")
                        .HasColumnName("compartment_id");

                    b.Property<string>("CompartmentName")
                        .HasColumnName("compartment_name");

                    b.Property<int?>("CourtDepartmentId")
                        .HasColumnName("court_department_id");

                    b.Property<int?>("CourtDutyId")
                        .HasColumnName("court_duty_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IncludeCompartmentJudges")
                        .HasColumnName("include_compartment_judges");

                    b.Property<int>("JudgeRoleId")
                        .HasColumnName("judge_role_id");

                    b.Property<int?>("SelectedLawUnitId")
                        .HasColumnName("selected_lawunit_id");

                    b.Property<DateTime>("SelectionDate")
                        .HasColumnName("selection_date");

                    b.Property<int>("SelectionModeId")
                        .HasColumnName("selection_mode_id");

                    b.Property<int>("SelectionProtokolStateId")
                        .HasColumnName("selection_protokol_state_id");

                    b.Property<int?>("SpecialityId")
                        .HasColumnName("speciality_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseLawUnitDismisalId");

                    b.HasIndex("CourtDepartmentId");

                    b.HasIndex("CourtDutyId");

                    b.HasIndex("CourtId");

                    b.HasIndex("JudgeRoleId");

                    b.HasIndex("SelectedLawUnitId");

                    b.HasIndex("SelectionModeId");

                    b.HasIndex("SelectionProtokolStateId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UserId");

                    b.ToTable("case_selection_protokol");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSelectionProtokolCompartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSelectionProtokolId")
                        .HasColumnName("case_selection_protokol_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSelectionProtokolId");

                    b.HasIndex("CourtId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("UserId");

                    b.ToTable("case_selection_protokol_compartment");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSelectionProtokolLawUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseCount")
                        .HasColumnName("case_count");

                    b.Property<int?>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSelectionProtokolId")
                        .HasColumnName("case_selection_protokol_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<int>("LoadIndex")
                        .HasColumnName("load_index");

                    b.Property<bool>("SelectedFromCaseGroup")
                        .HasColumnName("selected_from_case_group");

                    b.Property<int>("StateId")
                        .HasColumnName("state_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSelectionProtokolId");

                    b.HasIndex("CourtId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("case_selection_protokol_lawunit");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSelectionProtokolLock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CourtDutyId")
                        .HasColumnName("court_duty_id");

                    b.Property<int?>("CourtGroupId")
                        .HasColumnName("court_group_id");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DateFinish")
                        .HasColumnName("date_finish");

                    b.HasKey("Id");

                    b.ToTable("case_selection_protokol_lock");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CourtHallId")
                        .HasColumnName("court_hall_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<int>("SessionStateId")
                        .HasColumnName("session_state_id");

                    b.Property<int>("SessionTypeId")
                        .HasColumnName("session_type_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtHallId");

                    b.HasIndex("CourtId");

                    b.HasIndex("SessionStateId");

                    b.HasIndex("SessionTypeId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("ActComplainIndexId")
                        .HasColumnName("act_complain_index_id");

                    b.Property<int?>("ActComplainResultId")
                        .HasColumnName("act_complain_result_id");

                    b.Property<string>("ActCreatorUserId")
                        .HasColumnName("act_creator_user_id");

                    b.Property<DateTime?>("ActDate")
                        .HasColumnName("act_date");

                    b.Property<DateTime?>("ActDeclaredDate")
                        .HasColumnName("act_declared_date");

                    b.Property<int?>("ActISPNDebtorStateId")
                        .HasColumnName("act_ispn_debtor_state_id");

                    b.Property<int?>("ActISPNReasonId")
                        .HasColumnName("act_ispn_reason_id");

                    b.Property<DateTime?>("ActInforcedDate")
                        .HasColumnName("act_inforced_date");

                    b.Property<int?>("ActKindId")
                        .HasColumnName("act_kind_id");

                    b.Property<DateTime?>("ActMotivesDeclaredDate")
                        .HasColumnName("act_motives_declared_date");

                    b.Property<int?>("ActResultId")
                        .HasColumnName("act_result_id");

                    b.Property<DateTime?>("ActReturnDate")
                        .HasColumnName("act_return_date");

                    b.Property<int>("ActStateId")
                        .HasColumnName("act_state_id");

                    b.Property<string>("ActTerm")
                        .HasColumnName("act_term");

                    b.Property<int>("ActTypeId")
                        .HasColumnName("act_type_id");

                    b.Property<bool?>("CanAppeal")
                        .HasColumnName("can_appeal");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<DateTime?>("DepersonalizeEndDate")
                        .HasColumnName("depersonalize_end_date");

                    b.Property<DateTime?>("DepersonalizeStartDate")
                        .HasColumnName("depersonalize_start_date");

                    b.Property<string>("DepersonalizeUserId")
                        .HasColumnName("depersonalize_user_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<string>("EcliCode")
                        .HasColumnName("ecli_code");

                    b.Property<bool>("IsFinalDoc")
                        .HasColumnName("is_final_doc");

                    b.Property<bool>("IsReadyForPublish")
                        .HasColumnName("is_ready_for_publish");

                    b.Property<string>("MotiveCreatorUserId")
                        .HasColumnName("motive_creator_user_id");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<int?>("RelatedActId")
                        .HasColumnName("related_act_id");

                    b.Property<string>("SecretaryUserId")
                        .HasColumnName("secretary_user_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ActComplainIndexId");

                    b.HasIndex("ActComplainResultId");

                    b.HasIndex("ActCreatorUserId");

                    b.HasIndex("ActISPNDebtorStateId");

                    b.HasIndex("ActISPNReasonId");

                    b.HasIndex("ActKindId");

                    b.HasIndex("ActResultId");

                    b.HasIndex("ActStateId");

                    b.HasIndex("ActTypeId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DepersonalizeUserId");

                    b.HasIndex("MotiveCreatorUserId");

                    b.HasIndex("RelatedActId");

                    b.HasIndex("SecretaryUserId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_act");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Authorization")
                        .HasColumnName("authorization");

                    b.Property<int>("Batch")
                        .HasColumnName("batch");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int>("Chapter")
                        .HasColumnName("chapter");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int>("Level")
                        .HasColumnName("level");

                    b.Property<int>("PageNumber")
                        .HasColumnName("page_number");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnName("register_date");

                    b.Property<int>("RegisterNumber")
                        .HasColumnName("register_number");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_act_company");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActComplain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<long>("ComplainDocumentId")
                        .HasColumnName("complain_document_id");

                    b.Property<int>("ComplainStateId")
                        .HasColumnName("complaint_state_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<string>("RejectDescription")
                        .HasColumnName("reject_description");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("ComplainDocumentId");

                    b.HasIndex("ComplainStateId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_act_complain");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActComplainPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("complain_case_person_id");

                    b.Property<int>("CaseSessionActComplainId")
                        .HasColumnName("case_session_act_complain_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CaseSessionActComplainId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_act_complain_person");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActComplainResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("ActResultId")
                        .HasColumnName("act_result_id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSessionActComplainId")
                        .HasColumnName("case_session_act_complain_id");

                    b.Property<int>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("ComplainCaseId")
                        .HasColumnName("complain_case_id");

                    b.Property<int?>("ComplainCourtId")
                        .HasColumnName("complain_court_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateResult")
                        .HasColumnName("date_result");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ActResultId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionActComplainId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("ComplainCaseId");

                    b.HasIndex("ComplainCourtId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_act_complain_result");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActCoordination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ActCoordinationTypeId")
                        .HasColumnName("act_coordination_type_id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseLawUnitId")
                        .HasColumnName("case_lawunit_id");

                    b.Property<int>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<string>("Content")
                        .HasColumnName("content");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ActCoordinationTypeId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseLawUnitId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_act_coordination");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActDivorce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDayMan")
                        .HasColumnName("birth_day_man");

                    b.Property<DateTime>("BirthDayWoman")
                        .HasColumnName("birth_day_woman");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonManId")
                        .HasColumnName("case_person_man_id");

                    b.Property<int>("CasePersonWomanId")
                        .HasColumnName("case_person_woman_id");

                    b.Property<int>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int>("ChildrenOver18")
                        .HasColumnName("children_over_18");

                    b.Property<int>("ChildrenUnder18")
                        .HasColumnName("children_under_18");

                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code");

                    b.Property<DateTime?>("CountryCodeDate")
                        .HasColumnName("country_code_date");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int>("DivorceCountMan")
                        .HasColumnName("divorce_count_man");

                    b.Property<int>("DivorceCountWoman")
                        .HasColumnName("divorce_count_woman");

                    b.Property<string>("EducationMan")
                        .HasColumnName("education_man");

                    b.Property<string>("EducationWoman")
                        .HasColumnName("education_woman");

                    b.Property<int>("MarriageCountMan")
                        .HasColumnName("marriage_count_man");

                    b.Property<int>("MarriageCountWoman")
                        .HasColumnName("marriage_count_woman");

                    b.Property<DateTime>("MarriageDate")
                        .HasColumnName("marriage_date");

                    b.Property<string>("MarriageFault")
                        .HasColumnName("marriage_fault");

                    b.Property<string>("MarriageFaultDescription")
                        .HasColumnName("marriage_fault_description");

                    b.Property<string>("MarriageNumber")
                        .HasColumnName("marriage_number");

                    b.Property<string>("MarriagePlace")
                        .HasColumnName("marriage_place");

                    b.Property<string>("MarriedStatusBeforeMan")
                        .HasColumnName("married_status_before_man");

                    b.Property<string>("MarriedStatusBeforeWoman")
                        .HasColumnName("married_status_before_woman");

                    b.Property<string>("NameAfterMarriageMan")
                        .HasColumnName("name_after_marriage_man");

                    b.Property<string>("NameAfterMarriageWoman")
                        .HasColumnName("name_after_marriage_woman");

                    b.Property<string>("NationalityMan")
                        .HasColumnName("nationality_man");

                    b.Property<string>("NationalityWoman")
                        .HasColumnName("nationality_woman");

                    b.Property<long?>("OutDocumentId")
                        .HasColumnName("out_document_id");

                    b.Property<DateTime>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonManId");

                    b.HasIndex("CasePersonWomanId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CourtId");

                    b.HasIndex("OutDocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_act_divorce");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActH", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id");

                    b.Property<int?>("ActComplainIndexId")
                        .HasColumnName("act_complain_index_id");

                    b.Property<int?>("ActComplainResultId")
                        .HasColumnName("act_complain_result_id");

                    b.Property<string>("ActCreatorUserId")
                        .HasColumnName("act_creator_user_id");

                    b.Property<DateTime?>("ActDate")
                        .HasColumnName("act_date");

                    b.Property<DateTime?>("ActDeclaredDate")
                        .HasColumnName("act_declared_date");

                    b.Property<int?>("ActISPNDebtorStateId")
                        .HasColumnName("act_ispn_debtor_state_id");

                    b.Property<int?>("ActISPNReasonId")
                        .HasColumnName("act_ispn_reason_id");

                    b.Property<DateTime?>("ActInforcedDate")
                        .HasColumnName("act_inforced_date");

                    b.Property<int?>("ActKindId")
                        .HasColumnName("act_kind_id");

                    b.Property<DateTime?>("ActMotivesDeclaredDate")
                        .HasColumnName("act_motives_declared_date");

                    b.Property<int?>("ActResultId")
                        .HasColumnName("act_result_id");

                    b.Property<DateTime?>("ActReturnDate")
                        .HasColumnName("act_return_date");

                    b.Property<int>("ActStateId")
                        .HasColumnName("act_state_id");

                    b.Property<string>("ActTerm")
                        .HasColumnName("act_term");

                    b.Property<int>("ActTypeId")
                        .HasColumnName("act_type_id");

                    b.Property<bool?>("CanAppeal")
                        .HasColumnName("can_appeal");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<DateTime?>("DepersonalizeEndDate")
                        .HasColumnName("depersonalize_end_date");

                    b.Property<DateTime?>("DepersonalizeStartDate")
                        .HasColumnName("depersonalize_start_date");

                    b.Property<string>("DepersonalizeUserId")
                        .HasColumnName("depersonalize_user_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("EcliCode")
                        .HasColumnName("ecli_code");

                    b.Property<DateTime?>("HistoryDateExpire")
                        .HasColumnName("history_date_expire");

                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<bool>("IsFinalDoc")
                        .HasColumnName("is_final_doc");

                    b.Property<bool>("IsReadyForPublish")
                        .HasColumnName("is_ready_for_publish");

                    b.Property<string>("MotiveCreatorUserId")
                        .HasColumnName("motive_creator_user_id");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<int?>("RelatedActId")
                        .HasColumnName("related_act_id");

                    b.Property<string>("SecretaryUserId")
                        .HasColumnName("secretary_user_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("HistoryId");

                    b.HasIndex("Id");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_act_h");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActLawBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<int>("LawBaseId")
                        .HasColumnName("law_base_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CourtId");

                    b.HasIndex("LawBaseId");

                    b.ToTable("case_session_act_law_base");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<long>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<int>("SessionDocStateId")
                        .HasColumnName("session_doc_state_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("SessionDocStateId");

                    b.HasIndex("UserExpiredId");

                    b.ToTable("case_session_doc");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionFastDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int?>("CaseSessionFastDocumentInitId")
                        .HasColumnName("case_session_fast_document_init_id");

                    b.Property<int>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<int>("SessionDocStateId")
                        .HasColumnName("session_doc_state_id");

                    b.Property<int>("SessionDocTypeId")
                        .HasColumnName("session_doc_type_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CaseSessionFastDocumentInitId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("CourtId");

                    b.HasIndex("SessionDocStateId");

                    b.HasIndex("SessionDocTypeId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_fast_document");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionFastDocumentH", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int?>("CaseSessionFastDocumentInitId")
                        .HasColumnName("case_session_fast_document_init_id");

                    b.Property<int>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<DateTime?>("HistoryDateExpire")
                        .HasColumnName("history_date_expire");

                    b.Property<int>("HistoryId")
                        .HasColumnName("history_id");

                    b.Property<int>("SessionDocStateId")
                        .HasColumnName("session_doc_state_id");

                    b.Property<int>("SessionDocTypeId")
                        .HasColumnName("session_doc_type_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_fast_document_h");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionH", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CourtHallId")
                        .HasColumnName("court_hall_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<DateTime?>("HistoryDateExpire")
                        .HasColumnName("history_date_expire");

                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<int>("SessionStateId")
                        .HasColumnName("session_state_id");

                    b.Property<int>("SessionTypeId")
                        .HasColumnName("session_type_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("HistoryId");

                    b.HasIndex("Id");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_h");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CourtHallId")
                        .HasColumnName("court_hall_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsAutoCreate")
                        .HasColumnName("is_auto_create");

                    b.Property<int>("SessionMeetingTypeId")
                        .HasColumnName("session_meeting_type_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("CourtHallId");

                    b.HasIndex("CourtId");

                    b.HasIndex("SessionMeetingTypeId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_meeting");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionMeetingUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSessionMeetingId")
                        .HasColumnName("case_session_meeting_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("SecretaryUserId")
                        .HasColumnName("secretary_user_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionMeetingId");

                    b.HasIndex("CourtId");

                    b.HasIndex("SecretaryUserId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_meeting_user");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionNotificationList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseLawUnitId")
                        .HasColumnName("case_lawunit_id");

                    b.Property<int?>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<long?>("NotificationAddressId")
                        .HasColumnName("notification_address_id");

                    b.Property<int?>("NotificationListTypeId")
                        .HasColumnName("notification_list_type_id");

                    b.Property<int>("NotificationPersonType")
                        .HasColumnName("notification_person_type");

                    b.Property<int>("RowNumber")
                        .HasColumnName("row_number");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseLawUnitId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("CourtId");

                    b.HasIndex("NotificationAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("case_session_notification_list");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsMain")
                        .HasColumnName("is_main");

                    b.Property<int?>("SessionResultBaseId")
                        .HasColumnName("session_result_base_id");

                    b.Property<int>("SessionResultId")
                        .HasColumnName("session_result_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("CourtId");

                    b.HasIndex("SessionResultBaseId");

                    b.HasIndex("SessionResultId");

                    b.HasIndex("UserExpiredId");

                    b.ToTable("case_session_result");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AddressTypeId")
                        .HasColumnName("address_type_id");

                    b.Property<string>("Appartment")
                        .HasColumnName("appartment");

                    b.Property<int?>("Block")
                        .HasColumnName("block");

                    b.Property<string>("CityCode")
                        .HasColumnName("city_code");

                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DistrictCode")
                        .HasColumnName("district_code");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<string>("Entrance")
                        .HasColumnName("entrance");

                    b.Property<string>("Fax")
                        .HasColumnName("fax");

                    b.Property<string>("Floor")
                        .HasColumnName("floor");

                    b.Property<string>("ForeignAddress")
                        .HasColumnName("foreign_address");

                    b.Property<string>("FullAddress")
                        .HasColumnName("full_address");

                    b.Property<string>("MunicipalityCode")
                        .HasColumnName("municipality_code");

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.Property<string>("RegionCode")
                        .HasColumnName("region_code");

                    b.Property<string>("ResidentionAreaCode")
                        .HasColumnName("residential_area_code");

                    b.Property<string>("StreetCode")
                        .HasColumnName("street_code");

                    b.Property<int?>("StreetNumber")
                        .HasColumnName("street_number");

                    b.Property<string>("SubBlock")
                        .HasColumnName("sub_block");

                    b.Property<string>("SubNumber")
                        .HasColumnName("sub_number");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("common_address");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BIC")
                        .HasColumnName("bic");

                    b.Property<string>("BankName")
                        .HasColumnName("bank_name");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("IBAN")
                        .HasColumnName("iban");

                    b.Property<bool>("IsMainAccount")
                        .HasColumnName("is_main_account");

                    b.Property<long>("SourceId")
                        .HasColumnName("source_id");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("common_bank_account");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.Counter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CounterTypeId")
                        .HasColumnName("counter_type");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<int>("DigitCount")
                        .HasColumnName("digit_count");

                    b.Property<int>("InitValue")
                        .HasColumnName("init_value");

                    b.Property<string>("Label")
                        .HasColumnName("label");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnName("last_used");

                    b.Property<string>("Prefix")
                        .HasColumnName("preffix");

                    b.Property<int>("ResetTypeId")
                        .HasColumnName("reset_type");

                    b.Property<string>("Suffix")
                        .HasColumnName("suffix");

                    b.Property<int>("Value")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("CounterTypeId");

                    b.HasIndex("CourtId");

                    b.HasIndex("ResetTypeId");

                    b.ToTable("common_counter");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CounterCase", b =>
                {
                    b.Property<int>("CounterId")
                        .HasColumnName("counter_id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.HasKey("CounterId", "CaseGroupId");

                    b.HasIndex("CaseGroupId");

                    b.ToTable("common_counter_cases");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CounterDocument", b =>
                {
                    b.Property<int>("CounterId")
                        .HasColumnName("counter_id");

                    b.Property<int>("DocumentDirectionId")
                        .HasColumnName("document_direction_id");

                    b.HasKey("CounterId", "DocumentDirectionId");

                    b.HasIndex("DocumentDirectionId");

                    b.ToTable("common_counter_document");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CounterSessionAct", b =>
                {
                    b.Property<int>("CounterId")
                        .HasColumnName("counter_id");

                    b.Property<int>("SessionActGroupId")
                        .HasColumnName("session_act_group_id");

                    b.HasKey("CounterId", "SessionActGroupId");

                    b.HasIndex("SessionActGroupId");

                    b.ToTable("common_counter_session_act");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnName("address");

                    b.Property<long?>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<string>("CityCode")
                        .HasColumnName("city_code");

                    b.Property<string>("CityName")
                        .HasColumnName("city_name");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<string>("CourtLogo")
                        .HasColumnName("court_logo");

                    b.Property<int?>("CourtRegionId")
                        .HasColumnName("court_region_id");

                    b.Property<int>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("EISPPCode")
                        .HasColumnName("eispp_code");

                    b.Property<string>("EcliCode")
                        .HasColumnName("ecli_code");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<int?>("ParentCourtId")
                        .HasColumnName("parent_court_id");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CourtRegionId");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("ParentCourtId");

                    b.ToTable("common_court");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtArchiveCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("common_court_archive_committee");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtArchiveCommitteeLawUnit", b =>
                {
                    b.Property<int>("CourtArchiveCommitteeId")
                        .HasColumnName("court_archive_committee_id");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("law_unit_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.HasKey("CourtArchiveCommitteeId", "LawUnitId");

                    b.HasIndex("LawUnitId");

                    b.ToTable("common_court_archive_committee_lawunit");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtArchiveIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<int?>("CourtArchiveCommitteeId")
                        .HasColumnName("court_archive_committee_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<int>("StorageYears")
                        .HasColumnName("storage_years");

                    b.HasKey("Id");

                    b.HasIndex("CourtArchiveCommitteeId");

                    b.HasIndex("CourtId");

                    b.ToTable("common_court_archive_index");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtArchiveIndexCode", b =>
                {
                    b.Property<int>("CourtArchiveIndexId")
                        .HasColumnName("court_archive_index_id");

                    b.Property<int>("CaseCodeId")
                        .HasColumnName("case_code_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.HasKey("CourtArchiveIndexId", "CaseCodeId");

                    b.HasIndex("CaseCodeId");

                    b.ToTable("common_court_archive_index_codes");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtBankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<string>("ComPortPos")
                        .HasColumnName("com_port_pos");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnName("iban");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("MoneyGroupId")
                        .HasColumnName("money_group_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("MoneyGroupId");

                    b.ToTable("common_court_bank_account");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<int?>("CaseInstanceId")
                        .HasColumnName("case_instance_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<int>("DepartmentTypeId")
                        .HasColumnName("department_type_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int?>("MasterId")
                        .HasColumnName("master_id");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("CaseInstanceId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DepartmentTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("common_court_department");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtDepartmentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtDepartmentId")
                        .HasColumnName("compartment_id");

                    b.Property<int>("CourtGroupId")
                        .HasColumnName("court_group_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.HasKey("Id");

                    b.HasIndex("CourtDepartmentId");

                    b.HasIndex("CourtGroupId");

                    b.ToTable("common_court_department_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtDepartmentLawUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtDepartmentId")
                        .HasColumnName("department_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<int?>("JudgeDepartmentRoleId")
                        .HasColumnName("judge_department_role_id");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtDepartmentId");

                    b.HasIndex("JudgeDepartmentRoleId");

                    b.HasIndex("LawUnitId");

                    b.ToTable("common_court_department_lawunit");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtDuty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActDate")
                        .HasColumnName("act_date");

                    b.Property<string>("ActNomer")
                        .HasColumnName("act_number");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("common_court_duty");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtDutyLawUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtDutyId")
                        .HasColumnName("court_duty_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtDutyId");

                    b.HasIndex("LawUnitId");

                    b.ToTable("common_court_duty_lawunit");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("CourtId");

                    b.ToTable("common_court_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtGroupCode", b =>
                {
                    b.Property<int>("CourtGroupId")
                        .HasColumnName("court_group_id");

                    b.Property<int>("CaseCodeId")
                        .HasColumnName("case_code_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.HasKey("CourtGroupId", "CaseCodeId");

                    b.HasIndex("CaseCodeId");

                    b.ToTable("common_court_group_code");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtHall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Location")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("common_court_hall");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtJuryFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<decimal>("HourFee")
                        .HasColumnName("hour_fee");

                    b.Property<decimal>("MinDayFee")
                        .HasColumnName("min_date_fee");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("common_jury_fee");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLawUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<int?>("CourtOrganizationId")
                        .HasColumnName("court_organization_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<int?>("LawUnitPositionId")
                        .HasColumnName("lawunit_position_id");

                    b.Property<int?>("LawUnitTypeId")
                        .HasColumnName("law_unit_type_id");

                    b.Property<int>("PeriodTypeId")
                        .HasColumnName("period_type_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("CourtOrganizationId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("LawUnitPositionId");

                    b.HasIndex("LawUnitTypeId");

                    b.HasIndex("PeriodTypeId");

                    b.ToTable("common_court_lawunit");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLawUnitActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnName("activity_date");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("JudgeLoadActivityId")
                        .HasColumnName("judge_load_activity_id");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<decimal>("LoadIndex")
                        .HasColumnName("load_index");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("JudgeLoadActivityId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("UserId");

                    b.ToTable("common_court_lawunit_activity");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLawUnitGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtGroupId")
                        .HasColumnName("court_group_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<int>("LoadIndex")
                        .HasColumnName("load_index");

                    b.HasKey("Id");

                    b.HasIndex("CourtGroupId");

                    b.HasIndex("CourtId");

                    b.HasIndex("LawUnitId");

                    b.ToTable("common_court_lawunit_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLawUnitOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("LawUnitId");

                    b.ToTable("common_court_lawunit_order");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLawUnitSubstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<int>("SubstituteLawUnitId")
                        .HasColumnName("substitute_lawunit_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("SubstituteLawUnitId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("common_court_lawunit_substitution");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLoadPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CourtDutyId")
                        .HasColumnName("court_duty_id");

                    b.Property<int?>("CourtGroupId")
                        .HasColumnName("court_group_id");

                    b.Property<int>("CourtLoadResetPeriodId")
                        .HasColumnName("court_load_reset_period_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.HasKey("Id");

                    b.HasIndex("CourtDutyId");

                    b.HasIndex("CourtGroupId");

                    b.HasIndex("CourtLoadResetPeriodId");

                    b.ToTable("common_court_load_period");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLoadPeriodLawUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<decimal>("AverageCases")
                        .HasColumnName("average_cases");

                    b.Property<int>("CourtLoadPeriodId")
                        .HasColumnName("court_load_period_id");

                    b.Property<decimal>("DayCases")
                        .HasColumnName("day_cases");

                    b.Property<bool>("IsAvailable")
                        .HasColumnName("is_available");

                    b.Property<int?>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<decimal>("LoadIndex")
                        .HasColumnName("load_index");

                    b.Property<DateTime>("SelectionDate")
                        .HasColumnName("selection_date");

                    b.Property<decimal>("TotalDayCases")
                        .HasColumnName("total_day_cases");

                    b.HasKey("Id");

                    b.HasIndex("CourtLoadPeriodId");

                    b.HasIndex("LawUnitId");

                    b.ToTable("common_court_load_period_lawunit");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLoadResetPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("UserId");

                    b.ToTable("common_court_load_reset_period");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool?>("IsDocumentRegistry")
                        .HasColumnName("is_document_registry");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrganizationLevelId")
                        .HasColumnName("organization_level_id");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("OrganizationLevelId");

                    b.HasIndex("ParentId");

                    b.ToTable("common_court_organization");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtOrganizationCaseGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<int>("CourtOrganizationId")
                        .HasColumnName("court_organization_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("CourtOrganizationId");

                    b.ToTable("common_court_organization_case_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtPosDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BIC")
                        .HasColumnName("bic");

                    b.Property<string>("BankName")
                        .HasColumnName("bank_name");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<int>("CourtBankAccountId")
                        .HasColumnName("court_bank_account_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<string>("Tid")
                        .IsRequired()
                        .HasColumnName("tid");

                    b.HasKey("Id");

                    b.HasIndex("CourtBankAccountId");

                    b.HasIndex("CourtId");

                    b.ToTable("common_court_pos_device");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .HasColumnName("label");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("common_court_region");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtRegionArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtRegionId")
                        .HasColumnName("court_region_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DistrictCode")
                        .HasColumnName("district_code");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("MunicipalityCode")
                        .HasColumnName("municipality_code");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtRegionId");

                    b.HasIndex("UserId");

                    b.ToTable("common_court_region_area");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.EMailFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<int>("EMailMessageId")
                        .HasColumnName("email_message_id");

                    b.Property<int>("MongoFileId")
                        .HasColumnName("mongo_file_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("EMailMessageId");

                    b.HasIndex("MongoFileId");

                    b.ToTable("common_email_file");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.EMailMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .HasColumnName("body");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateSend")
                        .HasColumnName("date_send");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int>("EMailMessageStateId")
                        .HasColumnName("email_message_state_id");

                    b.Property<string>("EmailAddress")
                        .HasColumnName("email_address");

                    b.Property<long>("SourceId")
                        .HasColumnName("source_id");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("EMailMessageStateId");

                    b.HasIndex("UserId");

                    b.ToTable("common_email_message");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.EpepUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnName("address");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnName("birth_date");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<long?>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email");

                    b.Property<Guid?>("EpepId")
                        .HasColumnName("epep_id");

                    b.Property<int>("EpepUserTypeId")
                        .HasColumnName("epep_user_type_id");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<int?>("LawyerLawUnitId")
                        .HasColumnName("lawyer_lawunit_id");

                    b.Property<string>("LawyerNumber")
                        .HasColumnName("lawyer_number");

                    b.Property<string>("Uic")
                        .HasColumnName("uic");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("EpepUserTypeId");

                    b.HasIndex("LawyerLawUnitId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("epep_user");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.EpepUserAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<Guid?>("EpepId")
                        .HasColumnName("epep_id");

                    b.Property<int>("EpepUserId")
                        .HasColumnName("epep_user_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CourtId");

                    b.HasIndex("EpepUserId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("epep_user_assignment");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.ExcelReportCaseFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseCodeId")
                        .HasColumnName("case_code_id");

                    b.Property<int>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.Property<int>("ExcelReportTemplateId")
                        .HasColumnName("excel_report_template_id");

                    b.Property<int>("RowIndex")
                        .HasColumnName("row_index");

                    b.Property<int>("SheetIndex")
                        .HasColumnName("sheet_index");

                    b.HasKey("Id");

                    b.HasIndex("CaseCodeId");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("ExcelReportTemplateId");

                    b.ToTable("common_excel_report_case_filter");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.ExcelReportData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CellValue")
                        .HasColumnName("cell_value");

                    b.Property<int>("ColIndex")
                        .HasColumnName("col_index");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int>("ExcelReportTemplateId")
                        .HasColumnName("excel_report_template_id");

                    b.Property<int>("ReportMonth")
                        .HasColumnName("report_month");

                    b.Property<int>("ReportYear")
                        .HasColumnName("report_year");

                    b.Property<string>("RowData")
                        .HasColumnName("row_data");

                    b.Property<int>("RowDataColIndex")
                        .HasColumnName("row_data_col_index");

                    b.Property<int>("RowIndex")
                        .HasColumnName("row_index");

                    b.Property<int>("SheetIndex")
                        .HasColumnName("sheet_index");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("ExcelReportTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("common_excel_report_data");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.ExcelReportTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("ReportTypeId")
                        .HasColumnName("report_type_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtTypeId");

                    b.ToTable("common_excel_report_template");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.HtmlTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnName("alias");

                    b.Property<byte[]>("Content")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnName("date_uploaded");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DocumentTypeAlias")
                        .HasColumnName("document_type_alias");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name");

                    b.Property<int?>("FrameTemplateId")
                        .HasColumnName("frame_template_id");

                    b.Property<bool?>("HaveExpertReport")
                        .HasColumnName("have_expert_report");

                    b.Property<bool?>("HaveSessionAct")
                        .HasColumnName("have_session_act");

                    b.Property<bool?>("HaveSessionActComplain")
                        .HasColumnName("have_session_act_complain");

                    b.Property<int>("HtmlTemplateTypeId")
                        .HasColumnName("html_template_type_id");

                    b.Property<bool?>("IsCreate")
                        .HasColumnName("is_create");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<decimal?>("LineHeight")
                        .HasColumnName("line_height");

                    b.Property<bool?>("SmartShrinkingPDF")
                        .HasColumnName("smart_shrinking_pdf");

                    b.Property<int?>("StyleTemplateId")
                        .HasColumnName("style_template_id");

                    b.Property<int?>("XlsDataRow")
                        .HasColumnName("xls_data_row");

                    b.Property<int?>("XlsRecapRow")
                        .HasColumnName("xls_recap_row");

                    b.Property<int?>("XlsTitleRow")
                        .HasColumnName("xls_title_row");

                    b.HasKey("Id");

                    b.HasIndex("HtmlTemplateTypeId");

                    b.ToTable("common_html_template");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.HtmlTemplateLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<int?>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.Property<int>("HtmlTemplateId")
                        .HasColumnName("html_template_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int?>("SourceType")
                        .HasColumnName("source_type");

                    b.HasKey("Id");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("HtmlTemplateId");

                    b.ToTable("common_html_template_link");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.HtmlTemplateParamLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("HtmlTemplateId")
                        .HasColumnName("html_template_id");

                    b.Property<int>("HtmlTemplateParamId")
                        .HasColumnName("html_template_param_id");

                    b.HasKey("Id");

                    b.HasIndex("HtmlTemplateId");

                    b.HasIndex("HtmlTemplateParamId");

                    b.ToTable("common_html_template_param_link");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.ID_List", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Remark")
                        .HasColumnName("remark");

                    b.HasKey("Id");

                    b.ToTable("id_list");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<int?>("CourtRegionId")
                        .HasColumnName("court_region_id");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name");

                    b.Property<string>("EISPPCode")
                        .HasColumnName("eispp_code");

                    b.Property<string>("Family2Name")
                        .HasColumnName("family_2_name");

                    b.Property<string>("FamilyName")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<int>("InstitutionTypeId")
                        .HasColumnName("institution_type_id");

                    b.Property<string>("LatinName")
                        .HasColumnName("latin_name");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name");

                    b.Property<int?>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<string>("Person_SourceCode")
                        .HasColumnName("person_source_code");

                    b.Property<long?>("Person_SourceId")
                        .HasColumnName("person_source_id");

                    b.Property<int?>("Person_SourceType")
                        .HasColumnName("person_source_type");

                    b.Property<string>("Uic")
                        .HasColumnName("uic");

                    b.Property<int>("UicTypeId")
                        .HasColumnName("uic_type_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtRegionId");

                    b.HasIndex("InstitutionTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UicTypeId");

                    b.ToTable("common_institution");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.InstitutionAddress", b =>
                {
                    b.Property<int>("InstitutionId")
                        .HasColumnName("institution_id");

                    b.Property<long>("AddressId")
                        .HasColumnName("address_id");

                    b.HasKey("InstitutionId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("common_institution_address");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.IntegrationKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int>("IntegrationTypeId")
                        .HasColumnName("integration_type_id");

                    b.Property<string>("OuterCode")
                        .HasColumnName("outer_code");

                    b.Property<long>("SourceId")
                        .HasColumnName("source_id");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("IntegrationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("common_integration_keys");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Department")
                        .HasColumnName("department");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name");

                    b.Property<string>("Family2Name")
                        .HasColumnName("family_2_name");

                    b.Property<string>("FamilyName")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<int?>("JudgeSeniorityId")
                        .HasColumnName("judge_seniority_id");

                    b.Property<string>("LatinName")
                        .HasColumnName("latin_name");

                    b.Property<int>("LawUnitTypeId")
                        .HasColumnName("law_unit_type_id");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name");

                    b.Property<int?>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<string>("Person_SourceCode")
                        .HasColumnName("person_source_code");

                    b.Property<long?>("Person_SourceId")
                        .HasColumnName("person_source_id");

                    b.Property<int?>("Person_SourceType")
                        .HasColumnName("person_source_type");

                    b.Property<string>("Uic")
                        .HasColumnName("uic");

                    b.Property<int>("UicTypeId")
                        .HasColumnName("uic_type_id");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("JudgeSeniorityId");

                    b.HasIndex("LawUnitTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UicTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("common_law_unit");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.LawUnitAddress", b =>
                {
                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<long>("AddressId")
                        .HasColumnName("address_id");

                    b.HasKey("LawUnitId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("common_lawunit_address");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.LawUnitH", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("history_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt");

                    b.Property<string>("Department")
                        .HasColumnName("department");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name");

                    b.Property<string>("Family2Name")
                        .HasColumnName("family_2_name");

                    b.Property<string>("FamilyName")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<DateTime?>("HistoryDateExpire")
                        .HasColumnName("history_date_expire");

                    b.Property<int>("Id")
                        .HasColumnName("id");

                    b.Property<int?>("JudgeSeniorityId")
                        .HasColumnName("judge_seniority_id");

                    b.Property<string>("LatinName")
                        .HasColumnName("latin_name");

                    b.Property<int>("LawUnitTypeId")
                        .HasColumnName("law_unit_type_id");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name");

                    b.Property<int?>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<string>("Person_SourceCode")
                        .HasColumnName("person_source_code");

                    b.Property<long?>("Person_SourceId")
                        .HasColumnName("person_source_id");

                    b.Property<int?>("Person_SourceType")
                        .HasColumnName("person_source_type");

                    b.Property<string>("Uic")
                        .HasColumnName("uic");

                    b.Property<int>("UicTypeId")
                        .HasColumnName("uic_type_id");

                    b.Property<string>("UserId");

                    b.HasKey("HistoryId");

                    b.HasIndex("Id");

                    b.HasIndex("JudgeSeniorityId");

                    b.HasIndex("LawUnitTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UicTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("common_law_unit_h");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.LawUnitSpeciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<int>("SpecialityId")
                        .HasColumnName("speciality_id");

                    b.HasKey("Id");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("common_lawunit_speciality");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.MQEpep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<byte[]>("Content")
                        .HasColumnName("content");

                    b.Property<DateTime?>("DateTransfered")
                        .HasColumnName("date_transfered");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int?>("ErrorCount")
                        .HasColumnName("error_count");

                    b.Property<string>("ErrorDescription")
                        .HasColumnName("error_description");

                    b.Property<int?>("IntegrationStateId")
                        .HasColumnName("integration_state_id");

                    b.Property<int?>("IntegrationTypeId")
                        .HasColumnName("integration_type_id");

                    b.Property<string>("MQId")
                        .HasColumnName("mq_id");

                    b.Property<string>("MethodName")
                        .HasColumnName("method_name");

                    b.Property<long?>("ParentSourceId")
                        .HasColumnName("parent_source_id");

                    b.Property<string>("ReturnGuidId")
                        .HasColumnName("return_guid_id");

                    b.Property<long>("SourceId")
                        .HasColumnName("source_id");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type");

                    b.Property<string>("TargetClassName")
                        .HasColumnName("target_class_name");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("IntegrationStateId");

                    b.HasIndex("IntegrationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("common_mq_epep");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.MigrationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<string>("Data")
                        .HasColumnName("data");

                    b.Property<string>("DataType")
                        .HasColumnName("data_type");

                    b.Property<string>("Message")
                        .HasColumnName("message");

                    b.Property<DateTime?>("MigrationDate")
                        .HasColumnName("migration_date");

                    b.Property<string>("ParentCode")
                        .HasColumnName("parent_code");

                    b.HasKey("Id");

                    b.ToTable("common_migration_data");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.MongoFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnName("date_uploaded");

                    b.Property<string>("FileId")
                        .HasColumnName("file_id");

                    b.Property<string>("FileName")
                        .HasColumnName("file_name");

                    b.Property<int>("FileSize")
                        .HasColumnName("file_size");

                    b.Property<int?>("SignersCount")
                        .HasColumnName("signers_count");

                    b.Property<int?>("SignituresCount")
                        .HasColumnName("signitures_count");

                    b.Property<string>("SourceId")
                        .HasColumnName("source_id");

                    b.Property<long>("SourceIdNumber")
                        .HasColumnName("source_id_number");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.Property<string>("UserUploaded")
                        .HasColumnName("user_uploaded");

                    b.HasKey("Id");

                    b.ToTable("common_mongo_file");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime>("ActualtoDate")
                        .HasColumnName("actual_to_date");

                    b.Property<DateTime?>("ConfirmDate")
                        .HasColumnName("confirm_date");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name");

                    b.Property<string>("Family2Name")
                        .HasColumnName("family_2_name");

                    b.Property<string>("FamilyName")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<string>("LatinName")
                        .HasColumnName("latin_name");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<int>("PersonTypeId")
                        .HasColumnName("person_type_id");

                    b.Property<string>("Person_SourceCode")
                        .HasColumnName("person_source_code");

                    b.Property<long?>("Person_SourceId")
                        .HasColumnName("person_source_id");

                    b.Property<int?>("Person_SourceType")
                        .HasColumnName("person_source_type");

                    b.Property<string>("Uic")
                        .HasColumnName("uic");

                    b.Property<int>("UicTypeId")
                        .HasColumnName("uic_type_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("UicTypeId");

                    b.ToTable("common_person");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.PersonAddress", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<long>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<int>("AddressTypeId")
                        .HasColumnName("address_type_id");

                    b.HasKey("PersonId", "AddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.ToTable("common_person_address");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.PriceCol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<int?>("ColNo")
                        .HasColumnName("col_no");

                    b.Property<int>("ColType")
                        .HasColumnName("coltype");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int?>("OrderBy")
                        .HasColumnName("order_by");

                    b.Property<int>("PriceDescId")
                        .HasColumnName("pricedesc_id");

                    b.HasKey("Id");

                    b.HasIndex("PriceDescId");

                    b.ToTable("common_pricecol");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.PriceDesc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("datefrom");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("dateto");

                    b.Property<string>("Keyword")
                        .HasColumnName("keyword");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("common_pricedesc");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.PriceVal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("PriceColId")
                        .HasColumnName("pricecol_id");

                    b.Property<int>("PriceDescId")
                        .HasColumnName("pricedesc_id");

                    b.Property<int>("RowNo")
                        .HasColumnName("row_no");

                    b.Property<string>("Text")
                        .HasColumnName("text");

                    b.Property<decimal>("Value")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("PriceColId");

                    b.HasIndex("PriceDescId");

                    b.ToTable("common_priceval");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<string>("ReportName")
                        .HasColumnName("report_name");

                    b.Property<string>("ReportPath")
                        .HasColumnName("report_path");

                    b.HasKey("Id");

                    b.HasIndex("CourtTypeId");

                    b.ToTable("common_report");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.ReportRequest", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CourtList")
                        .HasColumnName("court_list");

                    b.Property<DateTime?>("DateGetReport")
                        .HasColumnName("date_get_report");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int>("ReportId")
                        .HasColumnName("report_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("ValidationGuid")
                        .HasColumnName("validation_guid");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("common_report_request");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.WorkNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseDeadlineId")
                        .HasColumnName("case_deadline_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnName("date_read");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<int>("FromCourtId")
                        .HasColumnName("from_court_id");

                    b.Property<string>("FromUserId")
                        .HasColumnName("fromuser_id");

                    b.Property<string>("LinkLabel")
                        .HasColumnName("link_label");

                    b.Property<long>("SourceId")
                        .HasColumnName("source_id");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("WorkNotificationTypeId")
                        .HasColumnName("work_notification_type_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseDeadlineId");

                    b.HasIndex("CourtId");

                    b.HasIndex("FromCourtId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkNotificationTypeId");

                    b.ToTable("common_work_notification");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.WorkTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<int?>("CourtOrganizationId")
                        .HasColumnName("court_organization_id");

                    b.Property<DateTime?>("DateAccepted")
                        .HasColumnName("date_accepted");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnName("date_completed");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionCreated")
                        .HasColumnName("description_created");

                    b.Property<string>("ParentDescription")
                        .HasColumnName("parent_description");

                    b.Property<long?>("ParentTaskId")
                        .HasColumnName("parent_task_id");

                    b.Property<string>("SourceDescription")
                        .HasColumnName("source_description");

                    b.Property<long>("SourceId")
                        .HasColumnName("source_id");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type");

                    b.Property<long?>("SubSourceId")
                        .HasColumnName("sub_source_id");

                    b.Property<int?>("TaskActionId")
                        .HasColumnName("task_action_id");

                    b.Property<int?>("TaskExecutionId")
                        .HasColumnName("task_execution_id");

                    b.Property<int>("TaskStateId")
                        .HasColumnName("task_state_id");

                    b.Property<int>("TaskTypeId")
                        .HasColumnName("task_type_id");

                    b.Property<string>("UserCreatedId")
                        .HasColumnName("user_created_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("CourtOrganizationId");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("TaskActionId");

                    b.HasIndex("TaskExecutionId");

                    b.HasIndex("TaskStateId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserId");

                    b.ToTable("common_worktask");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.WorkingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("Day")
                        .HasColumnName("day");

                    b.Property<int>("DayTypeId")
                        .HasColumnName("day_type_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("DayTypeId");

                    b.ToTable("common_working_day");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryAccount", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ApiAddress")
                        .HasColumnName("api_address");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("law_unit_id");

                    b.Property<string>("MobileToken")
                        .HasColumnName("mobile_token");

                    b.Property<string>("MobileUserId")
                        .HasColumnName("mobile_user_id");

                    b.Property<string>("PinHash")
                        .HasColumnName("pin_hash");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("delivery_account");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int?>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("delivery_area");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryAreaAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BlockName")
                        .HasColumnName("block_name");

                    b.Property<string>("CityCode")
                        .HasColumnName("city_code");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int>("DeliveryAreaId")
                        .HasColumnName("delivery_area_id");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int?>("NumberFrom")
                        .HasColumnName("number_from");

                    b.Property<int?>("NumberTo")
                        .HasColumnName("number_to");

                    b.Property<int?>("NumberType")
                        .HasColumnName("number_type");

                    b.Property<string>("ResidentionAreaCode")
                        .HasColumnName("residential_area_code");

                    b.Property<string>("StreetCode")
                        .HasColumnName("street_code");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAreaId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("delivery_area_address");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<int?>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<string>("CaseInfo")
                        .HasColumnName("case_info");

                    b.Property<int?>("CaseNotificationId")
                        .HasColumnName("case_notification_id");

                    b.Property<int?>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateAccepted")
                        .HasColumnName("date_accepted");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateSend")
                        .HasColumnName("date_send");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int?>("DeliveryAreaId")
                        .HasColumnName("delivery_area_id");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnName("delivery_date");

                    b.Property<string>("DeliveryInfo")
                        .HasColumnName("delivery_info");

                    b.Property<int?>("DeliveryReasonId")
                        .HasColumnName("delivery_reason_id");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<int>("FromCourtId")
                        .HasColumnName("from_court_id");

                    b.Property<int?>("HtmlTemplateId")
                        .HasColumnName("html_template_id");

                    b.Property<int?>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<int>("NotificationStateId")
                        .HasColumnName("notification_state_id");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnName("notification_type_id");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnName("person_name");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasColumnName("reg_number");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnName("return_date");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("CaseNotificationId");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DeliveryAreaId");

                    b.HasIndex("FromCourtId");

                    b.HasIndex("HtmlTemplateId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("NotificationStateId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("delivery_item");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryItemOper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime>("DateOper")
                        .HasColumnName("date_oper");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int?>("DeliveryAreaId")
                        .HasColumnName("delivery_area_id");

                    b.Property<string>("DeliveryInfo")
                        .HasColumnName("delivery_info");

                    b.Property<int>("DeliveryItemId")
                        .HasColumnName("delivery_item_id");

                    b.Property<int>("DeliveryOperId")
                        .HasColumnName("delivery_oper_id");

                    b.Property<int?>("DeliveryReasonId")
                        .HasColumnName("delivery_reason_id");

                    b.Property<string>("Lat")
                        .HasColumnName("lat");

                    b.Property<int?>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<string>("Long")
                        .HasColumnName("long");

                    b.Property<int>("NotificationStateId")
                        .HasColumnName("notification_state_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("DeliveryAreaId");

                    b.HasIndex("DeliveryItemId");

                    b.HasIndex("DeliveryOperId");

                    b.HasIndex("DeliveryReasonId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("NotificationStateId");

                    b.HasIndex("UserId");

                    b.ToTable("delivery_item_oper");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryItemVisitMobile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateAPI")
                        .HasColumnName("date_api");

                    b.Property<DateTime>("DateOper")
                        .HasColumnName("date_oper");

                    b.Property<string>("DeliveryInfo")
                        .HasColumnName("delivery_info");

                    b.Property<int>("DeliveryItemId")
                        .HasColumnName("delivery_item_id");

                    b.Property<int>("DeliveryOperId")
                        .HasColumnName("delivery_oper_id");

                    b.Property<int>("DeliveryReasonId")
                        .HasColumnName("delivery_reason_id");

                    b.Property<string>("DeliveryUUID")
                        .HasColumnName("delivery_uuid");

                    b.Property<string>("Error")
                        .HasColumnName("error");

                    b.Property<bool>("IsOK")
                        .HasColumnName("is_ok");

                    b.Property<string>("Lat")
                        .HasColumnName("lat");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<string>("Long")
                        .HasColumnName("long");

                    b.Property<int>("NotificationStateId")
                        .HasColumnName("notification_state_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.Property<int>("VisitCount")
                        .HasColumnName("visit_count");

                    b.HasKey("Id");

                    b.ToTable("delivery_item_visit_mobile");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryMobileFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<byte[]>("Content")
                        .HasColumnName("content");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<string>("DeliveryAccountId")
                        .HasColumnName("delivery_account_id");

                    b.Property<string>("ErrorMessage")
                        .HasColumnName("error_message");

                    b.Property<bool?>("IsChecked")
                        .HasColumnName("is_checked");

                    b.HasKey("Id");

                    b.ToTable("delivery_mobile_file");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActualDocumentDate")
                        .HasColumnName("actual_document_date");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<int?>("CourtOrganizationId")
                        .HasColumnName("court_organization_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int?>("DeliveryGroupId")
                        .HasColumnName("delivery_group_id");

                    b.Property<int?>("DeliveryTypeId")
                        .HasColumnName("delivery_type_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<DateTime>("DocumentDate")
                        .HasColumnName("document_date");

                    b.Property<int>("DocumentDirectionId")
                        .HasColumnName("document_direction_id");

                    b.Property<int>("DocumentGroupId")
                        .HasColumnName("document_group_id");

                    b.Property<string>("DocumentNumber")
                        .HasColumnName("document_number");

                    b.Property<int?>("DocumentNumberValue")
                        .HasColumnName("document_number_value");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnName("document_type_id");

                    b.Property<bool?>("IsOldNumber")
                        .HasColumnName("is_old_number");

                    b.Property<bool>("IsRestictedAccess")
                        .HasColumnName("is_resticted_access");

                    b.Property<bool?>("IsSecret")
                        .HasColumnName("is_secret");

                    b.Property<string>("MultiRegistationId")
                        .HasColumnName("multi_registration_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("CourtOrganizationId");

                    b.HasIndex("DeliveryGroupId");

                    b.HasIndex("DeliveryTypeId");

                    b.HasIndex("DocumentDirectionId");

                    b.HasIndex("DocumentGroupId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("document");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentCaseInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<string>("CaseRegNumber")
                        .HasColumnName("case_reg_number");

                    b.Property<string>("CaseShortNumber")
                        .HasColumnName("case_short_number");

                    b.Property<int?>("CaseYear")
                        .HasColumnName("case_year");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<long>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<bool?>("IsLegacyCase")
                        .HasColumnName("is_legacy_case");

                    b.Property<int?>("SessionActId")
                        .HasColumnName("session_act_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DocumentId");

                    b.ToTable("document_case_info");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentDecision", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int?>("DecisionTypeId")
                        .HasColumnName("decision_type_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("DocumentDecisionStateId")
                        .HasColumnName("document_decision_state_id");

                    b.Property<long>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<long?>("OutDocumentId")
                        .HasColumnName("out_document_id");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<string>("UserDecisionId")
                        .HasColumnName("user_decision_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("DecisionTypeId");

                    b.HasIndex("DocumentDecisionStateId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("OutDocumentId");

                    b.HasIndex("UserDecisionId");

                    b.HasIndex("UserId");

                    b.ToTable("document_decision");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentDecisionCase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("DecisionTypeId")
                        .HasColumnName("decision_type_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<long>("DocumentDecisionId")
                        .HasColumnName("document_decision_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("DecisionTypeId");

                    b.HasIndex("DocumentDecisionId");

                    b.ToTable("document_decision_case");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentInstitutionCaseInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CaseNumber")
                        .HasColumnName("case_number");

                    b.Property<int>("CaseYear")
                        .HasColumnName("case_year");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<long>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<int?>("InstitutionCaseTypeId")
                        .HasColumnName("institution_case_type_id");

                    b.Property<int>("InstitutionId")
                        .HasColumnName("institution_id");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("InstitutionCaseTypeId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("document_institution_case_info");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("DocumentDirectionId")
                        .HasColumnName("document_direction_id");

                    b.Property<long>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<DateTime?>("PrevDocumentDate")
                        .HasColumnName("prev_document_date");

                    b.Property<long?>("PrevDocumentId")
                        .HasColumnName("prev_document_id");

                    b.Property<string>("PrevDocumentNumber")
                        .HasColumnName("prev_document_number");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("DocumentDirectionId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PrevDocumentId");

                    b.ToTable("document_link");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentPerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name");

                    b.Property<long>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<string>("Family2Name")
                        .HasColumnName("family_2_name");

                    b.Property<string>("FamilyName")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<string>("LatinName")
                        .HasColumnName("latin_name");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name");

                    b.Property<int?>("MilitaryRangId")
                        .HasColumnName("military_rang_id");

                    b.Property<int?>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<int?>("PersonMaturityId")
                        .HasColumnName("person_maturity_id");

                    b.Property<int>("PersonRoleId")
                        .HasColumnName("person_role_id");

                    b.Property<string>("Person_SourceCode")
                        .HasColumnName("person_source_code");

                    b.Property<long?>("Person_SourceId")
                        .HasColumnName("person_source_id");

                    b.Property<int?>("Person_SourceType")
                        .HasColumnName("person_source_type");

                    b.Property<string>("Uic")
                        .HasColumnName("uic");

                    b.Property<int>("UicTypeId")
                        .HasColumnName("uic_type_id");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MilitaryRangId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PersonMaturityId");

                    b.HasIndex("PersonRoleId");

                    b.HasIndex("UicTypeId");

                    b.ToTable("document_person");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentPersonAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<long>("DocumentPersonId")
                        .HasColumnName("document_person_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DocumentPersonId");

                    b.ToTable("document_person_address");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentResolution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<DateTime?>("DeclaredDate")
                        .HasColumnName("declared_date");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<long>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<int>("JudgeDecisionLawunitId")
                        .HasColumnName("judge_decision_lawunit_id");

                    b.Property<string>("JudgeDecisionUserId")
                        .HasColumnName("judge_decision_user_id");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<int>("ResolutionStateId")
                        .HasColumnName("document_decision_state_id");

                    b.Property<int>("ResolutionTypeId")
                        .HasColumnName("decision_type_id");

                    b.Property<string>("UserDecisionId")
                        .HasColumnName("user_decision_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("JudgeDecisionLawunitId");

                    b.HasIndex("JudgeDecisionUserId");

                    b.HasIndex("ResolutionStateId");

                    b.HasIndex("ResolutionTypeId");

                    b.HasIndex("UserDecisionId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("document_resolution");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AuthorId")
                        .HasColumnName("author_id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("DocumentGroupId")
                        .HasColumnName("document_group_id");

                    b.Property<long?>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<int>("DocumentKindId")
                        .HasColumnName("document_kind_id");

                    b.Property<int>("DocumentTemplateStateId")
                        .HasColumnName("document_template_state_id");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnName("document_type_id");

                    b.Property<int?>("HtmlTemplateId")
                        .HasColumnName("html_template_id");

                    b.Property<long>("SourceId")
                        .HasColumnName("source_id");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DocumentGroupId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentKindId");

                    b.HasIndex("DocumentTemplateStateId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("HtmlTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("document_template");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EISPP.EisppCaseCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseInstance")
                        .HasColumnName("case_instance");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<string>("EventCodes")
                        .HasColumnName("event_codes");

                    b.Property<int>("LegalProceedingType")
                        .HasColumnName("legal_proceeding_type");

                    b.HasKey("Id");

                    b.ToTable("nom_eispp_case_code");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EISPP.EisppEventItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CasePersonId")
                        .HasColumnName("case_preson_id");

                    b.Property<int?>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<DateTime?>("EventDate");

                    b.Property<int?>("EventFromId")
                        .HasColumnName("event_from_id");

                    b.Property<int>("EventType")
                        .HasColumnName("event_type");

                    b.Property<int?>("EventTypeRules")
                        .HasColumnName("event_type_rules");

                    b.Property<long?>("MQEpepId")
                        .HasColumnName("mq_epep_id");

                    b.Property<int?>("PersonMeasureId")
                        .HasColumnName("preson_measure_id");

                    b.Property<int?>("PersonOldMeasureId")
                        .HasColumnName("preson_old_measure_id");

                    b.Property<int?>("PunishmentId")
                        .HasColumnName("punishment_id");

                    b.Property<string>("RequestData")
                        .HasColumnName("request_data")
                        .HasColumnType("jsonb");

                    b.Property<string>("ResponseData")
                        .HasColumnName("response_data")
                        .HasColumnType("jsonb");

                    b.Property<long>("SourceId")
                        .HasColumnName("source_id");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("MQEpepId");

                    b.HasIndex("UserExpiredId");

                    b.HasIndex("UserId");

                    b.ToTable("eispp_event_item");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EISPP.EisppRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("EventType")
                        .HasColumnName("event_type");

                    b.Property<string>("Flag")
                        .HasColumnName("flag");

                    b.Property<string>("ItemName")
                        .HasColumnName("item_name");

                    b.Property<string>("Values")
                        .HasColumnName("values");

                    b.HasKey("Id");

                    b.ToTable("nom_eispp_rules");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EkArea", b =>
                {
                    b.Property<int>("AreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("aread_id");

                    b.Property<string>("Abc")
                        .HasColumnName("abc");

                    b.Property<string>("Document")
                        .HasColumnName("document");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasColumnName("name_en");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnName("region");

                    b.HasKey("AreadId");

                    b.ToTable("ek_areas");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EkCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("country_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<string>("EISPPCode")
                        .HasColumnName("eispp_code");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("CountryId");

                    b.ToTable("ek_countries");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EkDistrict", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("district_id");

                    b.Property<string>("Abc")
                        .HasColumnName("abc");

                    b.Property<int>("CountryId")
                        .HasColumnName("country_id");

                    b.Property<string>("Document")
                        .HasColumnName("document");

                    b.Property<string>("Ekatte")
                        .HasColumnName("ekatte");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Oblast")
                        .HasColumnName("oblast");

                    b.Property<string>("Region")
                        .HasColumnName("region");

                    b.HasKey("DistrictId");

                    b.HasIndex("CountryId");

                    b.ToTable("ek_districts");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EkEkatte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Abc")
                        .HasColumnName("abc");

                    b.Property<string>("Altitude")
                        .HasColumnName("altitude");

                    b.Property<string>("Category")
                        .HasColumnName("category");

                    b.Property<int>("CountryId")
                        .HasColumnName("country_id");

                    b.Property<int?>("DistrictId")
                        .HasColumnName("district_id");

                    b.Property<string>("Document")
                        .HasColumnName("document");

                    b.Property<string>("EisppCode")
                        .HasColumnName("eispp_code");

                    b.Property<string>("Ekatte")
                        .HasColumnName("ekatte");

                    b.Property<string>("Kind")
                        .HasColumnName("kind");

                    b.Property<string>("Kmetstvo")
                        .HasColumnName("kmetstvo");

                    b.Property<int?>("MunicipalId")
                        .HasColumnName("municipal_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Oblast")
                        .HasColumnName("oblast");

                    b.Property<string>("Obstina")
                        .HasColumnName("obstina");

                    b.Property<string>("TVM")
                        .HasColumnName("t_v_m");

                    b.Property<string>("Tsb")
                        .HasColumnName("tsb");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MunicipalId");

                    b.ToTable("ek_ekatte");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EkMunincipality", b =>
                {
                    b.Property<int>("MunicipalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("municipality_id");

                    b.Property<string>("Abc")
                        .HasColumnName("abc");

                    b.Property<string>("Category")
                        .HasColumnName("category");

                    b.Property<int?>("DistrictId")
                        .HasColumnName("district_id");

                    b.Property<string>("Document")
                        .HasColumnName("document");

                    b.Property<string>("Ekatte")
                        .HasColumnName("ekatte");

                    b.Property<string>("Municipality")
                        .HasColumnName("municipality");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("MunicipalityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("ek_munincipalities");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EkRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .HasColumnName("category");

                    b.Property<string>("Document")
                        .HasColumnName("document");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Raion")
                        .HasColumnName("raion");

                    b.Property<int?>("SettlementId")
                        .HasColumnName("settlement_id");

                    b.HasKey("Id");

                    b.HasIndex("SettlementId");

                    b.ToTable("ek_regions");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EkSobr", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Abc")
                        .HasColumnName("abc");

                    b.Property<string>("Area1")
                        .HasColumnName("area1");

                    b.Property<string>("Area2")
                        .HasColumnName("area2");

                    b.Property<string>("Document")
                        .HasColumnName("document");

                    b.Property<string>("Ekatte")
                        .HasColumnName("ekatte");

                    b.Property<string>("Kind")
                        .HasColumnName("kind");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("ek_sobr");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EkStreet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("date_from");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("date_to");

                    b.Property<string>("Ekatte")
                        .HasColumnName("ekatte");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int?>("StreetType")
                        .HasColumnName("street_type");

                    b.HasKey("Id");

                    b.ToTable("ek_streets");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("identity_roles");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("identity_role_claims");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<string>("EissId")
                        .HasColumnName("eiss_id");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("LawUnitId")
                        .HasColumnName("lawunit_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end");

                    b.Property<bool>("MustChangePassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("must_change_password")
                        .HasDefaultValue(false);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasMaxLength(256);

                    b.Property<string>("UserSettings")
                        .HasColumnName("user_settings");

                    b.Property<bool?>("WorkNotificationToMail")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("work_notification_to_mail")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("LawUnitId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.ToTable("identity_users");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("identity_user_claims");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasMaxLength(128);

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id");

                    b.HasKey("ProviderKey", "LoginProvider");

                    b.HasIndex("UserId");

                    b.ToTable("identity_user_logins");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("identity_user_roles");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("identity_user_tokens");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Messages.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnName("publish_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(200);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("common_news");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Messages.NewsUser", b =>
                {
                    b.Property<int>("NewsId")
                        .HasColumnName("news_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasMaxLength(50);

                    b.HasKey("NewsId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("common_news_user");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ExchangeDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int>("InstitutionId")
                        .HasColumnName("institution_id");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<long?>("OutDocumentId")
                        .HasColumnName("out_document_id");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("OutDocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("money_exchange_doc");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ExchangeDocExecList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ExchangeDocId")
                        .HasColumnName("exchange_doc_id");

                    b.Property<int>("ExecListId")
                        .HasColumnName("exec_list_id");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeDocId");

                    b.HasIndex("ExecListId");

                    b.ToTable("money_exchange_doc_exec_list");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ExecList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("CaseNumber")
                        .HasColumnName("case_number");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnName("delivery_date");

                    b.Property<string>("DeliveryPersonName")
                        .HasColumnName("delivery_person_name");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("ExecListLawBaseId")
                        .HasColumnName("exec_list_law_base_id");

                    b.Property<int>("ExecListTypeId")
                        .HasColumnName("exec_list_type_id");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int?>("LawUnitSignId")
                        .HasColumnName("lawunit_sign_id");

                    b.Property<long?>("OutDocumentId")
                        .HasColumnName("out_document_id");

                    b.Property<DateTime>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("ExecListLawBaseId");

                    b.HasIndex("ExecListTypeId");

                    b.HasIndex("LawUnitSignId");

                    b.HasIndex("OutDocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("money_exec_list");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ExecListObligation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ExecListId")
                        .HasColumnName("exec_list_id");

                    b.Property<int>("ObligationId")
                        .HasColumnName("obligation_id");

                    b.HasKey("Id");

                    b.HasIndex("ExecListId");

                    b.HasIndex("ObligationId");

                    b.ToTable("money_exec_list_obligation");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ExpenseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BIC")
                        .HasColumnName("bic");

                    b.Property<string>("BankName")
                        .HasColumnName("bank_name");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<int?>("ExpenseOrderStateId")
                        .HasColumnName("expense_order_state_id");

                    b.Property<string>("FirmCity")
                        .HasColumnName("firm_city");

                    b.Property<string>("FirmName")
                        .HasColumnName("firm_name");

                    b.Property<string>("Iban")
                        .HasColumnName("Iban");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("PaidNote")
                        .HasColumnName("paid_note");

                    b.Property<DateTime>("RegDate")
                        .HasColumnName("reg_date");

                    b.Property<string>("RegNumber")
                        .HasColumnName("reg_number");

                    b.Property<string>("RegionName")
                        .HasColumnName("region_name");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("ExpenseOrderStateId");

                    b.HasIndex("UserId");

                    b.ToTable("money_expense_order");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ExpenseOrderObligation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ExpenseOrderId")
                        .HasColumnName("expense_order_id");

                    b.Property<int>("ObligationId")
                        .HasColumnName("obligation_id");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseOrderId");

                    b.HasIndex("ObligationId");

                    b.ToTable("money_expense_order_obligation");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.Obligation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int?>("CaseSessionId")
                        .HasColumnName("case_session_id");

                    b.Property<int?>("CaseSessionMeetingId")
                        .HasColumnName("case_session_meeting_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<long?>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<string>("Family2Name")
                        .HasColumnName("family_2_name");

                    b.Property<string>("FamilyName")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<bool?>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsForMinAmount")
                        .HasColumnName("is_for_min_amount");

                    b.Property<string>("LatinName")
                        .HasColumnName("latin_name");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name");

                    b.Property<int?>("MoneyFeeTypeId")
                        .HasColumnName("money_fee_type_id");

                    b.Property<int?>("MoneyFineTypeId")
                        .HasColumnName("money_fine_type_id");

                    b.Property<int?>("MoneySign")
                        .HasColumnName("money_sign");

                    b.Property<int>("MoneyTypeId")
                        .HasColumnName("money_type_id");

                    b.Property<DateTime>("ObligationDate")
                        .HasColumnName("obligation_date");

                    b.Property<string>("ObligationDescription")
                        .HasColumnName("obligation_description");

                    b.Property<string>("ObligationInfo")
                        .HasColumnName("obligation_Info");

                    b.Property<string>("ObligationNumber")
                        .HasColumnName("obligation_number");

                    b.Property<int?>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<string>("Person_SourceCode")
                        .HasColumnName("person_source_code");

                    b.Property<long?>("Person_SourceId")
                        .HasColumnName("person_source_id");

                    b.Property<int?>("Person_SourceType")
                        .HasColumnName("person_source_type");

                    b.Property<string>("Uic")
                        .HasColumnName("uic");

                    b.Property<int>("UicTypeId")
                        .HasColumnName("uic_type_id");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CaseSessionId");

                    b.HasIndex("CaseSessionMeetingId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MoneyFeeTypeId");

                    b.HasIndex("MoneyFineTypeId");

                    b.HasIndex("MoneyTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UicTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("money_obligation");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ObligationPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("DateDisabled")
                        .HasColumnName("date_disabled");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("ObligationId")
                        .HasColumnName("obligation_id");

                    b.Property<int>("PaymentId")
                        .HasColumnName("payment_id");

                    b.Property<string>("UserDisabledId")
                        .HasColumnName("user_disabled");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ObligationId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserDisabledId");

                    b.HasIndex("UserId");

                    b.ToTable("money_obligation_payment");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ObligationReceive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BIC")
                        .HasColumnName("bic");

                    b.Property<string>("BankName")
                        .HasColumnName("bank_name");

                    b.Property<int?>("CasePersonId")
                        .HasColumnName("case_person_id");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name");

                    b.Property<int?>("ExecListTypeId")
                        .HasColumnName("exec_list_type_id");

                    b.Property<string>("Family2Name")
                        .HasColumnName("family_2_name");

                    b.Property<string>("FamilyName")
                        .HasColumnName("family_name");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<string>("Iban")
                        .HasColumnName("Iban");

                    b.Property<string>("LatinName")
                        .HasColumnName("latin_name");

                    b.Property<string>("MiddleName")
                        .HasColumnName("middle_name");

                    b.Property<int>("ObligationId")
                        .HasColumnName("obligation_id");

                    b.Property<int?>("PersonId")
                        .HasColumnName("person_id");

                    b.Property<string>("Person_SourceCode")
                        .HasColumnName("person_source_code");

                    b.Property<long?>("Person_SourceId")
                        .HasColumnName("person_source_id");

                    b.Property<int?>("Person_SourceType")
                        .HasColumnName("person_source_type");

                    b.Property<string>("Uic")
                        .HasColumnName("uic");

                    b.Property<int>("UicTypeId")
                        .HasColumnName("uic_type_id");

                    b.HasKey("Id");

                    b.HasIndex("CasePersonId");

                    b.HasIndex("ExecListTypeId");

                    b.HasIndex("ObligationId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UicTypeId");

                    b.ToTable("money_obligation_receive");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount");

                    b.Property<int?>("CourtBankAccountId")
                        .HasColumnName("court_bank_account_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateDisabled")
                        .HasColumnName("date_disabled");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsAvans")
                        .HasColumnName("is_avans");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnName("paid_date");

                    b.Property<string>("PaymentDescription")
                        .HasColumnName("payment_description");

                    b.Property<string>("PaymentInfo")
                        .HasColumnName("payment_Info");

                    b.Property<string>("PaymentNumber")
                        .HasColumnName("payment_number");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnName("payment_type_id");

                    b.Property<string>("SenderName")
                        .HasColumnName("sender_name");

                    b.Property<string>("UserDisabledId")
                        .HasColumnName("user_disabled");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtBankAccountId");

                    b.HasIndex("CourtId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("UserDisabledId");

                    b.HasIndex("UserId");

                    b.ToTable("money_payment");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.PosPaymentResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnName("amount");

                    b.Property<string>("Authcode")
                        .HasColumnName("authcode");

                    b.Property<string>("Cardid")
                        .HasColumnName("cardid");

                    b.Property<int>("CourtBankAccountId")
                        .HasColumnName("court_bank_account_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("ErrorCode")
                        .HasColumnName("errorCode");

                    b.Property<string>("Fperiod")
                        .HasColumnName("fperiod");

                    b.Property<string>("Message")
                        .HasColumnName("message");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnName("paid_date");

                    b.Property<int?>("PaymentId")
                        .HasColumnName("payment_id");

                    b.Property<string>("PosError")
                        .HasColumnName("posError");

                    b.Property<string>("PosLog")
                        .HasColumnName("posLog");

                    b.Property<string>("ReasonCode")
                        .HasColumnName("reasonCode");

                    b.Property<string>("ReasonText")
                        .HasColumnName("reasonText");

                    b.Property<string>("Rrn")
                        .HasColumnName("rrn");

                    b.Property<string>("SenderName")
                        .HasColumnName("sender_name");

                    b.Property<string>("Status")
                        .HasColumnName("status");

                    b.Property<string>("Tid")
                        .HasColumnName("tid");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtBankAccountId");

                    b.HasIndex("CourtId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("money_pos_payment_result");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_act_complain_index");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainIndexCourtTypeCaseGroup", b =>
                {
                    b.Property<int>("ActComplainIndexId")
                        .HasColumnName("act_complain_index_id");

                    b.Property<int>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.HasKey("ActComplainIndexId", "CourtTypeId", "CaseGroupId");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("CourtTypeId");

                    b.ToTable("nom_act_complain_index_court_type_case_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_act_complain_result");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainResultCaseType", b =>
                {
                    b.Property<int>("ActComplainResultId")
                        .HasColumnName("act_complain_result_id");

                    b.Property<int>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.HasKey("ActComplainResultId", "CaseTypeId");

                    b.HasIndex("CaseTypeId");

                    b.ToTable("nom_act_complain_result_case_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainResultGrouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ActComplainResultGroup")
                        .HasColumnName("act_complain_result_group");

                    b.Property<int>("ActComplainResultId")
                        .HasColumnName("act_complain_result_id");

                    b.HasKey("Id");

                    b.HasIndex("ActComplainResultId");

                    b.ToTable("nom_act_complain_result_grouping");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActCoordinationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_act_coordination_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActISPNDebtorState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_act_ispn_debtor_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActISPNReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_act_ispn_reason");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ActTypeId")
                        .HasColumnName("act_type_id");

                    b.Property<string>("BlankName")
                        .HasColumnName("blank_name");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<bool?>("MustSelectRelatedAct")
                        .HasColumnName("must_select_related_act");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<string>("ProcessType")
                        .HasColumnName("process_type");

                    b.HasKey("Id");

                    b.HasIndex("ActTypeId");

                    b.ToTable("nom_act_kind");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActMotiveState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_act_motive_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_act_result");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActResultGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ActResultGrouping")
                        .HasColumnName("act_result_grouping");

                    b.Property<int>("ActResultId")
                        .HasColumnName("act_result_id");

                    b.HasKey("Id");

                    b.HasIndex("ActResultId");

                    b.ToTable("nom_act_result_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActResultGrouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ActResultId")
                        .HasColumnName("act_result_id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnName("document_type_id");

                    b.Property<int>("FromCaseInstanceId")
                        .HasColumnName("from_case_instance_id");

                    b.Property<int>("ToCaseInstanceId")
                        .HasColumnName("to_case_instance_id");

                    b.HasKey("Id");

                    b.HasIndex("ActResultId");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("FromCaseInstanceId");

                    b.HasIndex("ToCaseInstanceId");

                    b.ToTable("nom_act_result_grouping");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsInitialState")
                        .HasColumnName("is_initial_state");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_act_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ActFormatType")
                        .HasColumnName("act_format_type");

                    b.Property<string>("BlankDecisionText")
                        .HasColumnName("blank_decision_text");

                    b.Property<string>("BlankHeaderText")
                        .HasColumnName("blank_header_text");

                    b.Property<string>("BlankLabel")
                        .HasColumnName("blank_label");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("EISPPCode")
                        .HasColumnName("eispp_code");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_act_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActTypeCourtLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ActTypeId")
                        .HasColumnName("act_type_id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<int>("CaseInstanceId")
                        .HasColumnName("case_instance_id");

                    b.Property<int>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.HasKey("Id");

                    b.HasIndex("ActTypeId");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("CaseInstanceId");

                    b.HasIndex("CourtTypeId");

                    b.ToTable("nom_act_type_court_link");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActTypeSessionTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ActTypeId")
                        .HasColumnName("act_type_id");

                    b.Property<int>("SessionTypeGroup")
                        .HasColumnName("session_type_group");

                    b.HasKey("Id");

                    b.HasIndex("ActTypeId");

                    b.ToTable("nom_act_type_session_type_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_address_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("BIC")
                        .HasColumnName("bic");

                    b.Property<string>("CodeForSearch")
                        .HasColumnName("code_for_search");

                    b.Property<string>("Label")
                        .HasColumnName("label");

                    b.HasKey("Id");

                    b.ToTable("nom_bank");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseBankAccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_case_bank_account_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_case_character");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<string>("LawBaseDescription")
                        .HasColumnName("lawbase_description");

                    b.Property<decimal>("LoadIndex")
                        .HasColumnName("load_index");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_case_code");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCodeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseCodeId")
                        .HasColumnName("case_code_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("GroupAlias")
                        .HasColumnName("group_alias");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseCodeId");

                    b.HasIndex("UserId");

                    b.ToTable("nom_case_code_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCodeGrouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseCodeGroup")
                        .HasColumnName("case_code_group");

                    b.Property<int>("CaseCodeId")
                        .HasColumnName("case_code_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseCodeId");

                    b.ToTable("nom_case_code_grouping");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_case_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_case_instance");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadAddActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsND")
                        .HasColumnName("is_ND");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_case_load_add_activity");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadAddActivityIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseLoadAddActivityId")
                        .HasColumnName("case_load_add_activity_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<int>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<decimal>("LoadIndex")
                        .HasColumnName("load_index");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("CaseLoadAddActivityId");

                    b.HasIndex("CourtTypeId");

                    b.ToTable("nom_case_load_add_activity_index");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadCorrectionActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<int>("CaseInstanceId")
                        .HasColumnName("court_type_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<int?>("CorrectionGroup")
                        .HasColumnName("correction_group");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<decimal>("LoadIndex")
                        .HasColumnName("load_index");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("CaseInstanceId");

                    b.ToTable("nom_case_load_correction_activity");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadCorrectionActivityIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseInstanceId")
                        .HasColumnName("court_type_id");

                    b.Property<int>("CaseLoadCorrectionActivityId")
                        .HasColumnName("case_load_correction_activity_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<decimal>("LoadIndex")
                        .HasColumnName("load_index");

                    b.HasKey("Id");

                    b.HasIndex("CaseInstanceId");

                    b.HasIndex("CaseLoadCorrectionActivityId");

                    b.ToTable("nom_case_load_correction_activity_index");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadElementGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseCodeId")
                        .HasColumnName("case_code_id");

                    b.Property<int>("CaseInstanceId")
                        .HasColumnName("case_instance_id");

                    b.Property<int?>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnName("document_type_id");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsND")
                        .HasColumnName("is_ND");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<int?>("ProcessPriorityId")
                        .HasColumnName("process_priority_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseCodeId");

                    b.HasIndex("CaseInstanceId");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ProcessPriorityId");

                    b.ToTable("nom_case_load_element_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadElementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseLoadElementGroupId")
                        .HasColumnName("case_load_element_group_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<decimal>("LoadProcent")
                        .HasColumnName("load_procent");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<int?>("ReplaceCaseLoadElementTypeId")
                        .HasColumnName("replace_case_load_element_type_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseLoadElementGroupId");

                    b.HasIndex("ReplaceCaseLoadElementTypeId");

                    b.ToTable("nom_case_load_element_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadElementTypeRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("ActTypeId")
                        .HasColumnName("act_type_id");

                    b.Property<int>("CaseLoadElementTypeId")
                        .HasColumnName("case_load_element_type_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime?>("DateExpired")
                        .HasColumnName("date_expired");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("DescriptionExpired")
                        .HasColumnName("description_expired");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsCreateCase")
                        .HasColumnName("is_create_case");

                    b.Property<bool?>("IsCreateMotive")
                        .HasColumnName("is_create_motive");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<int?>("SessionResultId")
                        .HasColumnName("session_result_id");

                    b.Property<int?>("SessionTypeId")
                        .HasColumnName("session_type_id");

                    b.Property<string>("UserExpiredId")
                        .HasColumnName("user_expired_id");

                    b.HasKey("Id");

                    b.HasIndex("ActTypeId");

                    b.HasIndex("CaseLoadElementTypeId");

                    b.HasIndex("SessionResultId");

                    b.HasIndex("SessionTypeId");

                    b.HasIndex("UserExpiredId");

                    b.ToTable("nom_case_load_element_type_rule");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMigrationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("MigrationDirection")
                        .HasColumnName("migration_direction");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<int?>("PriorMigrationTypeId")
                        .HasColumnName("prior_migration_type_id");

                    b.HasKey("Id");

                    b.ToTable("nom_case_migration_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyClaimGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_case_money_claim_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyClaimType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseMoneyClaimGroupId")
                        .HasColumnName("case_money_claim_group_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("CaseMoneyClaimGroupId");

                    b.ToTable("nom_case_money_claim_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyCollectionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_case_money_collection_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyCollectionKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseMoneyCollectionGroupId")
                        .HasColumnName("case_money_collection_group_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("CaseMoneyCollectionGroupId");

                    b.ToTable("nom_case_money_collection_kind");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyCollectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseMoneyCollectionGroupId")
                        .HasColumnName("case_money_collection_group_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("CaseMoneyCollectionGroupId");

                    b.ToTable("nom_case_money_collection_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_case_money_expense_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CasePersonInheritanceResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_case_person_inheritance_result");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("CaseGroupId");

                    b.ToTable("nom_case_reason");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsInitialState")
                        .HasColumnName("is_initial_state");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_case_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<int>("CaseInstanceId")
                        .HasColumnName("case_instance_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("EISPPCode")
                        .HasColumnName("eispp_code");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<int?>("ReportGroupAzbuchnik")
                        .HasColumnName("report_group_azbuchnik");

                    b.HasKey("Id");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("CaseInstanceId");

                    b.ToTable("nom_case_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseTypeCharacter", b =>
                {
                    b.Property<int>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.Property<int>("CaseCharacterId")
                        .HasColumnName("case_character_id");

                    b.HasKey("CaseTypeId", "CaseCharacterId");

                    b.HasIndex("CaseCharacterId");

                    b.ToTable("nom_case_type_character");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseTypeCode", b =>
                {
                    b.Property<int>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.Property<int>("CaseCodeId")
                        .HasColumnName("case_code_id");

                    b.HasKey("CaseTypeId", "CaseCodeId");

                    b.HasIndex("CaseCodeId");

                    b.ToTable("nom_case_type_code");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseTypeUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.ToTable("nom_case_type_unit");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseTypeUnitCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseTypeUnitId")
                        .HasColumnName("case_type_unit_id");

                    b.Property<int>("JudgeRoleId")
                        .HasColumnName("judge_role_id");

                    b.Property<int>("PersonCount")
                        .HasColumnName("person_count");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeUnitId");

                    b.HasIndex("JudgeRoleId");

                    b.ToTable("nom_case_type_unit_count");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_classification");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CodeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("InnerCode")
                        .HasColumnName("inner_code");

                    b.Property<string>("OuterCode")
                        .HasColumnName("outer_code");

                    b.HasKey("Id");

                    b.ToTable("nom_code_mapping");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_company_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ComplainState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_complain_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ComplainType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_complain_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CounterResetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_counter_reset_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CounterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_counter_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("InstanceList")
                        .HasColumnName("instance_list");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int?>("MainCourtTypeId")
                        .HasColumnName("main_court_type_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_court_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtTypeCaseType", b =>
                {
                    b.Property<int>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.Property<int>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.Property<string>("ExcelReportCol")
                        .HasColumnName("excel_report_col");

                    b.HasKey("CourtTypeId", "CaseTypeId");

                    b.HasIndex("CaseTypeId");

                    b.ToTable("nom_court_type_case_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtTypeSessionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.Property<int>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.Property<int>("SessionTypeId")
                        .HasColumnName("session_type_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("SessionTypeId");

                    b.ToTable("nom_court_type_session_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_currency");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_day_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeadlineGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_deadline_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeadlineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<int?>("DeadlineDays")
                        .HasColumnName("deadline_days");

                    b.Property<int>("DeadlineGroupId")
                        .HasColumnName("deadline_group_id");

                    b.Property<int?>("DeadlineMonths")
                        .HasColumnName("deadline_months");

                    b.Property<int?>("DeadlineSpecialDays")
                        .HasColumnName("deadline_special_days");

                    b.Property<int?>("DeadlineSpecialMonths")
                        .HasColumnName("deadline_special_months");

                    b.Property<int?>("DeadlineSpecialWorkingDays")
                        .HasColumnName("deadline_special_working_days");

                    b.Property<int?>("DeadlineWorkingDays")
                        .HasColumnName("deadline_working_days");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("DeadlineGroupId");

                    b.ToTable("nom_deadline_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DecisionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_decision_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryDirectionGroup", b =>
                {
                    b.Property<int>("DeliveryGroupId")
                        .HasColumnName("delivery_group_id");

                    b.Property<int>("DocumentDirectionId")
                        .HasColumnName("document_direction_id");

                    b.HasKey("DeliveryGroupId", "DocumentDirectionId");

                    b.HasIndex("DocumentDirectionId");

                    b.ToTable("nom_delivery_direction_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_delivery_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryNumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_delivery_number_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryOper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_delivery_oper");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryOperState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("DeliveryOperId")
                        .HasColumnName("delivery_oper_id");

                    b.Property<int>("NotificationStateId")
                        .HasColumnName("notification_state_id");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryOperId");

                    b.HasIndex("NotificationStateId");

                    b.ToTable("nom_delivery_oper_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_delivery_reason");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryStateReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("DeliveryReasonId")
                        .HasColumnName("delivery_reason_id");

                    b.Property<int>("NotificationStateId")
                        .HasColumnName("notification_state_id");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryReasonId");

                    b.HasIndex("NotificationStateId");

                    b.ToTable("nom_delivery_state_reason");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<int>("DeliveryGroupId")
                        .HasColumnName("delivery_group_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryGroupId");

                    b.ToTable("nom_delivery_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DepartmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_department_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DismisalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("DismisalKindId")
                        .HasColumnName("dismisal_kind_id");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_dismisal_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentDecisionState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_document_decision_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_document_direction");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("DocumentKindId")
                        .HasColumnName("document_kind_id");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("DocumentKindId");

                    b.ToTable("nom_document_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("DocumentDirectionId")
                        .HasColumnName("document_direction_id");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("DocumentDirectionId");

                    b.ToTable("nom_document_kind");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentRegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_document_registers");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentRegisterLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<long>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<int>("DocumentRegisterId")
                        .HasColumnName("document_register_id");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnName("register_date");

                    b.Property<int>("RegisterNo")
                        .HasColumnName("register_no");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("DocumentRegisterId");

                    b.ToTable("nom_document_register_links");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentRegisterType", b =>
                {
                    b.Property<int>("DocumentRegisterId")
                        .HasColumnName("document_register_id");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnName("document_type_id");

                    b.HasKey("DocumentRegisterId", "DocumentTypeId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("nom_document_register_types");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentTemplateState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_document_template_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<bool?>("DecisionCaseSelect")
                        .HasColumnName("decision_case_select");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("DocumentGroupId")
                        .HasColumnName("document_group_id");

                    b.Property<string>("DocumentTemplateName")
                        .HasColumnName("document_template_name");

                    b.Property<int?>("HtmlTemplateTypeId")
                        .HasColumnName("html_template_type_id");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("DocumentGroupId");

                    b.HasIndex("HtmlTemplateTypeId");

                    b.ToTable("nom_document_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentTypeCaseType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .HasColumnName("document_type_id");

                    b.Property<int>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.HasKey("DocumentTypeId", "CaseTypeId");

                    b.HasIndex("CaseTypeId");

                    b.ToTable("nom_document_type_case_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentTypeCourtType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .HasColumnName("document_type_id");

                    b.Property<int>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.HasKey("DocumentTypeId", "CourtTypeId");

                    b.HasIndex("CourtTypeId");

                    b.ToTable("nom_document_type_court_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentTypeDecisionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("DecisionTypeId")
                        .HasColumnName("decision_type_id");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnName("document_type_id");

                    b.HasKey("Id");

                    b.HasIndex("DecisionTypeId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("nom_document_type_decision_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentTypeGrouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("DocumentTypeGroup")
                        .HasColumnName("document_type_group");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnName("document_type_id");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("nom_document_type_grouping");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EMailMessageState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_email_message_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EisppTbl", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("code");

                    b.Property<string>("Label")
                        .HasColumnName("label");

                    b.Property<int?>("StandartNo")
                        .HasColumnName("standart_no");

                    b.Property<string>("SystemName")
                        .HasColumnName("system_name");

                    b.HasKey("Code");

                    b.ToTable("nom_eispp_tbl");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EisppTblElement", b =>
                {
                    b.Property<string>("EisppTblCode")
                        .HasColumnName("eispp_tbl_code");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .HasColumnName("label");

                    b.Property<int?>("StandartNo")
                        .HasColumnName("standart_no");

                    b.Property<string>("SystemName")
                        .HasColumnName("system_name");

                    b.HasKey("EisppTblCode", "Code");

                    b.ToTable("nom_eispp_tbl_element");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EpepUserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_epep_user_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EvidenceMovementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_evidence_movement_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EvidenceState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_evidence_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EvidenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_evidence_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExcelReportIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ActComplainIndex");

                    b.Property<string>("ActTypeId")
                        .HasColumnName("act_type_id");

                    b.Property<string>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.Property<int>("ColIndex")
                        .HasColumnName("col_index");

                    b.Property<int>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.HasKey("Id");

                    b.HasIndex("CourtTypeId");

                    b.ToTable("nom_excel_report_index");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExecListLawBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_exec_list_law_base");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExecListLawBaseCaseGroup", b =>
                {
                    b.Property<int>("ExecListLawBaseId")
                        .HasColumnName("exec_list_law_base_id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.HasKey("ExecListLawBaseId", "CaseGroupId");

                    b.HasIndex("CaseGroupId");

                    b.ToTable("nom_exec_list_law_base_case_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExecListMoneyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_execlist_moneytype");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExecListType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_exec_list_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExpenceMoneyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_expence_moneytype");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExpenseOrderState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_expense_order_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.HtmlTemplateParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_html_template_param");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.HtmlTemplateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<int?>("TemplateGroup")
                        .HasColumnName("template_group");

                    b.HasKey("Id");

                    b.ToTable("nom_html_template_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.InstitutionCaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_institution_case_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.InstitutionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("EISPPcodeLabel")
                        .HasColumnName("eispp_code_label");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_institution_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.IntegrationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_integration_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.IntegrationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_integration_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeDepartmentRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_judge_department_role");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeLoadActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("GroupNo")
                        .HasColumnName("group_no");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_judge_load_activity");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeLoadActivityIndex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("JudgeLoadActivityId")
                        .HasColumnName("judge_load_activity_id");

                    b.Property<decimal>("LoadIndex")
                        .HasColumnName("load_index");

                    b.HasKey("Id");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("JudgeLoadActivityId");

                    b.ToTable("nom_judge_load_activity_index");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_judge_role");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeSeniority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_judge_seniority");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LawBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_law_base");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LawUnitPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_law_unit_position");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LawUnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_law_unit_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LawUnitTypePosition", b =>
                {
                    b.Property<int>("LawUnitTypeId")
                        .HasColumnName("law_unit_type_id");

                    b.Property<int>("PositionId")
                        .HasColumnName("position_id");

                    b.HasKey("LawUnitTypeId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("nom_law_unit_type_position");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LifecycleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_lifecycle_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LinkDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<string>("LinkTemplate")
                        .HasColumnName("link_template");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_link_direction");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LoadGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_load_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LoadGroupLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseInstanceId")
                        .HasColumnName("case_instance_id");

                    b.Property<int>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.Property<int>("LoadGroupId")
                        .HasColumnName("load_group_id");

                    b.Property<decimal>("LoadIndex")
                        .HasColumnName("load_index");

                    b.HasKey("Id");

                    b.HasIndex("CaseInstanceId");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("LoadGroupId");

                    b.ToTable("nom_load_group_link");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LoadGroupLinkCode", b =>
                {
                    b.Property<int>("LoadGroupLinkId")
                        .HasColumnName("load_group_link_id");

                    b.Property<int>("CaseCodeId")
                        .HasColumnName("case_code_id");

                    b.HasKey("LoadGroupLinkId", "CaseCodeId");

                    b.HasIndex("CaseCodeId");

                    b.ToTable("nom_load_group_link_code");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MilitaryRang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_military_rang");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyCollectionEndDateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_money_collection_end_date_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyFeeDocumentGroup", b =>
                {
                    b.Property<int>("MoneyFeeTypeId")
                        .HasColumnName("money_fee_type_id");

                    b.Property<int>("DocumentGroupId")
                        .HasColumnName("document_group_id");

                    b.HasKey("MoneyFeeTypeId", "DocumentGroupId");

                    b.HasIndex("DocumentGroupId");

                    b.ToTable("nom_money_fee_document_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyFeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_money_fee_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyFineCaseGroup", b =>
                {
                    b.Property<int>("MoneyFineTypeId")
                        .HasColumnName("money_fine_type_id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.HasKey("MoneyFineTypeId", "CaseGroupId");

                    b.HasIndex("CaseGroupId");

                    b.ToTable("nom_money_fine_case_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyFineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_money_fine_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_money_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("MoneyGroupId")
                        .HasColumnName("money_group_id");

                    b.Property<int>("MoneySign")
                        .HasColumnName("money_sign");

                    b.Property<bool?>("NoMoney");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("MoneyGroupId");

                    b.ToTable("nom_money_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MovementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_movement_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationDeliveryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_notification_delivery_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationDeliveryGroupState", b =>
                {
                    b.Property<int>("NotificationDeliveryGroupId")
                        .HasColumnName("notification_delivery_group_id");

                    b.Property<int>("NotificationStateId")
                        .HasColumnName("notification_state_id");

                    b.HasKey("NotificationDeliveryGroupId", "NotificationStateId");

                    b.HasIndex("NotificationStateId");

                    b.ToTable("nom_notification_delivery_group_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationDeliveryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("NotificationDeliveryGroupId")
                        .HasColumnName("notification_delivery_group_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("NotificationDeliveryGroupId");

                    b.ToTable("nom_notification_delivery_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_notification_mode");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_notification_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int>("HtmlTemplateTypeId")
                        .HasColumnName("html_template_type_id");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("NotificationModeId")
                        .HasColumnName("notification_mode_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("HtmlTemplateTypeId");

                    b.HasIndex("NotificationModeId");

                    b.ToTable("nom_notification_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.OrganizationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_organization_level");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_payment_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PeriodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_period_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonMaturity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_person_maturity");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<int>("RoleKindId")
                        .HasColumnName("role_kind_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleKindId");

                    b.ToTable("nom_person_role");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRoleCaseType", b =>
                {
                    b.Property<int>("PersonRoleId")
                        .HasColumnName("person_role_id");

                    b.Property<int>("CaseTypeId")
                        .HasColumnName("case_type_id");

                    b.HasKey("PersonRoleId", "CaseTypeId");

                    b.HasIndex("CaseTypeId");

                    b.ToTable("nom_person_role_case_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRoleGrouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("PersonRoleGroup")
                        .HasColumnName("person_role_group");

                    b.Property<int>("PersonRoleId")
                        .HasColumnName("person_role_id");

                    b.HasKey("Id");

                    b.HasIndex("PersonRoleId");

                    b.ToTable("nom_person_role_grouping");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRoleInCrime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_person_role_in_crime");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRoleLinkDirection", b =>
                {
                    b.Property<int>("PersonRoleId")
                        .HasColumnName("person_role_id");

                    b.Property<int>("LinkDirectionId")
                        .HasColumnName("link_direction_id");

                    b.HasKey("PersonRoleId", "LinkDirectionId");

                    b.HasIndex("LinkDirectionId");

                    b.ToTable("nom_person_role_link_direction");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ProcessPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_process_priority");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PunishmentActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_punishement_activity");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.RecidiveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_recidive_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.RegixType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_regix_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ResolutionState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_resolution_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ResolutionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_resolution_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.RoleKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_role_kind");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SelectionLawUnitState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_selection_lawunit_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SelectionMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_selection_mode");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SelectionProtokolState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_selection_protokol_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SentenceExecPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_sentence_exec_period");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SentenceLawbase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_sentence_lawbase");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SentenceRegimeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_sentence_regime_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SentenceResultType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_sentence_result_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SentenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool?>("HasMoney")
                        .HasColumnName("has_money");

                    b.Property<bool?>("HasPeriod")
                        .HasColumnName("has_period");

                    b.Property<bool?>("HasProbation")
                        .HasColumnName("has_probation");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsEffective")
                        .HasColumnName("is_effective");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_sentence_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionActGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.HasIndex("CaseGroupId");

                    b.ToTable("nom_session_act_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionActType", b =>
                {
                    b.Property<int>("SessionActGroupId")
                        .HasColumnName("session_act_group_id");

                    b.Property<int>("ActTypeId")
                        .HasColumnName("act_type_id");

                    b.HasKey("SessionActGroupId", "ActTypeId");

                    b.HasIndex("ActTypeId");

                    b.ToTable("nom_session_act_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionDocState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_session_doc_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionDocType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_session_doc_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionDuration", b =>
                {
                    b.Property<int>("Minutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("minutes");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .HasColumnName("label");

                    b.HasKey("Minutes");

                    b.ToTable("nom_session_duration");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionMeetingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_session_meeting_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<int?>("SessionResultGroupId")
                        .HasColumnName("session_result_group_id");

                    b.HasKey("Id");

                    b.HasIndex("SessionResultGroupId");

                    b.ToTable("nom_session_result");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<int>("SessionResultGroupId")
                        .HasColumnName("session_result_group_id");

                    b.HasKey("Id");

                    b.HasIndex("SessionResultGroupId");

                    b.ToTable("nom_session_result_base");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultBaseGrouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("SessionResultBaseGroup")
                        .HasColumnName("session_result_base_group");

                    b.Property<int>("SessionResultBaseId")
                        .HasColumnName("session_result_base_id");

                    b.HasKey("Id");

                    b.HasIndex("SessionResultBaseId");

                    b.ToTable("nom_session_result_base_grouping");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultFilterRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseGroupId")
                        .HasColumnName("case_group_id");

                    b.Property<int?>("CourtTypeId")
                        .HasColumnName("court_type_id");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<int>("SessionResultId")
                        .HasColumnName("session_result_id");

                    b.Property<int?>("SessionTypeGroupId")
                        .HasColumnName("session_type_group_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseGroupId");

                    b.HasIndex("CourtTypeId");

                    b.HasIndex("SessionResultId");

                    b.ToTable("nom_session_result_filter_rule");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_session_result_group");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultGrouping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("SessionResultGroup")
                        .HasColumnName("session_result_group");

                    b.Property<int>("SessionResultId")
                        .HasColumnName("session_result_id");

                    b.HasKey("Id");

                    b.HasIndex("SessionResultId");

                    b.ToTable("nom_session_result_grouping");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsInitialState")
                        .HasColumnName("is_initial_state");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_session_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<string>("SessionActLabel")
                        .HasColumnName("session_act_label");

                    b.Property<int?>("SessionTypeGroup")
                        .HasColumnName("session_type_group");

                    b.HasKey("Id");

                    b.ToTable("nom_session_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionTypeState", b =>
                {
                    b.Property<int>("SessionTypeId")
                        .HasColumnName("session_type_id");

                    b.Property<int>("SessionStateId")
                        .HasColumnName("session_state_id");

                    b.HasKey("SessionTypeId", "SessionStateId");

                    b.HasIndex("SessionStateId");

                    b.ToTable("nom_session_type_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int?>("LawUnitTypeID")
                        .HasColumnName("lawunit_type_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_speciality");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TableDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ColumnName")
                        .HasColumnName("column_name");

                    b.Property<string>("DataType")
                        .HasColumnName("data_type");

                    b.Property<string>("DataTypeNormalized")
                        .HasColumnName("data_type_normalized");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsNullable")
                        .HasColumnName("is_nullable");

                    b.Property<int>("OrdinalPosition")
                        .HasColumnName("ordinal_position");

                    b.Property<string>("TableName")
                        .HasColumnName("table_name");

                    b.HasKey("Id");

                    b.ToTable("nom_table_description");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<int>("TaskTypeId")
                        .HasColumnName("task_type_id");

                    b.HasKey("Id");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("nom_task_action");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_task_execution");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_task_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool?>("AutomatedTask")
                        .HasColumnName("automated_task");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<bool?>("MultiUserTask")
                        .HasColumnName("multi_user_task");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.Property<bool?>("SelfTask")
                        .HasColumnName("self_task");

                    b.HasKey("Id");

                    b.ToTable("nom_task_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskTypeSourceType", b =>
                {
                    b.Property<int>("TaskTypeId")
                        .HasColumnName("task_type_id");

                    b.Property<int>("SourceType")
                        .HasColumnName("source_type");

                    b.HasKey("TaskTypeId", "SourceType");

                    b.ToTable("nom_task_type_source_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.UicType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_uic_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.WorkNotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnName("order_number");

                    b.HasKey("Id");

                    b.ToTable("nom_work_notification_type");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Regix.RegixMapActualStateV3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("FieldIdent")
                        .HasColumnName("field_ident");

                    b.Property<string>("Fields")
                        .HasColumnName("fields");

                    b.Property<bool?>("ForDisplay")
                        .HasColumnName("for_display");

                    b.Property<bool?>("HasObject")
                        .HasColumnName("has_object");

                    b.Property<string>("Labels")
                        .HasColumnName("labels");

                    b.Property<string>("TypeField")
                        .HasColumnName("type_field");

                    b.HasKey("Id");

                    b.ToTable("regix_map_actual_state");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Regix.RegixReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("CaseId")
                        .HasColumnName("case_id");

                    b.Property<int?>("CaseSessionActId")
                        .HasColumnName("case_session_act_id");

                    b.Property<int>("CourtId")
                        .HasColumnName("court_id");

                    b.Property<DateTime?>("DateTransferedDW")
                        .HasColumnName("date_transfered_dw");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnName("date_wrt");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<long?>("DocumentId")
                        .HasColumnName("document_id");

                    b.Property<int>("RegixTypeId")
                        .HasColumnName("regix_type_id");

                    b.Property<string>("RequestData")
                        .HasColumnName("request_data")
                        .HasColumnType("jsonb");

                    b.Property<string>("ResponseData")
                        .HasColumnName("response_data")
                        .HasColumnType("jsonb");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CaseSessionActId");

                    b.HasIndex("CourtId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("RegixTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("regix_report");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.Case", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCharacter", "CaseCharacter")
                        .WithMany()
                        .HasForeignKey("CaseCharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCode", "CaseCode")
                        .WithMany()
                        .HasForeignKey("CaseCodeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseReason", "CaseReason")
                        .WithMany()
                        .HasForeignKey("CaseReasonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseState", "CaseState")
                        .WithMany()
                        .HasForeignKey("CaseStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseTypeUnit", "CaseTypeUnit")
                        .WithMany()
                        .HasForeignKey("CaseTypeUnitId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtGroup", "CourtGroup")
                        .WithMany()
                        .HasForeignKey("CourtGroupId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany("Cases")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LoadGroupLink", "LoadGroupLink")
                        .WithMany()
                        .HasForeignKey("LoadGroupLinkId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ProcessPriority", "ProcessPriority")
                        .WithMany()
                        .HasForeignKey("ProcessPriorityId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseArchive", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtArchiveIndex", "CourtArchiveIndex")
                        .WithMany()
                        .HasForeignKey("ArchiveIndexId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("CaseArchives")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseBankAccount", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseBankAccountType", "CaseBankAccountType")
                        .WithMany()
                        .HasForeignKey("CaseBankAccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseClassification", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("CaseClassifications")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany()
                        .HasForeignKey("CaseSessionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.Classification", "Classification")
                        .WithMany()
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseCrime", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("CaseCrimes")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseDeactivation", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "DeactivateUser")
                        .WithMany()
                        .HasForeignKey("DeactivateUserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseDeadline", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionResult", "CaseSessionResult")
                        .WithMany()
                        .HasForeignKey("CaseSessionResultId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeadlineGroup", "DeadlineGroup")
                        .WithMany()
                        .HasForeignKey("DeadlineGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeadlineType", "DeadlineType")
                        .WithMany()
                        .HasForeignKey("DeadlineTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionResult", "ResultExpired")
                        .WithMany()
                        .HasForeignKey("ResultExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseDepersonalizationValue", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseEvidence", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EvidenceState", "EvidenceState")
                        .WithMany()
                        .HasForeignKey("EvidenceStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EvidenceType", "EvidenceType")
                        .WithMany()
                        .HasForeignKey("EvidenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseEvidenceMovement", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseEvidence", "CaseEvidence")
                        .WithMany()
                        .HasForeignKey("CaseEvidenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EvidenceMovementType", "EvidenceMovementType")
                        .WithMany()
                        .HasForeignKey("EvidenceMovementTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseFastProcess", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseH", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("History")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnit", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("CaseLawUnits")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSelectionProtokol", "CaseSelectionProtokol")
                        .WithMany()
                        .HasForeignKey("CaseSelectionProtokolId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany("CaseLawUnits")
                        .HasForeignKey("CaseSessionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtDepartment", "CourtDepartment")
                        .WithMany()
                        .HasForeignKey("CourtDepartmentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtDuty", "CourtDuty")
                        .WithMany()
                        .HasForeignKey("CourtDutyId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtGroup", "CourtGroup")
                        .WithMany()
                        .HasForeignKey("CourtGroupId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeDepartmentRole", "JudgeDepartmentRole")
                        .WithMany()
                        .HasForeignKey("JudgeDepartmentRoleId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeRole", "JudgeRole")
                        .WithMany()
                        .HasForeignKey("JudgeRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtLawUnitSubstitution", "LawUnitSubstitution")
                        .WithMany()
                        .HasForeignKey("LawUnitSubstitutionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "LawUnitUser")
                        .WithMany()
                        .HasForeignKey("LawUnitUserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtDepartment", "RealCourtDepartment")
                        .WithMany()
                        .HasForeignKey("RealCourtDepartmentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnitCount", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("CaseLawUnitCount")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeRole", "JudgeRole")
                        .WithMany()
                        .HasForeignKey("JudgeRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnitDismisal", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnit", "CaseLawUnit")
                        .WithMany()
                        .HasForeignKey("CaseLawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DismisalType", "DismisalType")
                        .WithMany()
                        .HasForeignKey("DismisalTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnitManualJudge", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeRole", "JudgeRole")
                        .WithMany()
                        .HasForeignKey("JudgeRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnitReplace", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnit", "CaseLawUnit")
                        .WithMany("LawUnitReplaces")
                        .HasForeignKey("CaseLawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "ReplaceLawUnit")
                        .WithMany()
                        .HasForeignKey("ReplaceLawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnitTaskChange", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "NewTaskUser")
                        .WithMany()
                        .HasForeignKey("NewTaskUserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.WorkTask", "WorkTask")
                        .WithMany()
                        .HasForeignKey("WorkTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLifecycle", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("CaseLifecycles")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionResult", "CaseSessionResult")
                        .WithMany()
                        .HasForeignKey("CaseSessionResultId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LifecycleType", "LifecycleType")
                        .WithMany()
                        .HasForeignKey("LifecycleTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLoadCorrection", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadCorrectionActivity", "CaseLoadCorrectionActivity")
                        .WithMany()
                        .HasForeignKey("CaseLoadCorrectionActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLoadIndex", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadAddActivity", "CaseLoadAddActivity")
                        .WithMany()
                        .HasForeignKey("CaseLoadAddActivityId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadElementGroup", "CaseLoadElementGroup")
                        .WithMany()
                        .HasForeignKey("CaseLoadElementGroupId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadElementType", "CaseLoadElementType")
                        .WithMany()
                        .HasForeignKey("CaseLoadElementTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMigration", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("CaseMigrations")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMigrationType", "CaseMigrationType")
                        .WithMany()
                        .HasForeignKey("CaseMigrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "InitialCase")
                        .WithMany()
                        .HasForeignKey("InitialCaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMigration", "OutCaseMigration")
                        .WithMany("InCaseMigrations")
                        .HasForeignKey("OutCaseMigrationId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "OutDocument")
                        .WithMany()
                        .HasForeignKey("OutDocumentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "PriorCase")
                        .WithMany()
                        .HasForeignKey("PriorCaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "ReturnCase")
                        .WithMany()
                        .HasForeignKey("ReturnCaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "SendToCourt")
                        .WithMany()
                        .HasForeignKey("SendToCourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Institution", "SendToInstitution")
                        .WithMany()
                        .HasForeignKey("SendToInstitutionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoney", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnit", "CaseSessionLawUnit")
                        .WithMany()
                        .HasForeignKey("CaseLawUnitId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany()
                        .HasForeignKey("CaseSessionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyType", "MoneyType")
                        .WithMany()
                        .HasForeignKey("MoneyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyClaim", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyClaimGroup", "CaseMoneyClaimGroup")
                        .WithMany()
                        .HasForeignKey("CaseMoneyClaimGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyClaimType", "CaseMoneyClaimType")
                        .WithMany()
                        .HasForeignKey("CaseMoneyClaimTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyCollection", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyClaim", "CaseMoneyClaim")
                        .WithMany()
                        .HasForeignKey("CaseMoneyClaimId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyCollectionGroup", "CaseMoneyCollectionGroup")
                        .WithMany()
                        .HasForeignKey("CaseMoneyCollectionGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyCollectionKind", "CaseMoneyCollectionKind")
                        .WithMany()
                        .HasForeignKey("CaseMoneyCollectionKindId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyCollectionType", "CaseMoneyCollectionType")
                        .WithMany()
                        .HasForeignKey("CaseMoneyCollectionTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyCollection", "MainCaseMoneyCollection")
                        .WithMany()
                        .HasForeignKey("MainCaseMoneyCollectionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyCollectionEndDateType", "MoneyCollectionEndDateType")
                        .WithMany()
                        .HasForeignKey("MoneyCollectionEndDateTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyCollectionPerson", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyCollection", "CaseMoneyCollection")
                        .WithMany("CaseMoneyCollectionPersons")
                        .HasForeignKey("CaseMoneyCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyExpense", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyExpenseType", "CaseMoneyExpenseType")
                        .WithMany()
                        .HasForeignKey("CaseMoneyExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyExpensePerson", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMoneyExpense", "CaseMoneyExpense")
                        .WithMany()
                        .HasForeignKey("CaseMoneyExpenseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseMovement", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "AcceptUser")
                        .WithMany()
                        .HasForeignKey("AcceptUserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtOrganization", "CourtOrganization")
                        .WithMany()
                        .HasForeignKey("CourtOrganizationId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MovementType", "MovementType")
                        .WithMany()
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseNotification", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnit", "CaseLawUnit")
                        .WithMany()
                        .HasForeignKey("CaseLawUnitId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonAddress", "CasePersonAddress")
                        .WithMany()
                        .HasForeignKey("CasePersonAddressId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePersonL1")
                        .WithMany()
                        .HasForeignKey("CasePersonL1Id");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePersonL2")
                        .WithMany()
                        .HasForeignKey("CasePersonL2Id");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePersonL3")
                        .WithMany()
                        .HasForeignKey("CasePersonL3Id");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonLink", "CasePersonLink")
                        .WithMany()
                        .HasForeignKey("CasePersonLinkId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActComplain", "CaseSessionActComplain")
                        .WithMany()
                        .HasForeignKey("CaseSessionActComplainId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany()
                        .HasForeignKey("CaseSessionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.HtmlTemplate", "HtmlTemplate")
                        .WithMany()
                        .HasForeignKey("HtmlTemplateId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Address", "LawUnitAddress")
                        .WithMany()
                        .HasForeignKey("LawUnitAddressId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Address", "NotificationAddress")
                        .WithMany()
                        .HasForeignKey("NotificationAddressId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationDeliveryGroup", "GetNotificationDeliveryGroup")
                        .WithMany()
                        .HasForeignKey("NotificationDeliveryGroupId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationDeliveryType", "NotificationDeliveryType")
                        .WithMany()
                        .HasForeignKey("NotificationDeliveryTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationState", "NotificationState")
                        .WithMany()
                        .HasForeignKey("NotificationStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseNotification", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseNotificationH", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseNotification", "CaseNotification")
                        .WithMany("History")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseNotificationMLink", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseNotification", "CaseNotification")
                        .WithMany("CaseNotificationMLinks")
                        .HasForeignKey("CaseNotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePersonSummoned")
                        .WithMany()
                        .HasForeignKey("CasePersonSummonedId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("CasePersons")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSelectionProtokol", "CaseSelectionProtokol")
                        .WithMany()
                        .HasForeignKey("CaseSelectionProtokolId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany("CasePersons")
                        .HasForeignKey("CaseSessionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MilitaryRang", "MilitaryRang")
                        .WithMany()
                        .HasForeignKey("MilitaryRangId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonMaturity", "PersonMaturity")
                        .WithMany()
                        .HasForeignKey("PersonMaturityId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRole", "PersonRole")
                        .WithMany()
                        .HasForeignKey("PersonRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.UicType", "UicType")
                        .WithMany()
                        .HasForeignKey("UicTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonAddress", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany("Addresses")
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonAddressH", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonAddress", "CasePersonAddress")
                        .WithMany("History")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonCrime", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseCrime", "CaseCrime")
                        .WithMany("CasePersonCrimes")
                        .HasForeignKey("CaseCrimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("CasePersonCrimes")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRoleInCrime", "PersonRoleInCrime")
                        .WithMany()
                        .HasForeignKey("PersonRoleInCrimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.RecidiveType", "RecidiveType")
                        .WithMany()
                        .HasForeignKey("RecidiveTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonDocument", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonH", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany("History")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.UicType", "UicType")
                        .WithMany()
                        .HasForeignKey("UicTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonInheritance", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CasePersonInheritanceResult", "CasePersonInheritanceResult")
                        .WithMany()
                        .HasForeignKey("CasePersonInheritanceResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany("CasePersonInheritances")
                        .HasForeignKey("CaseSessionActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "DecreedCourt")
                        .WithMany()
                        .HasForeignKey("DecreedCourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonLink", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePersonRel")
                        .WithMany()
                        .HasForeignKey("CasePersonRelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePersonSecondRel")
                        .WithMany()
                        .HasForeignKey("CasePersonSecondRelId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany()
                        .HasForeignKey("CaseSessionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LinkDirection", "LinkDirection")
                        .WithMany()
                        .HasForeignKey("LinkDirectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LinkDirection", "LinkDirectionSecond")
                        .WithMany()
                        .HasForeignKey("LinkDirectionSecondId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonMeasure", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "MeasureCourt")
                        .WithMany()
                        .HasForeignKey("MeasureCourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Institution", "MeasureInstitution")
                        .WithMany()
                        .HasForeignKey("MeasureInstitutionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonMeasure", "ParentMeasure")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentence", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany("CasePersonSentences")
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "ChangeCaseSessionAct")
                        .WithMany()
                        .HasForeignKey("ChangeCaseSessionActId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "DecreedCourt")
                        .WithMany()
                        .HasForeignKey("DecreedCourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Institution", "ExecInstitution")
                        .WithMany()
                        .HasForeignKey("ExecInstitutionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Institution", "InforcerInstitution")
                        .WithMany()
                        .HasForeignKey("InforcerInstitutionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "OutDocument")
                        .WithMany()
                        .HasForeignKey("OutDocumentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PunishmentActivity", "PunishmentActivity")
                        .WithMany()
                        .HasForeignKey("PunishmentActivityId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SentenceExecPeriod", "SentenceExecPeriod")
                        .WithMany()
                        .HasForeignKey("SentenceExecPeriodId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SentenceResultType", "SentenceResultType")
                        .WithMany()
                        .HasForeignKey("SentenceResultTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentenceBulletin", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnitSign")
                        .WithMany()
                        .HasForeignKey("LawUnitSignId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "OutDocument")
                        .WithMany()
                        .HasForeignKey("OutDocumentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentenceLawbase", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentence", "CasePersonSentence")
                        .WithMany("CasePersonSentenceLawbases")
                        .HasForeignKey("CasePersonSentenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SentenceLawbase", "SentenceLawbase")
                        .WithMany()
                        .HasForeignKey("SentenceLawbaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentencePunishment", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentence", "CasePersonSentence")
                        .WithMany("CasePersonSentencePunishments")
                        .HasForeignKey("CasePersonSentenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SentenceRegimeType", "SentenceRegimeType")
                        .WithMany()
                        .HasForeignKey("SentenceRegimeTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SentenceType", "SentenceType")
                        .WithMany()
                        .HasForeignKey("SentenceTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentencePunishmentCrime", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseCrime", "CaseCrime")
                        .WithMany()
                        .HasForeignKey("CaseCrimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePersonSentencePunishment", "CasePersonSentencePunishment")
                        .WithMany("CasePersonSentencePunishmentCrimes")
                        .HasForeignKey("CasePersonSentencePunishmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRoleInCrime", "PersonRoleInCrime")
                        .WithMany()
                        .HasForeignKey("PersonRoleInCrimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.RecidiveType", "RecidiveType")
                        .WithMany()
                        .HasForeignKey("RecidiveTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSelectionProtokol", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnitDismisal", "CaseLawUnitDismisal")
                        .WithMany()
                        .HasForeignKey("CaseLawUnitDismisalId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtDepartment", "CourtDepartment")
                        .WithMany()
                        .HasForeignKey("CourtDepartmentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtDuty", "CourtDuty")
                        .WithMany()
                        .HasForeignKey("CourtDutyId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeRole", "JudgeRole")
                        .WithMany()
                        .HasForeignKey("JudgeRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "SelectedLawUnit")
                        .WithMany()
                        .HasForeignKey("SelectedLawUnitId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SelectionMode", "SelectionMode")
                        .WithMany()
                        .HasForeignKey("SelectionModeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SelectionProtokolState", "SelectionProtokolState")
                        .WithMany()
                        .HasForeignKey("SelectionProtokolStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSelectionProtokolCompartment", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSelectionProtokol", "CaseSelectionProtokol")
                        .WithMany("CompartmentLawUnits")
                        .HasForeignKey("CaseSelectionProtokolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSelectionProtokolLawUnit", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSelectionProtokol", "CaseSelectionProtokol")
                        .WithMany("LawUnits")
                        .HasForeignKey("CaseSelectionProtokolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SelectionLawUnitState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("CaseSessions")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtHall", "CourtHall")
                        .WithMany()
                        .HasForeignKey("CourtHallId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionState", "SessionState")
                        .WithMany()
                        .HasForeignKey("SessionStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionType", "SessionType")
                        .WithMany()
                        .HasForeignKey("SessionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainIndex", "ActComplainIndex")
                        .WithMany()
                        .HasForeignKey("ActComplainIndexId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainResult", "ActComplainResult")
                        .WithMany()
                        .HasForeignKey("ActComplainResultId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "ActCreatorUser")
                        .WithMany()
                        .HasForeignKey("ActCreatorUserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActISPNDebtorState", "ActISPNDebtorState")
                        .WithMany()
                        .HasForeignKey("ActISPNDebtorStateId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActISPNReason", "ActISPNReason")
                        .WithMany()
                        .HasForeignKey("ActISPNReasonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActKind", "ActKind")
                        .WithMany()
                        .HasForeignKey("ActKindId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActResult", "ActResult")
                        .WithMany()
                        .HasForeignKey("ActResultId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActState", "ActState")
                        .WithMany()
                        .HasForeignKey("ActStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActType", "ActType")
                        .WithMany()
                        .HasForeignKey("ActTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("CaseSessionActs")
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany("CaseSessionActs")
                        .HasForeignKey("CaseSessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "DepersonalizeUser")
                        .WithMany()
                        .HasForeignKey("DepersonalizeUserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "MotiveCreatorUser")
                        .WithMany()
                        .HasForeignKey("MotiveCreatorUserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "RelatedAct")
                        .WithMany()
                        .HasForeignKey("RelatedActId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "SecretaryUser")
                        .WithMany()
                        .HasForeignKey("SecretaryUserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActCompany", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActComplain", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany("CaseSessionActComplains")
                        .HasForeignKey("CaseSessionActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "ComplainDocument")
                        .WithMany()
                        .HasForeignKey("ComplainDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ComplainState", "ComplainState")
                        .WithMany()
                        .HasForeignKey("ComplainStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActComplainPerson", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActComplain", "CaseSessionActComplain")
                        .WithMany("CasePersons")
                        .HasForeignKey("CaseSessionActComplainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActComplainResult", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActResult", "ActResult")
                        .WithMany()
                        .HasForeignKey("ActResultId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActComplain", "CaseSessionActComplain")
                        .WithMany("ComplainResults")
                        .HasForeignKey("CaseSessionActComplainId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "ComplainCase")
                        .WithMany()
                        .HasForeignKey("ComplainCaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "ComplainCourt")
                        .WithMany()
                        .HasForeignKey("ComplainCourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActCoordination", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActCoordinationType", "ActCoordinationType")
                        .WithMany()
                        .HasForeignKey("ActCoordinationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnit", "CaseLawUnit")
                        .WithMany()
                        .HasForeignKey("CaseLawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany("ActCoordination")
                        .HasForeignKey("CaseSessionActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActDivorce", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePersonMan")
                        .WithMany()
                        .HasForeignKey("CasePersonManId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePersonWoman")
                        .WithMany()
                        .HasForeignKey("CasePersonWomanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "OutDocument")
                        .WithMany()
                        .HasForeignKey("OutDocumentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActH", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany("History")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionActLawBase", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LawBase", "LawBase")
                        .WithMany()
                        .HasForeignKey("LawBaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionDoc", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany("CaseSessionDocs")
                        .HasForeignKey("CaseSessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionDocState", "SessionDocState")
                        .WithMany()
                        .HasForeignKey("SessionDocStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionFastDocument", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionFastDocument", "CaseSessionFastDocumentInit")
                        .WithMany()
                        .HasForeignKey("CaseSessionFastDocumentInitId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany()
                        .HasForeignKey("CaseSessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionDocState", "SessionDocState")
                        .WithMany()
                        .HasForeignKey("SessionDocStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionDocType", "SessionDocType")
                        .WithMany()
                        .HasForeignKey("SessionDocTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionFastDocumentH", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionFastDocument", "CaseSessionFastDocument")
                        .WithMany("History")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionH", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany("History")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionMeeting", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany("CaseSessionMeetings")
                        .HasForeignKey("CaseSessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtHall", "CourtHall")
                        .WithMany()
                        .HasForeignKey("CourtHallId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionMeetingType", "SessionMeetingType")
                        .WithMany()
                        .HasForeignKey("SessionMeetingTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionMeetingUser", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionMeeting", "CaseSessionMeeting")
                        .WithMany("CaseSessionMeetingUsers")
                        .HasForeignKey("CaseSessionMeetingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "SecretaryUser")
                        .WithMany()
                        .HasForeignKey("SecretaryUserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionNotificationList", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseLawUnit", "CaseLawUnit")
                        .WithMany()
                        .HasForeignKey("CaseLawUnitId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany()
                        .HasForeignKey("CaseSessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Address", "NotificationAddress")
                        .WithMany()
                        .HasForeignKey("NotificationAddressId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionResult", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany("CaseSessionResults")
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany("CaseSessionResults")
                        .HasForeignKey("CaseSessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultBase", "SessionResultBase")
                        .WithMany()
                        .HasForeignKey("SessionResultBaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResult", "SessionResult")
                        .WithMany()
                        .HasForeignKey("SessionResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.Address", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.BankAccount", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.Counter", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CounterType", "CounterType")
                        .WithMany()
                        .HasForeignKey("CounterTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CounterResetType", "ResetType")
                        .WithMany()
                        .HasForeignKey("ResetTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CounterCase", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Counter", "Counter")
                        .WithMany("CounterCase")
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CounterDocument", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Counter", "Counter")
                        .WithMany("CounterDocument")
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentDirection", "DocumentDirection")
                        .WithMany()
                        .HasForeignKey("DocumentDirectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CounterSessionAct", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Counter", "Counter")
                        .WithMany("CounterSessionAct")
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionActGroup", "SessionActGroup")
                        .WithMany("CounterSessionActs")
                        .HasForeignKey("SessionActGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.Court", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Address", "CourtAddress")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtRegion", "CourtRegion")
                        .WithMany()
                        .HasForeignKey("CourtRegionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "ParentCourt")
                        .WithMany()
                        .HasForeignKey("ParentCourtId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtArchiveCommittee", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtArchiveCommitteeLawUnit", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtArchiveCommittee", "CourtArchiveCommittee")
                        .WithMany()
                        .HasForeignKey("CourtArchiveCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtArchiveIndex", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtArchiveCommittee", "CourtArchiveCommittee")
                        .WithMany()
                        .HasForeignKey("CourtArchiveCommitteeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtArchiveIndexCode", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCode", "CaseCode")
                        .WithMany()
                        .HasForeignKey("CaseCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtArchiveIndex", "CourtArchiveIndex")
                        .WithMany("CourtArchiveIndexCodes")
                        .HasForeignKey("CourtArchiveIndexId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtBankAccount", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyGroup", "MoneyGroup")
                        .WithMany()
                        .HasForeignKey("MoneyGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtDepartment", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseInstance", "CaseInstance")
                        .WithMany()
                        .HasForeignKey("CaseInstanceId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DepartmentType", "DepartmentType")
                        .WithMany()
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtDepartment", "ParentDepartment")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtDepartmentGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtDepartment", "CourtDepartment")
                        .WithMany()
                        .HasForeignKey("CourtDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtGroup", "CourtGroup")
                        .WithMany()
                        .HasForeignKey("CourtGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtDepartmentLawUnit", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtDepartment", "CourtDepartment")
                        .WithMany()
                        .HasForeignKey("CourtDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeDepartmentRole", "JudgeDepartmentRole")
                        .WithMany()
                        .HasForeignKey("JudgeDepartmentRoleId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtDuty", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtDutyLawUnit", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtDuty", "CourtDuty")
                        .WithMany("CourtDutyLawUnits")
                        .HasForeignKey("CourtDutyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtGroupCode", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCode", "CaseCode")
                        .WithMany()
                        .HasForeignKey("CaseCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtGroup", "CourtGroup")
                        .WithMany("CourtGroupCodes")
                        .HasForeignKey("CourtGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtHall", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtJuryFee", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLawUnit", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtOrganization", "CourtOrganization")
                        .WithMany()
                        .HasForeignKey("CourtOrganizationId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany("Courts")
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LawUnitPosition", "LawUnitPosition")
                        .WithMany()
                        .HasForeignKey("LawUnitPositionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LawUnitType", "LawUnitType")
                        .WithMany()
                        .HasForeignKey("LawUnitTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PeriodType", "PeriodType")
                        .WithMany()
                        .HasForeignKey("PeriodTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLawUnitActivity", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeLoadActivity", "JudgeLoadActivity")
                        .WithMany()
                        .HasForeignKey("JudgeLoadActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLawUnitGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtGroup", "CourtGroup")
                        .WithMany("CourtLawUnitGroups")
                        .HasForeignKey("CourtGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLawUnitOrder", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLawUnitSubstitution", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "SubstituteLawUnit")
                        .WithMany()
                        .HasForeignKey("SubstituteLawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLoadPeriod", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtDuty", "CourtDuty")
                        .WithMany()
                        .HasForeignKey("CourtDutyId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtGroup", "CourtGroup")
                        .WithMany()
                        .HasForeignKey("CourtGroupId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtLoadResetPeriod", "CourtLoadResetPeriod")
                        .WithMany()
                        .HasForeignKey("CourtLoadResetPeriodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLoadPeriodLawUnit", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtLoadPeriod", "CourtLoadPeriod")
                        .WithMany()
                        .HasForeignKey("CourtLoadPeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtLoadResetPeriod", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtOrganization", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.OrganizationLevel", "OrganizationLevel")
                        .WithMany()
                        .HasForeignKey("OrganizationLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtOrganization", "ParentOrganization")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtOrganizationCaseGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtOrganization", "CourtOrganization")
                        .WithMany()
                        .HasForeignKey("CourtOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtPosDevice", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtBankAccount", "CourtBankAccount")
                        .WithMany()
                        .HasForeignKey("CourtBankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtRegion", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtRegion", "ParentRegion")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.CourtRegionArea", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtRegion", "CourtRegion")
                        .WithMany("Areas")
                        .HasForeignKey("CourtRegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.EMailFile", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.EMailMessage", "EMailMessage")
                        .WithMany("EMailFiles")
                        .HasForeignKey("EMailMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.MongoFile", "MongoFile")
                        .WithMany()
                        .HasForeignKey("MongoFileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.EMailMessage", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EMailMessageState", "EMailMessageState")
                        .WithMany()
                        .HasForeignKey("EMailMessageStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.EpepUser", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EpepUserType", "EpepUserType")
                        .WithMany()
                        .HasForeignKey("EpepUserTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawyerLawUnit")
                        .WithMany()
                        .HasForeignKey("LawyerLawUnitId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.EpepUserAssignment", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.EpepUser", "EpepUser")
                        .WithMany()
                        .HasForeignKey("EpepUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.ExcelReportCaseFilter", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCode", "CaseCode")
                        .WithMany()
                        .HasForeignKey("CaseCodeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.ExcelReportTemplate", "ExcelReportTemplate")
                        .WithMany()
                        .HasForeignKey("ExcelReportTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.ExcelReportData", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.ExcelReportTemplate", "ExcelReportTemplate")
                        .WithMany()
                        .HasForeignKey("ExcelReportTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.ExcelReportTemplate", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.HtmlTemplate", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.HtmlTemplateType", "HtmlTemplateType")
                        .WithMany()
                        .HasForeignKey("HtmlTemplateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.HtmlTemplateLink", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.HtmlTemplate", "HtmlTemplate")
                        .WithMany("HtmlTemplateLinks")
                        .HasForeignKey("HtmlTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.HtmlTemplateParamLink", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.HtmlTemplate", "HtmlTemplate")
                        .WithMany()
                        .HasForeignKey("HtmlTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.HtmlTemplateParam", "HtmlTemplateParam")
                        .WithMany()
                        .HasForeignKey("HtmlTemplateParamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.Institution", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtRegion", "CourtRegion")
                        .WithMany()
                        .HasForeignKey("CourtRegionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.InstitutionType", "InstitutionType")
                        .WithMany()
                        .HasForeignKey("InstitutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.UicType", "UicType")
                        .WithMany()
                        .HasForeignKey("UicTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.InstitutionAddress", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.IntegrationKey", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.IntegrationType", "IntegrationType")
                        .WithMany()
                        .HasForeignKey("IntegrationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeSeniority", "JudgeSeniority")
                        .WithMany()
                        .HasForeignKey("JudgeSeniorityId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LawUnitType", "LawUnitType")
                        .WithMany()
                        .HasForeignKey("LawUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.UicType", "UicType")
                        .WithMany()
                        .HasForeignKey("UicTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.LawUnitAddress", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.LawUnitH", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany("History")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeSeniority", "JudgeSeniority")
                        .WithMany()
                        .HasForeignKey("JudgeSeniorityId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LawUnitType", "LawUnitType")
                        .WithMany()
                        .HasForeignKey("LawUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.UicType", "UicType")
                        .WithMany()
                        .HasForeignKey("UicTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.LawUnitSpeciality", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany("LawUnitSpeciality")
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.MQEpep", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.IntegrationState", "IntegrationState")
                        .WithMany()
                        .HasForeignKey("IntegrationStateId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.IntegrationType", "IntegrationType")
                        .WithMany()
                        .HasForeignKey("IntegrationTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.Person", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Person", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.UicType", "UicType")
                        .WithMany()
                        .HasForeignKey("UicTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.PersonAddress", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.PriceCol", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.PriceDesc", "PriceDesc")
                        .WithMany("PriceCols")
                        .HasForeignKey("PriceDescId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.PriceDesc", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.PriceVal", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.PriceCol", "Col")
                        .WithMany("PriceVals")
                        .HasForeignKey("PriceColId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.PriceDesc", "PriceDesc")
                        .WithMany("PriceVals")
                        .HasForeignKey("PriceDescId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.Report", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.ReportRequest", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.WorkNotification", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseDeadline", "CaseDeadline")
                        .WithMany()
                        .HasForeignKey("CaseDeadlineId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "FromCourt")
                        .WithMany()
                        .HasForeignKey("FromCourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.WorkNotificationType", "WorkNotificationType")
                        .WithMany()
                        .HasForeignKey("WorkNotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.WorkTask", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtOrganization", "CourtOrganization")
                        .WithMany()
                        .HasForeignKey("CourtOrganizationId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.WorkTask", "ParentTask")
                        .WithMany()
                        .HasForeignKey("ParentTaskId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskAction", "TaskAction")
                        .WithMany()
                        .HasForeignKey("TaskActionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskExecution", "TaskExecution")
                        .WithMany()
                        .HasForeignKey("TaskExecutionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskState", "TaskState")
                        .WithMany()
                        .HasForeignKey("TaskStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Common.WorkingDay", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DayType", "DayType")
                        .WithMany()
                        .HasForeignKey("DayTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryAccount", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryArea", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryAreaAddress", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryArea", "DeliveryArea")
                        .WithMany()
                        .HasForeignKey("DeliveryAreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryItem", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseNotification", "CaseNotification")
                        .WithMany("DeliveryItems")
                        .HasForeignKey("CaseNotificationId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryArea", "DeliveryArea")
                        .WithMany()
                        .HasForeignKey("DeliveryAreaId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "FromCourt")
                        .WithMany()
                        .HasForeignKey("FromCourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.HtmlTemplate", "HtmlTemplate")
                        .WithMany()
                        .HasForeignKey("HtmlTemplateId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationState", "NotificationState")
                        .WithMany()
                        .HasForeignKey("NotificationStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryItemOper", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryArea", "DeliveryArea")
                        .WithMany()
                        .HasForeignKey("DeliveryAreaId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Delivery.DeliveryItem", "DeliveryItem")
                        .WithMany("DeliveryItemOpers")
                        .HasForeignKey("DeliveryItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryOper", "DeliveryOper")
                        .WithMany()
                        .HasForeignKey("DeliveryOperId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryReason", "DeliveryReason")
                        .WithMany()
                        .HasForeignKey("DeliveryReasonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationState", "NotificationState")
                        .WithMany()
                        .HasForeignKey("NotificationStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.Document", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtOrganization", "CourtOrganization")
                        .WithMany()
                        .HasForeignKey("CourtOrganizationId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryGroup", "DeliveryGroup")
                        .WithMany()
                        .HasForeignKey("DeliveryGroupId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryType", "DeliveryType")
                        .WithMany()
                        .HasForeignKey("DeliveryTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentDirection", "DocumentDirection")
                        .WithMany()
                        .HasForeignKey("DocumentDirectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentGroup", "DocumentGroup")
                        .WithMany()
                        .HasForeignKey("DocumentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentCaseInfo", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany("DocumentCaseInfo")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentDecision", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DecisionType", "DecisionType")
                        .WithMany()
                        .HasForeignKey("DecisionTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentDecisionState", "DocumentDecisionState")
                        .WithMany()
                        .HasForeignKey("DocumentDecisionStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "OutDocument")
                        .WithMany()
                        .HasForeignKey("OutDocumentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserDecision")
                        .WithMany()
                        .HasForeignKey("UserDecisionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentDecisionCase", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DecisionType", "DecisionType")
                        .WithMany()
                        .HasForeignKey("DecisionTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentDecision", "DocumentDecision")
                        .WithMany()
                        .HasForeignKey("DocumentDecisionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentInstitutionCaseInfo", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany("DocumentInstitutionCaseInfo")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.InstitutionCaseType", "InstitutionCaseType")
                        .WithMany()
                        .HasForeignKey("InstitutionCaseTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentLink", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentDirection", "DocumentDirection")
                        .WithMany()
                        .HasForeignKey("DocumentDirectionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany("DocumentLinks")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "PrevDocument")
                        .WithMany()
                        .HasForeignKey("PrevDocumentId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentPerson", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany("DocumentPersons")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MilitaryRang", "MilitaryRang")
                        .WithMany()
                        .HasForeignKey("MilitaryRangId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonMaturity", "PersonMaturity")
                        .WithMany()
                        .HasForeignKey("PersonMaturityId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRole", "PersonRole")
                        .WithMany()
                        .HasForeignKey("PersonRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.UicType", "UicType")
                        .WithMany()
                        .HasForeignKey("UicTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentPersonAddress", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentPerson", "DocumentPerson")
                        .WithMany("Addresses")
                        .HasForeignKey("DocumentPersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentResolution", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany("DocumentResolutions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "JudgeDecisionLawunit")
                        .WithMany()
                        .HasForeignKey("JudgeDecisionLawunitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "JudgeDecisionUser")
                        .WithMany()
                        .HasForeignKey("JudgeDecisionUserId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ResolutionState", "ResolutionState")
                        .WithMany()
                        .HasForeignKey("ResolutionStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ResolutionType", "ResolutionType")
                        .WithMany()
                        .HasForeignKey("ResolutionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserDecision")
                        .WithMany()
                        .HasForeignKey("UserDecisionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Documents.DocumentTemplate", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentGroup", "DocumentGroup")
                        .WithMany()
                        .HasForeignKey("DocumentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany("DocumentTemplates")
                        .HasForeignKey("DocumentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentKind", "DocumentKind")
                        .WithMany()
                        .HasForeignKey("DocumentKindId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentTemplateState", "DocumentTemplateState")
                        .WithMany()
                        .HasForeignKey("DocumentTemplateStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.HtmlTemplate", "HtmlTemplate")
                        .WithMany()
                        .HasForeignKey("HtmlTemplateId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EISPP.EisppEventItem", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany()
                        .HasForeignKey("CaseSessionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.MQEpep", "MQEpep")
                        .WithMany()
                        .HasForeignKey("MQEpepId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EkDistrict", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.EkCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EkEkatte", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.EkCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.EkDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.EkMunincipality", "Munincipality")
                        .WithMany()
                        .HasForeignKey("MunicipalId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EkMunincipality", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.EkDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.EkRegion", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.EkEkatte", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnit")
                        .WithMany()
                        .HasForeignKey("LawUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Messages.News", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Messages.NewsUser", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Messages.News", "News")
                        .WithMany("NewsUsers")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ExchangeDoc", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "OutDocument")
                        .WithMany()
                        .HasForeignKey("OutDocumentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ExchangeDocExecList", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Money.ExchangeDoc", "ExchangeDoc")
                        .WithMany("ExchangeDocExecLists")
                        .HasForeignKey("ExchangeDocId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Money.ExecList", "ExecList")
                        .WithMany("ExchangeDocExecLists")
                        .HasForeignKey("ExecListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ExecList", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExecListLawBase", "ExecListLawBase")
                        .WithMany()
                        .HasForeignKey("ExecListLawBaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExecListType", "ExecListType")
                        .WithMany()
                        .HasForeignKey("ExecListTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.LawUnit", "LawUnitSign")
                        .WithMany()
                        .HasForeignKey("LawUnitSignId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "OutDocument")
                        .WithMany()
                        .HasForeignKey("OutDocumentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ExecListObligation", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Money.ExecList", "ExecList")
                        .WithMany("ExecListObligations")
                        .HasForeignKey("ExecListId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Money.Obligation", "Obligation")
                        .WithMany("ExecListObligations")
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ExpenseOrder", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExpenseOrderState", "ExpenseOrderState")
                        .WithMany()
                        .HasForeignKey("ExpenseOrderStateId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ExpenseOrderObligation", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Money.ExpenseOrder", "ExpenseOrder")
                        .WithMany("ExpenseOrderObligations")
                        .HasForeignKey("ExpenseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Money.Obligation", "Obligation")
                        .WithMany("ExpenseOrderObligations")
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.Obligation", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSession", "CaseSession")
                        .WithMany()
                        .HasForeignKey("CaseSessionId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionMeeting", "CaseSessionMeeting")
                        .WithMany()
                        .HasForeignKey("CaseSessionMeetingId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyFeeType", "MoneyFeeType")
                        .WithMany()
                        .HasForeignKey("MoneyFeeTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyFineType", "MoneyFineType")
                        .WithMany()
                        .HasForeignKey("MoneyFineTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyType", "MoneyType")
                        .WithMany()
                        .HasForeignKey("MoneyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.UicType", "UicType")
                        .WithMany()
                        .HasForeignKey("UicTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ObligationPayment", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Money.Obligation", "Obligation")
                        .WithMany("ObligationPayments")
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Money.Payment", "Payment")
                        .WithMany("ObligationPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserDisabled")
                        .WithMany()
                        .HasForeignKey("UserDisabledId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.ObligationReceive", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CasePerson", "CasePerson")
                        .WithMany()
                        .HasForeignKey("CasePersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExecListType", "ExecListType")
                        .WithMany()
                        .HasForeignKey("ExecListTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Money.Obligation", "Obligation")
                        .WithMany("ObligationReceives")
                        .HasForeignKey("ObligationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.UicType", "UicType")
                        .WithMany()
                        .HasForeignKey("UicTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.Payment", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtBankAccount", "CourtBankAccount")
                        .WithMany()
                        .HasForeignKey("CourtBankAccountId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserDisabled")
                        .WithMany()
                        .HasForeignKey("UserDisabledId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Money.PosPaymentResult", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.CourtBankAccount", "CourtBankAccount")
                        .WithMany()
                        .HasForeignKey("CourtBankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Money.Payment", "Payment")
                        .WithMany("PosPaymentResults")
                        .HasForeignKey("PaymentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainIndexCourtTypeCaseGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainIndex", "ActComplainIndex")
                        .WithMany()
                        .HasForeignKey("ActComplainIndexId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainResultCaseType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainResult", "ActComplainResult")
                        .WithMany()
                        .HasForeignKey("ActComplainResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainResultGrouping", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActComplainResult", "ActComplainResult")
                        .WithMany()
                        .HasForeignKey("ActComplainResultId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActKind", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActType", "ActType")
                        .WithMany()
                        .HasForeignKey("ActTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActResultGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActResult", "ActResult")
                        .WithMany()
                        .HasForeignKey("ActResultId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActResultGrouping", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActResult", "ActResult")
                        .WithMany()
                        .HasForeignKey("ActResultId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseInstance", "FromCaseInstance")
                        .WithMany()
                        .HasForeignKey("FromCaseInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseInstance", "ToCaseInstance")
                        .WithMany()
                        .HasForeignKey("ToCaseInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActTypeCourtLink", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActType", "ActType")
                        .WithMany()
                        .HasForeignKey("ActTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseInstance", "CaseInstance")
                        .WithMany()
                        .HasForeignKey("CaseInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActTypeSessionTypeGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActType", "ActType")
                        .WithMany()
                        .HasForeignKey("ActTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCodeGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCode", "CaseCode")
                        .WithMany()
                        .HasForeignKey("CaseCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCodeGrouping", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCode", "CaseCode")
                        .WithMany()
                        .HasForeignKey("CaseCodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadAddActivityIndex", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadAddActivity", "CaseLoadAddActivity")
                        .WithMany()
                        .HasForeignKey("CaseLoadAddActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadCorrectionActivity", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseInstance", "CaseInstance")
                        .WithMany()
                        .HasForeignKey("CaseInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadCorrectionActivityIndex", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseInstance", "CaseInstance")
                        .WithMany()
                        .HasForeignKey("CaseInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadCorrectionActivity", "CaseLoadCorrectionActivity")
                        .WithMany()
                        .HasForeignKey("CaseLoadCorrectionActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadElementGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCode", "CaseCode")
                        .WithMany()
                        .HasForeignKey("CaseCodeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseInstance", "CaseInstance")
                        .WithMany()
                        .HasForeignKey("CaseInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ProcessPriority", "ProcessPriority")
                        .WithMany()
                        .HasForeignKey("ProcessPriorityId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadElementType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadElementGroup", "CaseLoadElementGroup")
                        .WithMany("CaseLoadElementTypes")
                        .HasForeignKey("CaseLoadElementGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadElementType", "ReplaceCaseLoadElementType")
                        .WithMany()
                        .HasForeignKey("ReplaceCaseLoadElementTypeId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadElementTypeRule", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActType", "ActType")
                        .WithMany()
                        .HasForeignKey("ActTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseLoadElementType", "CaseLoadElementType")
                        .WithMany("CaseLoadElementTypeRules")
                        .HasForeignKey("CaseLoadElementTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResult", "SessionResult")
                        .WithMany()
                        .HasForeignKey("SessionResultId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionType", "SessionType")
                        .WithMany()
                        .HasForeignKey("SessionTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "UserExpired")
                        .WithMany()
                        .HasForeignKey("UserExpiredId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyClaimType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyClaimGroup", "CaseMoneyClaimGroup")
                        .WithMany()
                        .HasForeignKey("CaseMoneyClaimGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyCollectionKind", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyCollectionGroup", "CaseMoneyCollectionGroup")
                        .WithMany()
                        .HasForeignKey("CaseMoneyCollectionGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyCollectionType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseMoneyCollectionGroup", "CaseMoneyCollectionGroup")
                        .WithMany()
                        .HasForeignKey("CaseMoneyCollectionGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseReason", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseInstance", "CaseInstance")
                        .WithMany()
                        .HasForeignKey("CaseInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseTypeCharacter", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCharacter", "CaseCharacter")
                        .WithMany()
                        .HasForeignKey("CaseCharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseTypeCode", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCode", "CaseCode")
                        .WithMany()
                        .HasForeignKey("CaseCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseTypeUnit", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseTypeUnitCount", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseTypeUnit", "CaseTypeUnit")
                        .WithMany("CaseTypeUnitCounts")
                        .HasForeignKey("CaseTypeUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeRole", "JudgeRole")
                        .WithMany()
                        .HasForeignKey("JudgeRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtTypeCaseType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtTypeSessionType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionType", "SessionType")
                        .WithMany()
                        .HasForeignKey("SessionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeadlineType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeadlineGroup", "DeadlineGroup")
                        .WithMany()
                        .HasForeignKey("DeadlineGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryDirectionGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryGroup", "DeliveryGroup")
                        .WithMany()
                        .HasForeignKey("DeliveryGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentDirection", "DocumentDirection")
                        .WithMany()
                        .HasForeignKey("DocumentDirectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryOperState", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryOper", "DeliveryOper")
                        .WithMany()
                        .HasForeignKey("DeliveryOperId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationState", "NotificationState")
                        .WithMany()
                        .HasForeignKey("NotificationStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryStateReason", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryReason", "DeliveryReason")
                        .WithMany()
                        .HasForeignKey("DeliveryReasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationState", "NotificationState")
                        .WithMany()
                        .HasForeignKey("NotificationStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DeliveryGroup", "DeliveryGroup")
                        .WithMany()
                        .HasForeignKey("DeliveryGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentKind", "DocumentKind")
                        .WithMany()
                        .HasForeignKey("DocumentKindId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentKind", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentDirection", "DocumentDirection")
                        .WithMany()
                        .HasForeignKey("DocumentDirectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentRegisterLink", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentRegister", "DocumentRegister")
                        .WithMany()
                        .HasForeignKey("DocumentRegisterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentRegisterType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentRegister", "DocumentRegister")
                        .WithMany()
                        .HasForeignKey("DocumentRegisterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentGroup", "DocumentGroup")
                        .WithMany()
                        .HasForeignKey("DocumentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.HtmlTemplateType", "HtmlTemplateType")
                        .WithMany()
                        .HasForeignKey("HtmlTemplateTypeId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentTypeCaseType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentTypeCourtType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentTypeDecisionType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DecisionType", "DecisionType")
                        .WithMany()
                        .HasForeignKey("DecisionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentTypeGrouping", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EisppTblElement", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.EisppTbl", "EisppTbl")
                        .WithMany()
                        .HasForeignKey("EisppTblCode")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExcelReportIndex", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExecListLawBaseCaseGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ExecListLawBase", "ExecListLawBase")
                        .WithMany()
                        .HasForeignKey("ExecListLawBaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeLoadActivityIndex", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.JudgeLoadActivity", "JudgeLoadActivity")
                        .WithMany()
                        .HasForeignKey("JudgeLoadActivityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LawUnitTypePosition", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LawUnitType", "LawUnitType")
                        .WithMany()
                        .HasForeignKey("LawUnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LawUnitPosition", "LawUnitPosition")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LoadGroupLink", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseInstance", "CaseInstance")
                        .WithMany()
                        .HasForeignKey("CaseInstanceId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LoadGroup", "LoadGroup")
                        .WithMany("LoadGroupLinks")
                        .HasForeignKey("LoadGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LoadGroupLinkCode", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseCode", "CaseCode")
                        .WithMany()
                        .HasForeignKey("CaseCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LoadGroupLink", "LoadGroupLink")
                        .WithMany("GroupCodes")
                        .HasForeignKey("LoadGroupLinkId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyFeeDocumentGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.DocumentGroup", "DocumentGroup")
                        .WithMany()
                        .HasForeignKey("DocumentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyFeeType", "MoneyFeeType")
                        .WithMany()
                        .HasForeignKey("MoneyFeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyFineCaseGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyFineType", "MoneyFineType")
                        .WithMany("MoneyFineCaseGroups")
                        .HasForeignKey("MoneyFineTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.MoneyGroup", "MoneyGroup")
                        .WithMany()
                        .HasForeignKey("MoneyGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationDeliveryGroupState", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationDeliveryGroup", "NotificationDeliveryGroup")
                        .WithMany()
                        .HasForeignKey("NotificationDeliveryGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationState", "NotificationState")
                        .WithMany()
                        .HasForeignKey("NotificationStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationDeliveryType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationDeliveryGroup", "NotificationDeliveryGroup")
                        .WithMany()
                        .HasForeignKey("NotificationDeliveryGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.HtmlTemplateType", "HtmlTemplateType")
                        .WithMany()
                        .HasForeignKey("HtmlTemplateTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.NotificationMode", "NotificationMode")
                        .WithMany()
                        .HasForeignKey("NotificationModeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRole", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.RoleKind", "RoleKind")
                        .WithMany()
                        .HasForeignKey("RoleKindId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRoleCaseType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRole", "PersonRole")
                        .WithMany()
                        .HasForeignKey("PersonRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRoleGrouping", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRole", "PersonRole")
                        .WithMany()
                        .HasForeignKey("PersonRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRoleLinkDirection", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.LinkDirection", "LinkDirection")
                        .WithMany()
                        .HasForeignKey("LinkDirectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.PersonRole", "PersonRole")
                        .WithMany()
                        .HasForeignKey("PersonRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionActGroup", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionActType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.ActType", "ActType")
                        .WithMany()
                        .HasForeignKey("ActTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionActGroup", "SessionActGroup")
                        .WithMany()
                        .HasForeignKey("SessionActGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResult", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultGroup", "SessionResultGroup")
                        .WithMany()
                        .HasForeignKey("SessionResultGroupId");
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultBase", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultGroup", "SessionResultGroup")
                        .WithMany()
                        .HasForeignKey("SessionResultGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultBaseGrouping", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultBase", "SessionResultBase")
                        .WithMany()
                        .HasForeignKey("SessionResultBaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultFilterRule", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CaseGroup", "CaseGroup")
                        .WithMany()
                        .HasForeignKey("CaseGroupId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.CourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResult", "SessionResult")
                        .WithMany()
                        .HasForeignKey("SessionResultId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResultGrouping", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionResult", "SessionResult")
                        .WithMany()
                        .HasForeignKey("SessionResultId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionTypeState", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionState", "SessionState")
                        .WithMany()
                        .HasForeignKey("SessionStateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.SessionType", "SessionType")
                        .WithMany()
                        .HasForeignKey("SessionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskAction", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskTypeSourceType", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IOWebApplication.Infrastructure.Data.Models.Regix.RegixReport", b =>
                {
                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Cases.CaseSessionAct", "CaseSessionAct")
                        .WithMany()
                        .HasForeignKey("CaseSessionActId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Common.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Nomenclatures.RegixType", "RegixType")
                        .WithMany()
                        .HasForeignKey("RegixTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOWebApplication.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
