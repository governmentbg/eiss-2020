@using  IOWebApplication.Infrastructure.Models.ViewModels.Delivery;
@using IOWebApplication.Infrastructure.Constants;
@using IOWebApplication.Core.Helper.GlobalConstants;
@using IOWebApplication.Extensions
@model DeliveryItemTransFilterVM;
@inject IViewLocalizer Localizer
@section breadcrumb{
    @if (ViewBag.breadcrumbs != null)
    {
        <partial name="Breadcrumbs" model="@(List<IOWebApplication.Infrastructure.Models.ViewModels.Common.BreadcrumbsVM>)ViewBag.breadcrumbs" />
    }
}
@{
    ViewData["Title"] = DeliveryItemTransFilterVM.GetTitle(Model.ToNotificationStateId);
    ViewData["DateFrom"] = DeliveryItemTransFilterVM.GetDateFromLabel(Model.ToNotificationStateId);
    ViewData["DateTo"] = DeliveryItemTransFilterVM.GetDateToLabel(Model.ToNotificationStateId);
    bool showCheckOnRegNum = false;
}
<form id="formFilter" asp-action="Edit" method="post">
   @* @Html.HiddenFor(x => x.NotificationStateId)*@
    @Html.HiddenFor(x => x.ToNotificationStateId)
    <div class="row">
        <div class="col-md-2">
            @Html.EditorFor(x => x.NotificationStateId, "GenericDropDown")
        </div>
        <div class="col-md-2">
            @Html.EditorFor(x => x.NotificationTypeId, "GenericDropDown")
        </div>
        @if (Model.ToNotificationStateId != NomenclatureConstants.NotificationState.Send)
        {
            <div class="col-md-2">
                @Html.EditorFor(x => x.RegDateFrom)
            </div>
            <div class="col-md-2">
                @Html.EditorFor(x => x.RegDateTo)
            </div>
        }
        <div class="col-md-2">
            @Html.EditorFor(x => x.DateFrom, "DateTimeViewDataLabel")
        </div>
        <div class="col-md-2">
            @Html.EditorFor(x => x.DateTo, "DateTimeViewDataLabel")
        </div>
        @if (Model.ToNotificationStateId == NomenclatureConstants.NotificationState.Send)
        {
            <div class="col-md-2">
            </div>
        }
        <div class="col-md-2 pb-15">
            <br>
            <button type="button" class="btn btn-primary" id="btnFilter" name="btnFilter" onclick="LoadDeliveryTransItems()" value="Филтриране" title="Филтриране">
                Филтриране
                <i class="fa fa-search" title="Търсене"></i>
            </button>
        </div>
    </div>
    <hr>
    <div class="row for-show" style = "display:none">
        <div class="col-md-6">
            <label for="ForId" class="control-label">@Html.Raw(DeliveryItemTransFilterVM.GetForIdLabel(Model.ToNotificationStateId))</label>
            @Html.DropDownListFor(model => model.ForId, new List<SelectListItem>(), new { @class = "form-control" })
            <br />
        </div>
    </div>

    <div class="row for-show" style = "display:none">
        <div class="col-md-2 col-sm-3">
            <div class="form-group">
                <label asp-for="@showCheckOnRegNum" class="control-label">
                    @Html.CheckBoxFor(model => showCheckOnRegNum)
                    <label>&nbsp;Маркиране</label>
                </label>
            </div>
        </div>
        <div class="col-md-2 col-sm-3 check-on-regnum">
            <div class="form-group">
                <label for="regNumber" class="control-label">Въведете баркод:</label>
                <input name="regNumber" id="regNumber" class="form-control" />
            </div>
        </div>
        <div class="col-md-2 col-sm-3 check-on-regnum">
            <div class="form-group">
                <label for="check_button" class="control-label"><br /></label>
                <button type="button" id="check_button" name="check_button" onclick="findAndCheckDeliveryItem()" class="btn btn-success btn-block">Маркиране</button>
            </div>
        </div>
    </div>
</form>

<div class="row for-show" style = "display:none">
    <div class="col-md-12">
        <table id="mainTable" class="table table-hover table-striped"></table>
    </div>
</div>
<form name="formPostEdit" id="formPostEdit" action="@Url.Action("Edit")" method="post">
    <input type="hidden" id="filterJson" name="filterJson" value="">
</form>
<form name="formPrintPdfsPost" id="formPrintPdfsPost" action="@Url.Action("PrintPdfsFromDeliveryItemIds", "CaseNotification")" method="post">
    <input type="hidden" id="deliveryItemIdsJson" name="deliveryItemIdsJson" value="">
</form>
<div class="row for-show" style = "display:none">
    <div class="col-md-12">
        <label id="labelRecap" name="labelRecap">Маркирани </label>
    </div>
</div>

<div class="row for-show btn-submit" style = "display:none">
    <div class="col-md-2">
        <button id="submit_button" onclick="submitAllCheckDeliveryItem()" class="btn btn-success btn-block">@Html.Raw(DeliveryItemTransFilterVM.GetButtonLabel(Model.ToNotificationStateId))</button>
    </div>
    <div class="col-md-2">
        <button id="print_button" onclick="printAllCheckDeliveryItem()" class="btn btn-def">Печат на маркираните</button>
    </div>
</div>
@if (Model.ToNotificationStateId == NomenclatureConstants.NotificationState.ForDelivery || Model.ToNotificationStateId == NomenclatureConstants.NotificationState.Received)
{
<hr>
<div class="row for-show" style="display:none">
    <div class="col-md-2">
        @Html.EditorFor(x => x.NewCourtId, "GenericDropDown")
    </div>
    <div class="col-md-2">
        @Html.EditorFor(x => x.NewDeliveryAreaId, "GenericDropDown")
    </div>
    <div class="col-md-2">
        @Html.EditorFor(x => x.NewLawUnitType, "GenericDropDown")
    </div>
    <div class="col-md-3">
        @Html.EditorFor(x => x.NewLawUnitId, "GenericDropDown")
    </div>
    <div class="col-md-2" style="margin-top:25px;">
        <button id="submit_button" onclick="submitAllCheckDeliveryItemChange()" class="btn btn-success btn-block">Промени</button>
    </div>
</div>
}
<script>
    var dataSet = [];

    $(function () {
        var table = $('#mainTable').DataTable({
            data: dataSet,
            serverSide: false,
            'order': [[1, 'asc']],
            columnDefs: [{
                targets: [0],
                orderData: [8]
            }],
            "paging": false,
            "lengthMenu": [[-1], ["Покажи всички"]],
             dom: '<"row"<"col-sm-6 dataTables_buttons"B><"col-sm-6">>rtp',
             buttons: {
                dom: {
                    button: {
                        tag: 'button',
                        className: 'btn'
                    },
                    container: {
                        className: ''
                    }
                },
                buttons: ['io_colvis', 'io_excel', 'io_pdf', 'io_print']
             },
             columns: [
                {
                    name: "checkRow",
                    data: "checkRow",
                    title: '<input type="checkbox" id="select-all" onclick="selectAll();">',
                    sortable: true,
                    searchable: false,
                     "render": function (item, type, row, meta) {
                         if (type === 'display' || type === 'filter') {
                             let checkVal = (row.checkRow ? " checked" : "");
                             return '<input id = "chk' + row.id + '" type="checkbox" value="' + row.id + '" onchange="checkedRowChange(' + row.id + ')"' + checkVal +'>' ;
                         }
                         return row.checkRow;
                    }
                },
                {
                     name: 'regNumber',
                     data: 'regNumber',
                     title: 'Рег. номер',
                     width: 100,
                     "render": function (item, type, row, meta) {
                         if (row.caseNotificationId > 0) {
                             return '<a style="cursor: pointer;" data-toggle="tooltip" onclick="printNotificationRaw(' + row.caseNotificationId + ')" title="Печат">' + row.regNumber + '</a>';
                         } else {
                             return row.regNumber;
                         }
                     },
                     sortable: true,
                     searchable: true
                 },
                 {
                     name: 'notificationType',
                     data: 'notificationType',
                     title: 'Тип на документа',
                     width: 100,
                     sortable: true,
                     searchable: false
                 },
                 {
                     name: 'caseInfo',
                     data: 'caseInfo',
                     title: 'Към дело',
                     sortable: true,
                     searchable: false
                 },
                {
                    name: 'personName',
                    data: 'personName',
                    title: 'Име на лицето',
                    sortable: true,
                    searchable: false
                },
                {
                    name: 'address',
                    data: 'address',
                    title: 'Адрес',
                    sortable: true,
                    searchable: false
                },
                {
                    name: 'lawUnitName',
                    data: 'lawUnitName',
                    title: 'Призовкар',
                    sortable: true,
                    searchable: false
                },
                {
                    name: 'areaName',
                    data: 'areaName',
                    title: 'Район',
                    sortable: true,
                    searchable: false
                 },
                 {
                     name: 'checkRowOrder',
                     data: 'checkRowOrder',
                     title: 'Сортиране',
                     sortable: true,
                     searchable: false,
                     className: 'hidden text-center noExport'
                 }
            ]
        });
    });

    function selectAll() {
        var check = $("#select-all").is(':checked');
        var rows = $('#mainTable').DataTable().rows({ 'search': 'applied' }).nodes();
        $('input[type="checkbox"]', rows).prop('checked', check);
        setMarkedLabel();
    }

    function checkedRowChange(id) {
        var isCheck = $('#chk' + id.toString()).prop('checked');
        let idxChange = -1;
        let dataChange = null;
        $('#mainTable').DataTable()
            .rows(function (idx, data, node) {
                if (data.id === id) {
                    data.checkRow = isCheck;
                    data.checkRowOrder = (isCheck ? "0Z" : "1Z") + data.regNumber;
                    idxChange = idx;
                    dataChange = data;
                }
            })
        if (idxChange >= 0) {
            $('#mainTable').dataTable().fnUpdate(dataChange, idxChange, undefined, false);
        }
        setMarkedLabel();
    }

    function LoadDeliveryTransItems() {
        $('#btnFilter').attr("disabled", true);
        $('#filterJson').val(JSON.stringify(getFormData($('#formFilter'))));
        LoadForId_DDL();
        $('.for-show').show();
        $('#btnFilter').attr("disabled", false);
    }

    function LoadForId_DDL() {
        var filterData = getFormData($('#formFilter'));
        var oldVal = $("#ForId").val();
        $.ajax({
            type: "POST",
            url: "@Url.Action("LoadForId_DDL")",
            dataType: "json",
            cache: false,
            data: { filterData: filterData },
            success: function (response) {
                $('#ForId').empty().trigger("change");
                $('#ForId').select2({
                    language: "bg",
                    data: response.forId_ddl
                });
                $("#ForId").val(oldVal).trigger('change');
                if ($("#ForId").prop("selectedIndex") == -1) {
                    $("#ForId").prop("selectedIndex", 0).trigger('change');
                }
                var filterData = getFormData($('#formFilter'));
                filterData.ForId = $("#ForId").val();
                $('#filterJson').val(JSON.stringify(filterData));
                LoadDataSet();
            },
            complete: function () { },
            error: log_ajax_err
        });
    }

    function LoadDataSet() {
        if ($("#ForId").val() == "-2") {
            $('.btn-submit').hide();
        } else {
            $('.btn-submit').show();
        }
        var filterData = JSON.parse($('#filterJson').val());
        $.ajax({
            type: "POST",
            url: "@Url.Action("ListDataTrans")",
            dataType: "json",
            cache: false,
            data: { filterData: filterData },
            success: function (response) {
                dataSet = response;
                $("#select-all").prop('checked', false);
                var table = $('#mainTable').DataTable();
                table.clear();
                table.rows.add(dataSet).draw();
                setMarkedLabel();
            },
            complete: function () { },
            error: log_ajax_err
        });
    }

    function getMarkedDeliveryItemIds() {
        var deliveryItemIds = [];
        $('#mainTable').DataTable().$('input[type="checkbox"]').each(function () {
             if (this.checked) {
                 deliveryItemIds.push(this.value);
            }
        });
        return deliveryItemIds;
    }

    function submitAllCheckDeliveryItem() {
        if ($('#mainTable').DataTable() === undefined) return;

        var deliveryItemIds = getMarkedDeliveryItemIds();

        if (deliveryItemIds.length === 0) {
            messageHelper.ShowErrorMessage('Изберете поне еднa призовка/съобщение.');
            $(window).scrollTop(0);
            return;
        }
        var filterData = JSON.parse($('#filterJson').val());
        $.ajax({
            type: "POST",
            url: "@Url.Action("SaveTrans")",
            dataType: "json",
            cache: false,
            data: { deliveryItemIdsJson: deliveryItemIds, filterData : filterData },
            success: function (response) {
                if (response.result) {
                    messageHelper.ShowSuccessMessage("@Html.Raw(@MessageConstant.Values.SaveOK)");
                    $("#btnFilter").trigger("click");
                }
                else
                {
                    messageHelper.ShowErrorMessage("@Html.Raw(@MessageConstant.Values.SaveFailed)");
                }
            },
            complete: function () { },
            error: log_ajax_err
        });
    }
    function printAllCheckDeliveryItem() {
        if ($('#mainTable').DataTable() === undefined) return;

        var deliveryItemIds = getMarkedDeliveryItemIds();
        if (deliveryItemIds.length === 0) {
            messageHelper.ShowErrorMessage('Изберете поне еднa призовка/съобщение.');
            $(window).scrollTop(0);
            return;
        }
        $('#print_button').attr("disabled", true);
        $('#deliveryItemIdsJson').val(JSON.stringify(deliveryItemIds));
        $("#formPrintPdfsPost").submit();

        setTimeout(function(){ $('#print_button').attr("disabled", false); }, 3000);
    }

    function findAndCheckDeliveryItem() {
        var regNum = $("#regNumber").val();
        //var rows = $('#mainTable').DataTable()
        //    .rows(function (idx, data, node) {
        //        if (data.regNumber === regNum.trim())
        //            data.checkRow = true;
        //        return data.regNumber === regNum.trim() ?   true : false;
        //    })
        //    .nodes();

        //$('input[type="checkbox"]', rows).prop('checked', true);
        let idxChange = -1;
        let dataChange = null;
        $('#mainTable').DataTable()
            .rows(function (idx, data, node) {
                if (data.regNumber === regNum.trim()) {
                    data.checkRow = true;
                    data.checkRowOrder = (data.checkRow ? "0Z" : "1Z") + data.regNumber;
                    idxChange = idx;
                    dataChange = data;
                }
            })
        if (idxChange >= 0) {
            $('#mainTable').dataTable().fnUpdate(dataChange, idxChange, undefined, false);
        }
        setMarkedLabel();
        $('#mainTable').DataTable().column('0:visible').order('asc').draw();
    }

    function setMarkedLabel() {
        var message = "Няма маркирани ";
        var deliveryItemIds = getMarkedDeliveryItemIds();
        if (deliveryItemIds.length > 0)
            message = "Маркирани " + deliveryItemIds.length.toString();
        message += " от " + dataSet.length.toString();
        $('#labelRecap').html(message);
    }



    $('#showCheckOnRegNum').change(function () {
        if ($('#showCheckOnRegNum').is(":checked")) {
            $('.check-on-regnum').show();
        }
        else {
            $('.check-on-regnum').hide();
        }
    });
    function submitAllCheckDeliveryItemChange() {
        if ($('#mainTable').DataTable() === undefined) return;

        var deliveryItemIds = getMarkedDeliveryItemIds();
        if (deliveryItemIds.length === 0) {
            messageHelper.ShowErrorMessage('Изберете поне еднa призовка/съобщение.');
            $(window).scrollTop(0);
            return;
        }
        var filterData = JSON.parse($('#filterJson').val());
        filterData.NewLawUnitId = $('#NewLawUnitId').val();
        filterData.NewDeliveryAreaId = $('#NewDeliveryAreaId').val();
        filterData.NewCourtId = $('#NewCourtId').val();
        if (filterData.NewCourtId == filterData.CourtId) {
            if (filterData.NewLawUnitId == "-1" && filterData.NewDeliveryAreaId == "-1") {
                messageHelper.ShowErrorMessage('Изберете нов призовкар или район.');
                $(window).scrollTop(0);
                return;
            }
        }
        $.ajax({
            type: "POST",
            url: "@Url.Action("SaveChangeLawUnit")",
            dataType: "json",
            cache: false,
            data: { deliveryItemIdsJson: deliveryItemIds, filterData : filterData },
            success: function (response) {
                if (response.result) {
                    messageHelper.ShowSuccessMessage("@Html.Raw(@MessageConstant.Values.SaveOK)");
                    $("#btnFilter").trigger("click");
                   // window.location.href = "/";
                }
                else
                {
                    messageHelper.ShowErrorMessage("@Html.Raw(@MessageConstant.Values.SaveFailed)");
                }
            },
            complete: function () { },
            error: log_ajax_err
        });
    }
     function getToCourtLawUnitAndArea(toCourtId, deliveryAreaId, lawUnitId) {
        lawUnitType = $('#NewLawUnitType').val();
        console.log(lawUnitType);
        $.ajax({
            type: "POST",
            url: '@Url.Action("LoadDataLawUnitAndAreaNew", "CaseNotification")',
            dataType: "json",
            cache: false,
            data: { toCourtId: toCourtId, lawUnitType: lawUnitType },
            success: function (response) {
                $('#NewDeliveryAreaId').empty().trigger("change");
                $('#NewDeliveryAreaId').select2({
                    language: "bg",
                    data: response.deliveryAreaDdl
                });
                var arrSelect = response.deliveryAreaDdl.filter(function (el) {
                    if (el.id == deliveryAreaId)
                        return true;
                    else
                        return false;
                });
                if (arrSelect.length <= 0)
                    deliveryAreaId = -1;
                $('#NewDeliveryAreaId').val(deliveryAreaId).trigger('change');

                $('#NewLawUnitId').empty().trigger("change");
                $('#NewLawUnitId').select2({
                    language: "bg",
                    data: response.lawUnitDdl
                });
                var arrSelect = response.lawUnitDdl.filter(function (el) {
                    if (el.id == lawUnitId)
                        return true;
                    else
                        return false;
                });
                if (arrSelect.length <= 0)
                    lawUnitId = -1;
                $('#NewLawUnitId').val(lawUnitId).trigger('change');
            },
            complete: function () { },
            error: log_ajax_err
        });
    }
    function DeliveryAreaIdChange() {
        var deliveryAreaId = $("#NewDeliveryAreaId").val();
        $.ajax({
            type: "POST",
            url: "@Url.Action("getLawUnitId", "DeliveryArea")",
            dataType: "json",
            cache: false,
            data: { deliveryAreaId: deliveryAreaId },
            success: function (response) {
                $("#NewLawUnitId").val(response.lawUnitId).trigger('change');
            },
            complete: function () { },
            error: log_ajax_err
        });
    };
    function printNotificationRaw(id) {
        window.open('@Url.Action("PrintPdf", "CaseNotification")/' + id, '_blank');
    }
    $( document ).ready(function() {
        $("#showCheckOnRegNum").trigger("change");
        //  $("#btnFilter").trigger("click");
        $('#NewCourtId').select2({
            language: "bg"
        });
        $('#NewDeliveryAreaId').select2({
            language: "bg"
        });
        $('#NewLawUnitId').select2({
            language: "bg"
        });
        $('#NewCourtId').on('select2:select', function (e) {
            getToCourtLawUnitAndArea($('#NewCourtId').val(), -1, -1);
        });
        $('#NewLawUnitType').change(function (e) {
            getToCourtLawUnitAndArea($('#NewCourtId').val(), -1, -1);
        });
        $('#NewDeliveryAreaId').on('select2:select', function (e) {
            DeliveryAreaIdChange();
        });
        $('#ForId').select2({
            language: "bg"
        });
        $("#ForId").on('select2:select', function (e) {
            if ($('#btnFilter').attr("disabled") === true) {
                return;
            }
            var filterData = JSON.parse($('#filterJson').val());
            filterData.ForId = $("#ForId").val();
            $('#filterJson').val(JSON.stringify(filterData));
            LoadDataSet();
        });
    });
</script>
