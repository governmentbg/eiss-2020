@model DocumentTemplate
@using IOWebApplication.Infrastructure.Data.Models.Documents
@using IOWebApplication.Infrastructure.Models.ViewModels.Common
@using IOWebApplication.Infrastructure.Models
@{
    if (Model.Id > 0)
    {
        ViewData["Title"] = "Редакция на документ към " + SourceTypeSelectVM.GetSourceTypeName(Model.SourceType);
    }
    else
    {
        ViewData["Title"] = "Добавяне на документ към " + SourceTypeSelectVM.GetSourceTypeName(Model.SourceType);
    }
    IAccessControl access = (IAccessControl)ViewBag.AccessControl;
}

@section breadcrumb{
    @if (ViewBag.breadcrumbs != null)
    {
        <partial name="Breadcrumbs" model="@(List<IOWebApplication.Infrastructure.Models.ViewModels.Common.BreadcrumbsVM>)ViewBag.breadcrumbs" />
    }
}

<div class="row">
    <div class="col-lg-12">
        <form asp-action="Edit" method="post">
            @Html.HiddenFor(x => x.Id)
            @Html.HiddenFor(x => x.SourceType)
            @Html.HiddenFor(x => x.SourceId)
            @Html.HiddenFor(x => x.CaseId)

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div id="saveContainer">
                <partial name="_SaveFormContent" model="@("#saveContainer")" />

                <div class="row">
                    <div class="col-lg-3">@Html.EditorFor(x => x.DocumentKindId, "GenericDropDown")</div>
                    <div class="col-lg-3">@Html.EditorFor(x => x.DocumentGroupId, "GenericDropDown")</div>
                    <div class="col-lg-3">@Html.EditorFor(x => x.DocumentTypeId, "GenericDropDown")</div>
                    <div class="col-lg-3">@Html.EditorFor(x => x.HtmlTemplateId, "GenericDropDown")</div>
                </div>
                <div class="row">
                    <div class="col-lg-6">@Html.EditorFor(x => x.AuthorId, "SelectUser")</div>
                    <div class="col-lg-6">@Html.EditorFor(x => x.DocumentTemplateStateId, "GenericDropDown")</div>
                </div>
                <div class="row">
                    <div class="col-lg-12">@Html.EditorFor(x => x.Description, "Textarea")</div>
                </div>
                @if ((Model.CaseId ?? 0) > 0)
                {
                    <div id="casePersonDiv" class="row">
                        <div class="col-lg-6">@Html.EditorFor(x => x.CasePersonId, "GenericDropDown")</div>
                        <div class="col-lg-6">@Html.EditorFor(x => x.CasePersonAddressId, "GenericDropDown")</div>
                    </div>
                }

                <div id="fromToDateDiv" class="row">
                    <div class="col-lg-6">@Html.EditorFor(x => x.DateFrom, "DateTime")</div>
                    <div class="col-lg-6">@Html.EditorFor(x => x.DateTo, "DateTime")</div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12">
                    @if (access.CanChange)
                    {
                        <input type="submit" value="Запис" class="btn btn-success" />
                    }
                    <a asp-controller="Home" asp-action="SourceTypeAction"
                       asp-route-sourceType="@Model.SourceType" asp-route-sourceId="@Model.SourceId" class="btn btn-danger">Назад</a>

                    @if (Model.Id > 0)
                    {

                        <a asp-action="Blank" asp-route-id="@Model.Id" class="btn btn-primary">Изготвяне на документ</a>

                        if (Model.DocumentId > 0)
                        {
                            <a asp-action="View" asp-controller="Document" asp-route-id="@Model.DocumentId" class="btn btn-success">Преглед на документ @(ViewBag.docNumber)</a>
                        }
                        else
                        {
                            <a asp-action="AddFromTemplate" asp-controller="Document" asp-route-templateId="@Model.Id" target="_blank" class="btn btn-warning">Регистриране на документ</a>
                        }
                        <div class="pull-right">
                            @if (access.CanChangeFull)
                            {
                                @await Html.PartialAsync("_ExpiredInfoButton", new ExpiredInfoVM() { Id = Model.Id, DialogTitle = "Премахване на документ", ExpireSubmitUrl = Url.Action("DocumentTemplate_ExpiredInfo") })
                                <span>&nbsp;</span>
                            }

                            @await Html.PartialAsync("_ShowLogOperation", new IOWebApplication.Core.Models.ShowLogModel() { ObjectKey = Model.Id.ToString() })
                        </div>
                    }
                </div>
            </div>
        </form>
    </div>
</div>

@section scripts{
    <script>
        var arrayHavePersonIds;
        var arrayHaveFromToDateIds;
        $(document).ready(function () {
            arrayHaveFromToDateIds = @Html.Raw(Json.Serialize(@ViewBag.haveFromToDateIds));
            if ('@(Model.CaseId??0)' > 0) {
                arrayHavePersonIds = @Html.Raw(Json.Serialize(@ViewBag.haveCasePersonIds));
            }
        });

        $(function () {
            $('#DocumentKindId').change(function () {
                    requestCombo('@Url.Action("GetDDL_DocumentGroup", "Ajax")', { documentKindId: $(this).val() }, '#DocumentGroupId', @(Model.DocumentGroupId), function () {
                        $('#DocumentGroupId').trigger('change');
                    });
            }).trigger('change');

            $('#DocumentGroupId').change(function () {
                requestCombo('@Url.Action("GetDDL_DocumentType", "Ajax")', { documentGroupId: $(this).val() }, '#DocumentTypeId', @(Model.DocumentTypeId), function () {
                    $('#DocumentTypeId').trigger('change');
                });
            });

            $('#DocumentTypeId').change(function () {
                requestCombo('@Url.Action("GetDDL_HtmlTemplateByDocType", "Ajax")', { documentTypeId: $(this).val(), caseId: '@Model.CaseId', sourceType: '@Model.SourceType', setDefault: '@Model.Id' <= 0 }, '#HtmlTemplateId', @(Model.HtmlTemplateId ?? 0), function () {
                    $('#HtmlTemplateId').trigger('change');
                });
            });

            $('#HtmlTemplateId').change(function () {
                var htmlTemplateId = $(this).val();
                var hasFromToDate = arrayHaveFromToDateIds.find(x => x == htmlTemplateId);
                if (hasFromToDate != undefined) {
                    $('#DateFrom').prop("disabled", false);
                    $('#DateTo').prop("disabled", false);
                    $('#fromToDateDiv').show();
                }
                else {
                    $('#DateFrom').prop("disabled", true);
                    $('#DateTo').prop("disabled", false);
                    $('#fromToDateDiv').hide();
                }
                
                if (@(Model.CaseId ?? 0) > 0) {
                    var hasPerson = arrayHavePersonIds.find(x => x == htmlTemplateId);
                    if (hasPerson != undefined) {
                        $('#CasePersonId').prop("disabled", false);
                        $('#casePersonDiv').show();
                    }
                    else {
                        $('#CasePersonId').prop("disabled", true);
                        $('#casePersonDiv').hide();
                    }
                }
            });

            $('#CasePersonId').change(function () {
                requestCombo('@Url.Action("GetDDL_CasePersonAddress", "CasePerson")', { casePersonId: $(this).val() }, '#CasePersonAddressId', @(Model.CasePersonAddressId ?? 0));
            }).trigger('change');


            initUserAutoComplete();
        });
    </script>
}
