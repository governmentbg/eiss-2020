@using IOWebApplication.Infrastructure.Models.ViewModels.Money
@model ObligationForPayFilterVM

@{
    if (Model.Sign == IOWebApplication.Infrastructure.Constants.NomenclatureConstants.MoneySign.SignMinus)
    {
        ViewData["Title"] = "Задължения";
    }
    else
    {
        ViewData["Title"] = "Вземания";
    }
}

@section breadcrumb{
    <ol class="breadcrumb">
        <li><a href="@Url.Action("Index","Home")" title="Начало"><i class="fa fa-home"></i></a></li>
        <li class="active">@ViewData["Title"]</li>
    </ol>
}

<div class="row">
    <div class="col-lg-2">@Html.EditorFor(m => m.Status, "GenericDropDown")</div>
    <div class="col-lg-2">@Html.EditorFor(m => m.PersonUicSearch)</div>
    <div class="col-lg-4">@Html.EditorFor(m => m.PersonNameSearch)</div>
</div>
<div class="row">
    <div class="col-lg-2">@Html.EditorFor(m => m.DateFrom, "DateTime")</div>
    <div class="col-lg-2">@Html.EditorFor(m => m.DateTo, "DateTime")</div>
    <div class="col-lg-2">@Html.EditorFor(m => m.CaseRegNumber)</div>
    <div class="col-lg-2">@Html.EditorFor(m => m.MoneyTypeId, "GenericDropDown")</div>
    @if (Model.Sign == IOWebApplication.Infrastructure.Constants.NomenclatureConstants.MoneySign.SignMinus)
    {
        <div class="col-lg-2">@Html.EditorFor(m => m.ExpenseOrderSearch)</div>
    }
</div>

<div class="row">
    <div class="col-md-6 text-left pb-15">
        <button type="button" class="btn btn-primary" id="btnFilter" onclick="LoadTable()" value="Филтриране" title="Филтриране">
            Филтриране
            <i class="fa fa-search" title="Търсене"></i>
        </button>
    </div>
</div>

<div class="row">
    <div class="col-md-6 text-left pb-15">
        <button type="button" class="btn btn-primary" id="btnGetCheck" onclick="GetAllCheck()" value="Плащане" title="Плащане">
            Плащане
            <i class="fa fa-paypal" title="Плащане"></i>
        </button>
        @if (Model.Sign == IOWebApplication.Infrastructure.Constants.NomenclatureConstants.MoneySign.SignPlus)
        {

            <button type="button" class="btn btn-primary" id="btnBalancePayment" onclick="MakeBalancePayment()" value="Прихващане" title="Прихващане">
                Прихващане
                <i class="fa fa-paypal" title="Прихващане"></i>
            </button>
        }
        @if (Model.Sign == IOWebApplication.Infrastructure.Constants.NomenclatureConstants.MoneySign.SignMinus)
        {
            <button type="button" class="btn btn-primary" id="btnOrder" onclick="MakeExpenseOrder()" value="Разходен ордер" title="Разходен ордер">
                Разходен ордер
                <i class="fa fa-paypal" title="Разходен ордер"></i>
            </button>
        }
        @if (Model.Sign == IOWebApplication.Infrastructure.Constants.NomenclatureConstants.MoneySign.SignPlus)
        {
            <button type="button" class="btn btn-primary" id="btnExecList" onclick="MakeExecList()" value="Изпълнителен лист" title="Изпълнителен лист">
                Изпълнителен лист
                <i class="fa fa-paypal" title="Изпълнителен лист"></i>
            </button>
        }
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <table id="obligationForPayMainTable" class="table table-hover table-striped"></table>
    </div>
</div>

<div id="paymentsForObligation" title="Свързани плащания">

</div>

<script>
    var table;
        function ReloadDatatable()
        {
            refreshTable('#obligationForPayMainTable');
        }

    function LoadTable() {
        if ($.fn.dataTable.isDataTable('#obligationForPayMainTable')) {
            refreshTable('#obligationForPayMainTable');
        }
        else {
           table = $('#obligationForPayMainTable').DataTable({
                ajax: {
                    "url": "@Url.Action("ListDataObligationForPay", "Money")",
                    "type": "POST",
                    "datatype": "json",
                   data: function (d) {
                       d.model = {
                        Status: $("#Status").val(),
                        PersonUicSearch: $("#PersonUicSearch").val(),
                        PersonNameSearch: $("#PersonNameSearch").val(),
                        ExpenseOrderSearch: $("#ExpenseOrderSearch").val(),
                        DateFrom: $("#DateFrom").val(),
                        DateTo: $("#DateTo").val(),
                        Sign: @Model.Sign,
                        MoneyTypeId: $("#MoneyTypeId").val(),
                        CaseRegNumber: $("#CaseRegNumber").val()
                       };
                    }
               },
               'order': [[1, 'asc']],
                filter: false,
                columns: [
                    {
                        name: "checkRow",
                        data: "checkRow",
                        title: '<input type="checkbox" id="select-all" onclick="selectAll();">',
                        sortable: false,
                        searchable: false,
                        "render": function (item, type, row, meta) {
                            return '<input type="checkbox" value="' + row.id + '">';
                        }
                    },
                    {
                        name: 'obligationNumber',
                        data: 'obligationNumber',
                        title: 'Номер',
                        sortable: true,
                        searchable: true
                    },
                    {
                        className: 'col-md-1',
                        name: 'obligationDate',
                        data: 'obligationDate',
                        title: 'От дата',
                        sortable: true,
                        searchable: false,
                        "render": function (value) {
                            if (value)
                                return moment(value).format("DD.MM.YYYY");
                            else
                                return "";
                        }
                    },
                    {
                        name: 'personUic',
                        data: 'personUic',
                        title: 'Идентификатор',
                        sortable: true,
                        searchable: true
                    },
                    {
                        name: 'personName',
                        data: 'personName',
                        title: 'Лице',
                        sortable: true,
                        searchable: true
                    },
                    {
                        name: 'moneyTypeName',
                        data: 'moneyTypeName',
                        title: 'Вид сума',
                        sortable: true,
                        searchable: true
                    },
                    {
                        className: "text-right",
                        name: 'amount',
                        data: 'amount',
                        title: 'Сума',
                        sortable: true,
                        searchable: false,
                        "render": function (value) {
                            if (value)
                                return parseFloat(value).toFixed(2);
                            else
                                return "0.00";
                        }
                    },
                    {
                        className: "text-right",
                        name: 'amountPay',
                        data: 'amountPay',
                        title: 'Платена сума',
                        sortable: true,
                        searchable: false,
                        "render": function (value) {
                            if (value)
                                return parseFloat(value).toFixed(2);
                            else
                                return "0.00";
                        }
                    },
                    {
                        className: "text-right",
                        name: 'amountForPay',
                        data: 'amountForPay',
                        title: 'Остатък',
                        sortable: true,
                        searchable: false,
                        "render": function (value) {
                            if (value)
                                return parseFloat(value).toFixed(2);
                            else
                                return "0.00";
                        }
                    },
                    {
                        name: 'obligationInfo',
                        data: 'obligationInfo',
                        title: 'Основание',
                        sortable: true,
                        searchable: true
                    },
                    {
                        name: 'caseData',
                        data: 'caseData',
                        title: 'Номер дело',
                        sortable: true,
                        searchable: true
                    }
                        @if (Model.Sign == IOWebApplication.Infrastructure.Constants.NomenclatureConstants.MoneySign.SignMinus)
                        {
                         <text>
                    ,
                    {
                        name: 'regNumberExpenseOrder',
                        data: 'regNumberExpenseOrder',
                        title: 'Разходен ордер',
                        sortable: true,
                        searchable: true,
                        "render": function (a, b, item, d) {
                            return TemplateToHtml('#templateExpenseOrder', item);
                        }
                    }
                        </text>
                        }

                        @if (Model.Sign == IOWebApplication.Infrastructure.Constants.NomenclatureConstants.MoneySign.SignPlus)
                        {
                         <text>
                    ,
                    {
                        name: 'regNumberExecList',
                        data: 'regNumberExecList',
                        title: 'Изпълнителен лист',
                        sortable: true,
                        searchable: true,
                        "render": function (a, b, item, d) {
                            return TemplateToHtml('#templateExecList', item);
                        }
                    }
                        </text>
                            }
                    ,
                    {
                            name: 'actions',
                        data: "id",
                        title: "",
                        sortable: false,
                        searchable: false,
                        className: "text-center noExport",
                        "render": function (value) {
                                    return TemplateToHtml('#obligationForPayTemplate', value);
                                }
                            }
                ]
            });
        }
    }

    function selectAll()
    {
        var check = $("#select-all").is(':checked');
        var rows = table.rows({ 'search': 'applied' }).nodes();
        $('input[type="checkbox"]', rows).prop('checked', check);
    }

    function GetAllCheckIds()
    {
        var ids = "";
        table.$('input[type="checkbox"]').each(function () {
            if (this.checked) {
                if (ids != "") {
                    ids = ids + ",";
                }
                ids = ids + this.value;
            }
        });
        return ids;
    }

    function GetAllCheck()
    {
        if (table === undefined) return;
        var ids = GetAllCheckIds();

        if (ids == "") {
            messageHelper.ShowErrorMessage('Изберете поне едно задължение за плащане.');
            return;
        }
        requestContent('@Url.Action("Payment","Money")'
            , { idStr:ids}
            , function (data) {
                ShowModalDialog('Плащане', data);
            });
    }

    function MakeBalancePayment()
    {
        if (table === undefined) return;
        var ids = GetAllCheckIds();

        if (ids == "") {
            messageHelper.ShowErrorMessage('Изберете поне едно задължение за плащане.');
            return;
        }
        requestContent('@Url.Action("BalancePayment","Money")'
            , { idStr: ids }
            , function (data) {
                ShowModalDialog('Прихващане', data);
            });
    }

    function MakeExpenseOrder() {
        if (table === undefined) return;
        var ids = GetAllCheckIds();

        if (ids == "") {
            messageHelper.ShowErrorMessage('Изберете поне едно задължение.');
            return;
        }
        requestContent('@Url.Action("ExpenseOrder","Money")'
            , { idStr:ids}
            , function (data) {
                ShowModalDialog('Разходен ордер', data);
            });
    }

    function MakeExecList() {
        if (table === undefined) return;
        var ids = GetAllCheckIds();

        if (ids == "") {
            messageHelper.ShowErrorMessage('Изберете поне едно задължение.');
            return;
        }
        tinymce.remove('#Content');
        requestContent('@Url.Action("ExecList", "Money")'
            , { idStr: ids }
            , function (data) {
                ShowModalDialog('Изпълнителен лист', data);
            });
    }

</script>

<script id="obligationForPayTemplate" type="text/x-handlebars-template">
    <a href="#" class="btn btn-primary btn-sm" onclick="PaymentsForObligation('{{this}}');"><i class="fa fa-paypal"></i></a>
</script>

<script>
        function PaymentsForObligation(id)
        {
            requestContent('@Url.Action("PaymentsForObligation","Money")'
                , { id: id }
                , function (data) {
                    MakeBigModalDialog("div#paymentsForObligation");
                    $("#paymentsForObligation").html(data);
                });
        }
</script>
<script id="templateExpenseOrder" type="text/x-handlebars-template">
    {{#if expenseOrderId}}
    <a href="@Url.Action("EditExpenseOrder","Money")/{{expenseOrderId}}" target="_blank" title="Преглед Разходен ордер">{{regNumberExpenseOrder}}</a>
    {{/if}}
</script>
<script id="templateExecList" type="text/x-handlebars-template">
    {{#if execListId}}
    <a href="@Url.Action("EditExecList","Money")/{{execListId}}" target="_blank" title="Преглед Изпълнителен лист">{{regNumberExecList}}</a>
    {{/if}}
</script>

