@model IOWebApplication.Infrastructure.Models.ViewModels.Common.BlankEditVM;
@{
    ViewData["Title"] = Model.Title;
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
    bool hasFooter = !string.IsNullOrEmpty(Model.HtmlFooter) || Model.FooterIsEditable;
}
@section menuHeader{
    <header class="main-header">
        @await Component.InvokeAsync(nameof(IOWebApplication.Components.MainMenuComponent))
    </header>
}

@section contentHeader{
    <section class="content-header">
        <h1>
            @ViewData["Title"]
        </h1>
        @if (ViewBag.breadcrumbs != null)
        {
            <partial name="Breadcrumbs" model="@(List<IOWebApplication.Infrastructure.Models.ViewModels.Common.BreadcrumbsVM>)ViewBag.breadcrumbs" />
        }
    </section>
}

<style>
    table.mce-item-table, .mce-item-table td, .mce-item-table th, .mce-item-table caption {
        border: none;
    }
</style>
@if (!string.IsNullOrEmpty(Model.TemplateStyle))
{
    <style type="text/css">
        @Html.Raw(Model.TemplateStyle)
    </style>
}
<div class="row">
    <div class="col-lg-12">
        @using (Html.BeginForm(FormMethod.Post, new { onsubmit = "storeContent();", enctype = "multipart/form-data" }))
        {
            @Html.HiddenFor(x => x.SourceType)
            @Html.HiddenFor(x => x.SourceId)
            @Html.HiddenFor(x => x.FooterIsEditable)
            @Html.Hidden("reset_mode")
            @if (!string.IsNullOrEmpty(Model.HtmlHeader))
            {
                <div class="box box-default">
                    <div class="box-header with-border">
                        <h3 class="box-title">Заглавна част</h3>

                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                        </div>
                        <!-- /.box-tools -->
                    </div>
                    <!-- /.box-header -->
                    <div class="box-body" style="">
                        @Html.Raw(Model.HtmlHeader)
                    </div>
                    <!-- /.box-body -->
                </div>


            }
            <div class="form-group">
                @Html.TextAreaFor(model => model.HtmlContent, new { @class = "tinymce" })
            </div>
            @if (hasFooter)
            {
                <div class="box box-default @((!Model.FooterIsEditable) ? "collapsed-box":"")">
                    <div class="box-header with-border">
                        <h3 class="box-title">@(Model.FooterTitle ?? "Долен колонтитул")</h3>

                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa @((!Model.FooterIsEditable) ? "fa-plus":"fa-minus")"></i>
                            </button>
                        </div>
                        <!-- /.box-tools -->
                    </div>
                    <!-- /.box-header -->
                    <div class="box-body" style="">
                        @if (Model.FooterIsEditable)
                        {
                            @if (Model.FooterIsHtml)
                            {
                                @Html.TextAreaFor(model => model.HtmlFooter, new { @class = "tinymce" })
                            }
                            else
                            {
                                <textarea asp-for="HtmlFooter" class="form-control" rows="8"></textarea>
                            }
                        }
                        else
                        {
                            @Html.Raw(Model.HtmlFooter)
                        }
                    </div>
                    <!-- /.box-body -->
                </div>
            }
            @Html.HiddenFor(x => x.SessionName)
            <div class="form-group">
                <input type="submit" value="Запис" class="btn btn-success" />
                &nbsp;
                <a href="@Html.Raw(Model.ReturnUrl)" class="btn btn-danger">Назад</a>

                <div class="pull-right">
                    @if (!string.IsNullOrEmpty(Model.RelatedDocumentPreviewUrl))
                    {
                        <a href="@Html.Raw(Model.RelatedDocumentPreviewUrl)" class="btn btn-info" target="_blank">Свързан документ</a>
                        <text>&nbsp;&nbsp;&nbsp;</text>
                    }
                    @if (Model.HasResetButton)
                    {
                        <input type="button" onclick="submitWithReset(this); return false;" value="Обнови от данните" class="btn btn-danger" />
                        <text>&nbsp;&nbsp;&nbsp;</text>
                    }
                    @if (Model.HasPreviewButton)
                    {
                        <input type="submit" name="btnPreview" value="Преглед" formtarget="_blank" class="btn btn-primary" />

                    }
                </div>
            </div>
        }
    </div>
</div>
<script>
    $(function () {
        @if (Model.FooterIsEditable)
        {
            <text>setTimeout(shrinkEditor, 200);</text>
        }
        @if (!string.IsNullOrEmpty(Model.AutoSaveKey))
        {
            <text>initAutoSave('@Model.AutoSaveKey');</text>
        }
    });
    function shrinkEditor() {
        tinymce.activeEditor.getContainer().style.height = '400px';
    }
    function submitWithReset(sender) {
        swalConfirm('Обновяването на данните ще премахне всички ваши промени по бланката! Потвърдете зареждането на актуалните данните по бланката!', function () {
            var mainForm = $(sender).parents('form:first');
            $('#reset_mode').val('reset_blank');
            $(mainForm).trigger('submit');
        });
    }

    let autosaveKey = '@Model.AutoSaveKey';

    function initAutoSave() {

        let cashed = storageHelper.load(autosaveKey);
        if (cashed && cashed != '' && cashed != $('#HtmlContent').val()) {
            swalConfirm('Съществува незаписано копие на документа! Желаете ли да го заредите?',
                function () {
                   // debugger;
                    tinymce.editors[0].setContent(cashed);
                    startAutoSave();
                },
                function () {
                    startAutoSave();
                }
            )
        } else {
            startAutoSave();
        }
    }

    function startAutoSave() {
        setInterval(function () {
            storeContent();
        }, 10000);
    }

    function storeContent() {
        if (autosaveKey != '' && autosaveKey.length > 0) {
            let _html = tinymce.editors[0].getContent();
            storageHelper.save(autosaveKey, _html);
        }
    }

    window.onbeforeunload = function () { storeContent(); }
</script>