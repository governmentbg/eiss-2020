@using IOWebApplication.Infrastructure.Constants
@model WorkTaskEditVM
@using (Html.BeginForm(FormMethod.Post, null, new { id = "wtModalForm" }))
{
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.SourceId)
    @Html.HiddenFor(x => x.SubSourceId)
    @Html.HiddenFor(x => x.SourceType)
    @Html.HiddenFor(x => x.ParentTaskId)
    @if (Model.Id > 0)
    {
        @Html.HiddenFor(x => x.TaskTypeId)
        @Html.DisplayFor(x => x.TaskTypeName, "obj")
    }
    else
    {
        @Html.EditorFor(x => x.TaskTypeId, "GenericDropDown")
        <p id="taskInfo" class="text-light-blue"></p>
    }
    <div id="wtEditTaskUserContainer">
        <div class="form-group">
            <label class="control-label">Начин на изпълнение</label>
            <div>
                <label>@Html.RadioButtonFor(x => x.TaskExecutionId, WorkTaskConstants.TaskExecution.ByUser)&nbsp;От потребител</label>
                &nbsp;&nbsp;&nbsp;
                <label>@Html.RadioButtonFor(x => x.TaskExecutionId, WorkTaskConstants.TaskExecution.ByOrganization)&nbsp;От структура</label>
            </div>
        </div>
        <div id="selectUser">
            @Html.EditorFor(x => x.UserId, "SelectUser")
        </div>
        <div id="selectOrganization">
            @Html.EditorFor(x => x.CourtOrganizationId, "SelectOrganization")
        </div>
        @Html.EditorFor(x => x.DateEnd, "DateTime")
    </div>
    @Html.EditorFor(x => x.DescriptionCreated, "textarea")
    <div class="form-group">
        <input type="submit" value="Запис" class="btn btn-success submit single-click-submit" />
        @*<input type="submit" value="Запис" class="btn btn-success" />*@
    </div>
}
<div id="modalMessageContainer">
</div>
<script>
    let selfTasks = JSON.parse('@ViewBag.SelfTasks');
    var taskInfos = JSON.parse('@Html.Raw(ViewBag.TaskInfo)');
    $(function () {
        attachAjaxForm('#wtModalForm', function (data) {
            if (data.responseJSON.result == true) {
                wtLoadData();
                HideModal();
                messageHelper.ShowSuccessMessage(data.responseJSON.message);
            } else {
                messageHelper.ShowErrorMessage(data.responseJSON.message, '#modalMessageContainer');
            }
        });
        initUserAutoComplete();
        initOrganizations();
        initDatePicker();

        $('#TaskTypeId').change(function () {
            if (selfTasks.includes(parseInt($(this).val()))) {
                $('#wtEditTaskUserContainer').hide();
            } else {
                $('#wtEditTaskUserContainer').show();
            }
            let taskTypeId = $(this).val();
            var taskInfo = taskInfos.filter(function (x) {
                return x.id == taskTypeId;
            });
            //console.log(taskInfo);
            if (taskInfo.length > 0 && taskInfo[0].description) {
                $('#taskInfo').html('<i class="fa fa-info-circle"></i>&nbsp;'+taskInfo[0].description);
            } else {
                $('#taskInfo').text('');
            }
        }).trigger('change');

        $('input[name="TaskExecutionId"]').click(function () {
            if ($(this).is(':checked')) {
                switch ($(this).val()) {
                    case '@WorkTaskConstants.TaskExecution.ByUser':
                        $('#selectUser').show();
                        $('#selectOrganization').hide();
                        break;
                    case '@WorkTaskConstants.TaskExecution.ByOrganization':
                        $('#selectUser').hide();
                        $('#selectOrganization').show();
                        break;
                }
            }
        })
        $('input[name="TaskExecutionId"]:checked').trigger('click');
    })
</script>