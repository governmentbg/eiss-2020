@model DocumentResolution
@using IOWebApplication.Infrastructure.Data.Models.Documents
@using IOWebApplication.Infrastructure.Constants
@inject IOWebApplication.Infrastructure.Contracts.IUserContext userContext
@{
    if (Model.Id > 0)
    {
        ViewData["Title"] = "Редакция на разпореждане към документ";
    }
    else
    {
        ViewData["Title"] = "Добавяне на разпореждане към документ";
    }
    bool hasActFile = (bool)ViewBag.hasActFile;
}

@section breadcrumb{
    @if (ViewBag.breadcrumbs != null)
    {
        <partial name="Breadcrumbs" model="@(List<IOWebApplication.Infrastructure.Models.ViewModels.Common.BreadcrumbsVM>)ViewBag.breadcrumbs" />
    }
}

<div class="nav-tabs-custom">
    <ul class="nav nav-tabs" id="actTab">
        <li class="active"><a href="#tabMainActData" data-toggle="tab"><i class="fa fa-database"></i> Основни данни</a></li>
        @if (Model.Id > 0)
        {
            if (Model.ResolutionTypeId == DocumentConstants.ResolutionTypes.ResolutionForSelection)
            {
                <li class=""><a href="#tabCases" data-toggle="tab"><i class="fa fa-user"></i> Дела</a></li>
            }
            <li class=""><a href="#tabDRWorkTask" data-toggle="tab"><i class="fa fa-exclamation"></i> Задачи</a></li>
            @if (userContext.CourtTypeId == NomenclatureConstants.CourtType.VKS)
            {
                <li class=""><a href="#tabDRNotifications" data-toggle="tab"><i class="fa fa-book"></i> Съобщения и известия</a></li>
            }
            <li class=""><a href="#tabDRDocTemplates" data-toggle="tab"><i class="fa fa-book"></i> Свързани документи</a></li>
        }
    </ul>

    <div class="tab-content">
        <div class="tab-pane active" id="tabMainActData">
            <div class="row">
                <div class="col-md-6">
                    <partial name="_MainData" model="@Model" />
                </div>
                @if (Model.Id > 0)
                {
                    <div class="col-md-6">
                        <div class="cdn-files" data-label="Разпореждане" data-sourcetype="@SourceTypeSelectVM.DocumentResolutionPdf" data-sourceid="@Model.Id" data-editmode="none"></div>

                        @if (Model.DeclaredDate == null)
                        {
                            <fieldset class="is-fieldset">
                                <legend class="legend_1">
                                    Действия
                                </legend>
                                <a href="#" onclick="sendForSignCheck(this); return false;" class="btn btn-sm btn-success" title="Създава документа на акта и задачите за подпис на състава по заседанието">Изпращане за подпис</a>
                                <partial name="WorkTaskMyNew" model="@(new SourceTypeSelectVM(SourceTypeSelectVM.DocumentResolution,Model.Id) )" />
                            </fieldset>
                        }
                    </div>
                }
            </div>
        </div>
        @if (Model.Id > 0)
        {
            <div class="tab-pane" id="tabCases">
                <partial name="_Cases" model="@Model.Id" />
            </div>
            <div class="tab-pane" id="tabDRWorkTask">
                <partial name="WorkTask" model="@(new SourceTypeSelectVM(SourceTypeSelectVM.DocumentResolution, Model.Id) { TaskRequired = true })" />
            </div>
            <div class="tab-pane" id="tabDRDocTemplates">
                <partial name="~/Views/DocumentTemplate/_DocumentTemplate.cshtml" model="@(new SourceTypeSelectVM() { SourceType = SourceTypeSelectVM.DocumentResolution, SourceId = Model.Id })" />
            </div>
            @if (userContext.CourtTypeId == NomenclatureConstants.CourtType.VKS)
            {
                <div class="tab-pane" id="tabDRNotifications">
                    <partial name="~/Views/DocumentNotification/_DocumentNotification.cshtml" />
                </div>
            }
        }
    </div>
</div>

@section scripts{
    <partial name="_CdnScript" />

    <script>
        $(document).ready(function () {
            initUserAutoComplete();
            initLawUnit();
            $('#JudgeDecisionCount:checked').trigger('change');
            $('#ResolutionTypeId').change(function () {
                if ($(this).val() == '@DocumentConstants.ResolutionTypes.ResolutionForSelection') {
                    $('#divTaskUser').show();
                } else {
                    $('#divTaskUser').hide();
                }
            }).trigger('change');
            InitDocumentResolutionTab();
        });

        function judgeCountChange(sender) {
            if ($(sender).is(':checked')) {
                if ($(sender).val() == '2') {
                    $('#secondJudge').show();
                } else {
                    $('#secondJudge').hide();
                }
            }
        }

        function editActBlank() {
             let editUrl = "@Url.Action("Blank",new { id=Model.Id})";
            @if (Model.RegDate != null)
            {
                <text>
                    swalConfirm('Има генериран файл на съдебен акт, който е в процес на подписване или е подписан! След промяна на съдържанието на съдебния акт е необходимо да създадете нова задача за подписване, за да се генерира нов файл на съдебния акт със същия номер.', function () {
                            document.location.href = editUrl;
                        });
                </text>
            }else {
                <text>document.location.href = editUrl;</text>
            }

        }

        function sendForSignCheck(sender) {
            if ($(sender).attr('disabled')) {
                return;
            }
            $(sender).attr('disabled', 'disabled');
             let editUrl = "@Url.Action("SentForSignQuick", new { id=Model.Id})";
            @if (hasActFile)
            {
                <text>
                    swalConfirm('Вече има изготвен акт, който е в процес на подписване или е подписан! Ако го изпратите отново за подпис ще се генерира нов файл за акта със същия номер и ще се създаде нова задача за подпис.', function () {
                        document.location.href = editUrl;
                    }, function () {
                            $(sender).removeAttr('disabled');
                    });
                </text>
            }else {
                <text>
            setTimeout(function () {
                document.location.href = editUrl;
            },200);
            </text>
            }
        }
        function InitDocumentResolutionTab() {
            $('a[data-toggle="tab"]').on('show.bs.tab', function (e) {
                localStorage.setItem('activeTabResolution', $(e.target).attr('href'));
            });
            //var activeTab = localStorage.getItem('activeTabResolution');
            //if (activeTab) {
            //    $('a[href="' + activeTab + '"]').tab('show');
            //}

            var url = document.location.toString();
            if (url.match('#')) {
                $('.nav-tabs a[href="#' + url.split('#')[1] + '"]').tab('show');
            }

            //// Change hash for page-reload
            //$('.nav-tabs a').on('shown.bs.tab', function (e) {
            //    window.location.hash = e.target.hash;
            //})
        }
    </script>
}